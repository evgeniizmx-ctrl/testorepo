import os
import io
import json
import re
import asyncio
from datetime import datetime, timedelta
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ChatAction

import httpx
from dateutil import parser as dateparser
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ===================== –û–ö–†–£–ñ–ï–ù–ò–ï =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OCR_SPACE_API_KEY = os.getenv("OCR_SPACE_API_KEY")

TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(TZ)

print("ENV CHECK:",
      "BOT_TOKEN set:", bool(BOT_TOKEN),
      "OPENAI_API_KEY set:", bool(OPENAI_API_KEY),
      "OCR_SPACE_API_KEY set:", bool(OCR_SPACE_API_KEY))

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
print("STEP: creating Bot/Dispatcher...")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
print("STEP: Bot/Dispatcher OK")

scheduler = AsyncIOScheduler(timezone=TZ)

# –ü–∞–º—è—Ç—å (MVP)
PENDING = {}    # user_id -> {"description": str, "repeat": "none|daily|weekly"}
REMINDERS = []  # {user_id, text, remind_dt, repeat}

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
async def send_reminder(user_id: int, text: str):
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("Send reminder error:", e)

def schedule_one(reminder: dict):
    run_dt = reminder["remind_dt"]
    scheduler.add_job(send_reminder, "date", run_date=run_dt,
                      args=[reminder["user_id"], reminder["text"]])

def as_local_iso(dt_like: str | None) -> datetime | None:
    """–ü–∞—Ä—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤–∏–¥–∞ '25.08 14:25', '—Å–µ–≥–æ–¥–Ω—è 18:30', '2025-08-25 15:00' –∏ —Ç.–ø."""
    if not dt_like:
        return None
    try:
        dt = dateparser.parse(dt_like)
        if not dt:
            return None
        if dt.tzinfo is None:
            dt = tz.localize(dt)
        else:
            dt = dt.astimezone(tz)
        return dt.replace(second=0, microsecond=0)
    except Exception:
        return None

# ---------- –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê ----------
def normalize_spaces(s: str) -> str:
    # –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã/—Ç–∞–±—ã/–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
    return re.sub(r"\s+", " ", s, flags=re.UNICODE).strip()

# ---------- –†–û–ë–ê–°–¢–ù–´–ô –ü–ê–†–°–ï–† ¬´–ß–ï–†–ï–ó N ... / –°–ü–£–°–¢–Ø N ...¬ª ----------
RELATIVE_PATTERNS = [
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫\.?)\b", "seconds"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω\.?)\b", "minutes"),
    (r"(—á–µ—Ä–µ–∑)\s+–ø–æ–ª\s*—á–∞—Å–∞\b", "half_hour"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(—á–∞—Å(?:–∞|–æ–≤)?|—á\.?)\b"*
