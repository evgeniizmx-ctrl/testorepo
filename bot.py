import os
import re
import asyncio
from datetime import datetime, timedelta, date
import pytz

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ========= ENV / TZ =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(APP_TZ)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø–µ—Ä–µ–¥–∞—ë–º tzinfo (–Ω–µ —Å—Ç—Ä–æ–∫—É)
scheduler = AsyncIOScheduler(timezone=tz)

# –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ ‚Äî
REMINDERS: list[dict] = []
# PENDING[user_id] = {"description": str, "variants": [datetime], "base_date": date}
PENDING: dict[int, dict] = {}

# ========= HELPERS =========
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

def mk_dt(d: date, h: int, m: int) -> datetime:
    return tz.localize(datetime(d.year, d.month, d.day, h % 24, m % 60, 0, 0))

def fmt_dt(dt: datetime) -> str:
    return f"{dt.strftime('%d.%m')} –≤ {dt.strftime('%H:%M')} ({APP_TZ})"

def soonest(dts): 
    return sorted(dts, key=lambda x: x)

def human_label(dt: datetime) -> str:
    now = datetime.now(tz)
    if dt.date() == now.date():
        dword = "–°–µ–≥–æ–¥–Ω—è"
    elif dt.date() == (now + timedelta(days=1)).date():
        dword = "–ó–∞–≤—Ç—Ä–∞"
    else:
        dword = dt.strftime("%d.%m")
    return f"{dword} –≤ {dt.strftime('%H:%M')}"

def kb_variants(dts):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=human_label(dt), callback_data=f"time|{dt.isoformat()}")]
            for dt in soonest(dts)
        ]
    )

def plan(rem):
    scheduler.add_job(send_reminder, "date", run_date=rem["remind_dt"], args=[rem["user_id"], rem["text"]])

async def send_reminder(uid: int, text: str):
    try:
        await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("send_reminder error:", e)

def hour_is_unambiguous(h: int) -> bool:
    return h >= 13 or h == 0  # 13..23 –∏–ª–∏ 00

def text_looks_like_new_request(s: str) -> bool:
    s = norm(s).lower()
    if re.search(r"\b—á–µ—Ä–µ–∑\b", s): return True
    if re.search(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b", s): return True
    if re.search(r"\b\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?", s): return True
    if re.search(r"(?<![:\d])([01]?\d|2[0-3])([0-5]\d)(?!\d)", s): return True  # 1710
    if re.search(r"\b–≤\s*\d{1,2}(:\d{2})?\b", s): return True
    if re.search(r"\b–≤\s*\d{1,2}\s*—á–∞—Å", s): return True
    return False

# ========= LEXICON / REGEX =========
MONTHS = {
    "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
    "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12,
}
WEEKDAY_INDEX = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–≤—Ç–æ—Ä–Ω–∏–∫":1,"—Å—Ä–µ–¥–∞":2,"—Å—Ä–µ–¥—É":2,"—á–µ—Ç–≤–µ—Ä–≥":3,"–ø—è—Ç–Ω–∏—Ü–∞":4,"–ø—è—Ç–Ω–∏—Ü—É":4,"—Å—É–±–±–æ—Ç–∞":5,"—Å—É–±–±–æ—Ç—É":5,"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6
}

# –¥–ª—è ¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª ‚Üí 2:30
ORD_GEN_TO_PREV_HOUR = {
    "–ø–µ—Ä–≤–æ–≥–æ":12, "–≤—Ç–æ—Ä–æ–≥–æ":1, "—Ç—Ä–µ—Ç—å–µ–≥–æ":2, "—á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ":3, "—á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ":3, "–ø—è—Ç–æ–≥–æ":4, "—à–µ—Å—Ç–æ–≥–æ":5,
    "—Å–µ–¥—å–º–æ–≥–æ":6, "–≤–æ—Å—å–º–æ–≥–æ":7, "–¥–µ–≤—è—Ç–æ–≥–æ":8, "–¥–µ—Å—è—Ç–æ–≥–æ":9, "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ":10, "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ":11
}
# ¬´–±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —á–µ—Ç—ã—Ä–µ¬ª
HOUR_WORD_TO_NUM = {
    "—á–∞—Å":1,"–¥–≤–∞":2,"—Ç—Ä–∏":3,"—Ç—Ä—ë—Ö":3,"—Ç—Ä–µ—Ö":3,"—á–µ—Ç—ã—Ä–µ":4,"—á–µ—Ç—ã—Ä—ë—Ö":4,"—á–µ—Ç—ã—Ä–µ—Ö":4,
    "–ø—è—Ç—å":5,"—à–µ—Å—Ç—å":6,"—Å–µ–º—å":7,"–≤–æ—Å–µ–º—å":8,"–¥–µ–≤—è—Ç—å":9,"–¥–µ—Å—è—Ç—å":10,"–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å":11,"–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å":12,
    "–¥–≤—É—Ö":2,"–ø—è—Ç–∏":5,"—à–µ—Å—Ç–∏":6,"—Å–µ–º–∏":7,"–≤–æ—Å—å–º–∏":8,"–¥–µ–≤—è—Ç–∏":9,"–¥–µ—Å—è—Ç–∏":10,"–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∏":11,"–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∏":12
}
MIN_WORD_TO_NUM = {
    "–ø—è—Ç–∏":5,"–¥–µ—Å—è—Ç–∏":10,"–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏":15,"–¥–≤–∞–¥—Ü–∞—Ç–∏":20,"–¥–≤–∞–¥—Ü–∞—Ç–∏ –ø—è—Ç–∏":25,"–ø–æ–ª—É":30
}

RX_TODAY  = re.compile(r"\b—Å–µ–≥–æ–¥–Ω—è\b", re.I)
RX_TMR    = re.compile(r"\b–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_ATMR   = re.compile(r"\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_A3     = re.compile(r"\b–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_DAY_ONLY = re.compile(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b", re.I)

RX_ANY_MER = re.compile(r"\b(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b", re.I)

RX_DAY_WORD_TIME = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–≤\s*(\d{1,2})(?::(\d{2}))?"
    r"(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?\b",
    re.I | re.DOTALL
)
RX_DAY_WORD_ONLY = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b",
    re.I | re.DOTALL
)
RX_DAY_WORD_COMPACT = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–≤\s*([01]?\d|2[0-3])([0-5]\d)\b",
    re.I | re.DOTALL
)
RX_DAY_WORD_HALF = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–ø–æ–ª\s*([–ê-–Ø–∞-—è—ë]+|\d+)\b(?:\s*(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏))?",
    re.I | re.DOTALL
)
RX_DAY_WORD_BEZ = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–±–µ–∑\s+([–ê-–Ø–∞-—è—ë]+|\d+)\s+([–ê-–Ø–∞-—è—ë]+|\d+)\b(?:\s*(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏))?",
    re.I | re.DOTALL
)

RX_ONLY_TIME = re.compile(r"\b–≤\s*(\d{1,2})(?::(\d{2}))?\b", re.I)
RX_EXACT_HOUR = re.compile(r"\b–≤\s*(\d{1,2})\s*—á–∞—Å(–æ–≤|–∞)?\b", re.I)
RX_BARE_TIME_WITH_MER = re.compile(r"\b(\d{1,2})(?::(\d{2}))?\s*(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b", re.I)

RX_DOT_DATE = re.compile(
    r"\b(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{2,4}))?"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)
RX_MONTH_DATE = re.compile(
    r"\b(\d{1,2})\s+([–ê-–Ø–∞-—è—ë–Å]+)\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)
RX_DAY_OF_MONTH = re.compile(
    r"\b(\d{1,2})\s*—á–∏—Å–ª[–∞–æ]\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)

RX_HALF_HOUR = re.compile(r"\b—á–µ—Ä–µ–∑\s+–ø–æ–ª\s*—á–∞—Å–∞\b", re.I)
RX_REL = [
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫\.?)\b", re.I), "seconds"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω\.?)\b", re.I), "minutes"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å(?:–∞|–æ–≤)?|—á\.?)\b", re.I), "hours"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I), "days"),
]
RX_IN_WEEKS = re.compile(r"\b—á–µ—Ä–µ–∑\s*(\d+)?\s*–Ω–µ–¥–µ–ª[—é–∏]\b(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?)?", re.I)
RX_SAME_TIME = re.compile(r"\b–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è\b", re.I)
RX_IN_N_DAYS = re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I)

RX_COMPACT_HHMM = re.compile(r"(?<![:\d])([01]?\d|2[0-3])([0-5]\d)(?!\d)", re.I)
RX_HALF_OF_NEXT = re.compile(r"\b–ø–æ–ª\s*([–ê-–Ø–∞-—è—ë]+|\d+)\b", re.I)
RX_BEZ = re.compile(r"\b–±–µ–∑\s+([–ê-–Ø–∞-—è—ë]+|\d+)\s+([–ê-–Ø–∞-—è—ë]+|\d+)\b", re.I)

# –ë—É–¥–Ω–∏–µ
RX_WEEKDAY = re.compile(
    r"\b(–≤\s+)?(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥(?:–∞|—É)|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü(?:–∞|—É)|—Å—É–±–±–æ—Ç(?:–∞|—É)|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\b",
    re.I
)

# ========= PARSE CORE =========
def dayword_to_base(word: str, now: datetime) -> date:
    w = word.lower()
    if w == "—Å–µ–≥–æ–¥–Ω—è": return now.date()
    if w == "–∑–∞–≤—Ç—Ä–∞": return (now + timedelta(days=1)).date()
    if w == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return (now + timedelta(days=2)).date()
    if w == "–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return (now + timedelta(days=3)).date()
    return now.date()

def parse_day_only(text: str):
    """–¢–æ–ª—å–∫–æ ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/‚Ä¶¬ª –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è"""
    s = norm(text)
    if RX_DAY_WORD_TIME.search(s) or RX_DAY_WORD_ONLY.search(s) or RX_DAY_WORD_COMPACT.search(s):
        return None
    m = RX_DAY_ONLY.search(s)
    if not m: return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("need_time", base, rest)

def parse_dayword_part_only(text: str):
    """–¥–µ–Ω—å + —á–∞—Å—Ç—å —Å—É—Ç–æ–∫ (—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º/‚Ä¶) –±–µ–∑ —Ü–∏—Ñ—Ä ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è"""
    s = norm(text)
    m = RX_DAY_WORD_ONLY.search(s)
    if not m: return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    rest = RX_DAY_WORD_ONLY.sub("", s, count=1).strip(" ,.-")
    return ("need_time", base, rest)

def parse_dayword_time(text: str):
    """—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞‚Ä¶ –≤ HH[:MM] (+–º–µ—Ä–∏–¥–∏–∞–Ω)"""
    s = norm(text)
    m = RX_DAY_WORD_TIME.search(s)
    if not m: return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    h = int(m.group(2)); mm = int(m.group(3) or 0)
    mer = (m.group(4) or "").lower()

    if mer:
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = mk_dt(base, h % 24, mm)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    if hour_is_unambiguous(h):
        dt = mk_dt(base, h % 24, mm)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    v1 = mk_dt(base, h % 24, mm)
    v2 = mk_dt(base, (h + 12) % 24, mm)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def parse_dayword_compact(text: str):
    """—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –≤ 1540"""
    s = norm(text)
    m = RX_DAY_WORD_COMPACT.search(s)
    if not m: return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    h = int(m.group(2)); mm = int(m.group(3))
    dt = mk_dt(base, h % 24, mm)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("ok", dt, rest)

def _half_core(word: str) -> int | None:
    if word.isdigit():
        prev = max(0, int(word) - 1)
        return 12 if prev == 0 else prev
    return ORD_GEN_TO_PREV_HOUR.get(word)

def parse_dayword_half(text: str):
    """—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ ‚Ä¶ –ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ [—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º]"""
    s = norm(text)
    m = RX_DAY_WORD_HALF.search(s)
    if not m: return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    token = m.group(2).lower()
    base_hour = _half_core(token)
    if base_hour is None: return None
    mer = (m.group(3) or "").lower()

    if mer:
        h = base_hour
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = mk_dt(base, h % 24, 30)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    v1 = mk_dt(base, base_hour % 24, 30)
    v2 = mk_dt(base, (base_hour + 12) % 24, 30)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def word_or_digit_to_int(token: str) -> int | None:
    t = token.lower()
    if t.isdigit(): return int(t)
    if t in MIN_WORD_TO_NUM: return MIN_WORD_TO_NUM[t]
    if t in HOUR_WORD_TO_NUM: return HOUR_WORD_TO_NUM[t]
    return None

def parse_dayword_bez(text: str):
    """—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ ‚Ä¶ –±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å [—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º]"""
    s = norm(text)
    m = RX_DAY_WORD_BEZ.search(s)
    if not m: return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    mins = word_or_digit_to_int(m.group(2))
    hour = word_or_digit_to_int(m.group(3))
    if mins is None or hour is None: return None
    h = (hour - 1) % 12
    if h == 0: h = 12
    mm = 60 - mins
    mer = (m.group(4) or "").lower()

    if mer:
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = mk_dt(base, h % 24, mm)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    v1 = mk_dt(base, h % 24, mm)
    v2 = mk_dt(base, (h + 12) % 24, mm)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def parse_only_time(text: str):
    """–≤—Ä–µ–º—è –±–µ–∑ –¥–∞—Ç—ã"""
    s = norm(text)
    now = datetime.now(tz).replace(second=0, microsecond=0)

    mb = RX_BARE_TIME_WITH_MER.search(s)
    if mb:
        h = int(mb.group(1)); mm = int(mb.group(2) or 0); mer = mb.group(3).lower()
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = now.replace(hour=h % 24, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:mb.start()] + s[mb.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    m = RX_ONLY_TIME.search(s)
    if m:
        h = int(m.group(1)); mm = int(m.group(2) or 0)
        if hour_is_unambiguous(h):
            dt = now.replace(hour=h % 24, minute=mm)
            if dt <= now: dt += timedelta(days=1)
            rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return ("ok", dt, rest)
        v1 = now.replace(hour=h % 24, minute=mm)
        v2 = now.replace(hour=(h + 12) % 24, minute=mm)
        if v1 <= now: v1 += timedelta(days=1)
        if v2 <= now: v2 += timedelta(days=1)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("amb", rest, soonest([v1, v2]))

    mc = RX_COMPACT_HHMM.search(s)
    if mc:
        h = int(mc.group(1)); mm = int(mc.group(2))
        dt = now.replace(hour=h, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:mc.start()] + s[mc.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    return None

def parse_exact_hour(text: str):
    s = norm(text); m = RX_EXACT_HOUR.search(s)
    if not m: return None
    h = int(m.group(1))
    now = datetime.now(tz).replace(second=0, microsecond=0)
    dt = now.replace(hour=h % 24, minute=0)
    if dt <= now: dt += timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return dt, rest

def parse_relative(text: str):
    s = norm(text); now = datetime.now(tz).replace(second=0, microsecond=0)
    if RX_HALF_HOUR.search(s):
        dt = now + timedelta(minutes=30)
        return dt, RX_HALF_HOUR.sub("", s).strip(" ,.-")
    for rx, kind in RX_REL:
        m = rx.search(s)
        if m:
            n = int(m.group(1))
            if kind == "seconds": dt = now + timedelta(seconds=n)
            elif kind == "minutes": dt = now + timedelta(minutes=n)
            elif kind == "hours": dt = now + timedelta(hours=n)
            else: dt = now + timedelta(days=n)
            rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return dt, rest
    return None

def parse_in_weeks(text: str):
    s = norm(text)
    m = RX_IN_WEEKS.search(s)
    if not m: return None
    n = int(m.group(1) or 1)
    hh = m.group(2); mm = m.group(3)
    now = datetime.now(tz)
    base = (now + timedelta(days=7*n)).date()
    rest = RX_IN_WEEKS.sub("", s, count=1).strip(" ,.-")
    if hh:
        dt = mk_dt(base, int(hh), int(mm or 0))
        return ("ok", dt, rest)
    else:
        return ("need_time", base, rest)

# ======= TIME-ONLY PARSING FOR PENDING (base_date) =======
def parse_time_for_base(text: str, base_date: date):
    """–ü–æ–Ω–∏–º–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (—ç—Ç–∞–ø —É—Ç–æ—á–Ω–µ–Ω–∏—è)"""
    s = norm(text)

    # 1) —è–≤–Ω–æ–µ HH[:MM]
    m = RX_ONLY_TIME.search(s)
    if m:
        h = int(m.group(1)); mm = int(m.group(2) or 0)
        # –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —á–∞—Å—ã -> amb
        if hour_is_unambiguous(h):
            return ("ok", mk_dt(base_date, h % 24, mm), None)
        v1 = mk_dt(base_date, h % 24, mm)
        v2 = mk_dt(base_date, (h + 12) % 24, mm)
        return ("amb", None, soonest([v1, v2]))

    # 2) –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ HHMM
    mc = RX_COMPACT_HHMM.search(s)
    if mc:
        h = int(mc.group(1)); mm = int(mc.group(2))
        return ("ok", mk_dt(base_date, h % 24, mm), None)

    # 3) –ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ
    mh = RX_HALF_OF_NEXT.search(s)
    if mh:
        token = mh.group(1).lower()
        base_h = _half_core(token)
        if base_h is not None:
            mer = RX_ANY_MER.search(s)
            if mer:
                h = base_h
                word = mer.group(1).lower()
                if word.startswith("–¥–Ω") or word.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
                if word.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
                return ("ok", mk_dt(base_date, h % 24, 30), None)
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã 02:30 –∏ 14:30
            v1 = mk_dt(base_date, base_h % 24, 30)
            v2 = mk_dt(base_date, (base_h + 12) % 24, 30)
            return ("amb", None, soonest([v1, v2]))

    # 4) –±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å / –±–µ–∑ 15 —á–µ—Ç—ã—Ä–µ
    mb = RX_BEZ.search(s)
    if mb:
        mins = word_or_digit_to_int(mb.group(1))
        hour = word_or_digit_to_int(mb.group(2))
        if mins is not None and hour is not None:
            h = (hour - 1) % 12
            if h == 0: h = 12
            mm = 60 - mins
            mer = RX_ANY_MER.search(s)
            if mer:
                word = mer.group(1).lower()
                if word.startswith("–¥–Ω") or word.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
                if word.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
                return ("ok", mk_dt(base_date, h % 24, mm), None)
            v1 = mk_dt(base_date, h % 24, mm)
            v2 = mk_dt(base_date, (h + 12) % 24, mm)
            return ("amb", None, soonest([v1, v2]))

    return None

# ========= –ö–ê–õ–ï–ù–î–ê–†–ù–´–ï –î–ê–¢–´ (–±—ã–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ) =========
def _apply_meridian(h: int, mer: str | None) -> int:
    if not mer:
        return h
    m = mer.lower()
    if m.startswith("–¥–Ω") or m.startswith("–¥–Ω—è") or m.startswith("–≤–µ—á"):
        return h + 12 if h < 12 else h
    if m.startswith("–Ω–æ—á") or m.startswith("–Ω–æ—á–∏"):
        return 0 if h == 12 else h
    return h

def parse_dot_date(text: str):
    s = norm(text)
    m = RX_DOT_DATE.search(s)
    if not m: return None
    dd, mm, yyyy, hh, mi, mer = m.groups()
    dd = int(dd); mm = int(mm); yyyy = int(yyyy or datetime.now(tz).year)
    base = date(yyyy, mm, dd)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")

    if hh:
        h = int(hh); mi = int(mi or 0)
        if mer:
            h = _apply_meridian(h, mer)
            return ("ok", mk_dt(base, h % 24, mi), rest)
        if hour_is_unambiguous(h):
            return ("ok", mk_dt(base, h % 24, mi), rest)
        # –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ ‚Äî AM/PM
        v1 = mk_dt(base, h % 24, mi)
        v2 = mk_dt(base, (h + 12) % 24, mi)
        return ("amb", rest, soonest([v1, v2]))

    return ("need_time", base, rest)

def parse_month_date(text: str):
    s = norm(text)
    m = RX_MONTH_DATE.search(s)
    if not m: return None
    dd, mon_word, hh, mi, mer = m.groups()
    dd = int(dd); mon_word = mon_word.lower()
    if mon_word not in MONTHS: return None
    mm = MONTHS[mon_word]
    yyyy = datetime.now(tz).year
    base = date(yyyy, mm, dd)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")

    if hh:
        h = int(hh); mi = int(mi or 0)
        if mer:
            h = _apply_meridian(h, mer)
            return ("ok", mk_dt(base, h % 24, mi), rest)
        if hour_is_unambiguous(h):
            return ("ok", mk_dt(base, h % 24, mi), rest)
        v1 = mk_dt(base, h % 24, mi)
        v2 = mk_dt(base, (h + 12) % 24, mi)
        return ("amb", rest, soonest([v1, v2]))

    return ("need_time", base, rest)

def parse_day_of_month(text: str):
    s = norm(text)
    m = RX_DAY_OF_MONTH.search(s)
    if not m: return None
    dd, hh, mi, mer = m.groups()
    dd = int(dd)
    now = datetime.now(tz)
    base = date(now.year, now.month, dd)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")

    if hh:
        h = int(hh); mi = int(mi or 0)
        if mer:
            h = _apply_meridian(h, mer)
            return ("ok", mk_dt(base, h % 24, mi), rest)
        if hour_is_unambiguous(h):
            return ("ok", mk_dt(base, h % 24, mi), rest)
        v1 = mk_dt(base, h % 24, mi)
        v2 = mk_dt(base, (h + 12) % 24, mi)
        return ("amb", rest, soonest([v1, v2]))

    return ("need_time", base, rest)

# ========= –ë—É–¥–Ω–∏–µ (–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Ä¶) =========
def next_weekday(base_dt: datetime, weekday_idx: int) -> date:
    # 0=Mon ... 6=Sun ‚Äî —Å–ª–µ–¥—É—é—â–∞—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –Ω–µ–¥–µ–ª—è (–Ω–µ —Å–µ–≥–æ–¥–Ω—è)
    days_ahead = (weekday_idx - base_dt.weekday()) % 7
    days_ahead = days_ahead or 7
    return (base_dt + timedelta(days=days_ahead)).date()

def parse_weekday(text: str):
    s = norm(text)
    m = RX_WEEKDAY.search(s)
    if not m: return None
    wd_word = m.group(2).lower()
    wd_word = {"—Å—Ä–µ–¥—É":"—Å—Ä–µ–¥–∞","–ø—è—Ç–Ω–∏—Ü—É":"–ø—è—Ç–Ω–∏—Ü–∞"}.get(wd_word, wd_word)
    if wd_word not in WEEKDAY_INDEX: return None
    now = datetime.now(tz)
    base = next_weekday(now, WEEKDAY_INDEX[wd_word])

    # –ï—Å–ª–∏ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –≤—Ä–µ–º—è ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –µ–≥–æ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    parsed_time = parse_time_for_base(s, base)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")

    if parsed_time:
        tag = parsed_time[0]
        if tag == "ok":
            _, dt, _ = parsed_time
            return ("ok", dt, rest)
        else:
            _, _, variants = parsed_time
            return ("amb", rest, variants)

    # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ ¬´–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º)¬ª –∏–ª–∏ –≤–æ–æ–±—â–µ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å–ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è
    return ("need_time", base, rest)

# ========= COMMANDS =========
@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "–ü–æ–Ω–∏–º–∞—é: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 19¬ª, ¬´24.05 21:30¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 1540¬ª, ¬´—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 15¬ª, "
        "¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª, ¬´–±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —á–µ—Ç—ã—Ä–µ¬ª, ¬´–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º¬ª (–ø–æ–ø—Ä–æ—à—É –≤—Ä–µ–º—è).\n"
        "–ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/‚Ä¶¬ª ‚Äî —Å–ø—Ä–æ—à—É –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è.\n"
        "–ï—Å–ª–∏ —É–∫–∞–∑–∞–ª —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è —Ç–∏–ø–∞ ¬´–≤ 6¬ª ‚Äî —É—Ç–æ—á–Ω—é 06:00 –∏–ª–∏ 18:00.\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫, /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ."
    )

@router.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong ‚úÖ")

@router.message(Command("cancel"))
async def cmd_cancel(m: Message):
    uid = m.from_user.id
    if uid in PENDING:
        PENDING.pop(uid, None)
        await m.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    else:
        await m.reply("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

@router.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
        return
    items = sorted(items, key=lambda r: r["remind_dt"])
    lines = [f"‚Ä¢ {r['text']} ‚Äî {fmt_dt(r['remind_dt'])}" for r in items]
    await m.answer("\n".join(lines))

# ========= ROUTER =========
@router.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    text = norm(m.text)

    # ‚Äî —ç—Ç–∞–ø —É—Ç–æ—á–Ω–µ–Ω–∏—è ‚Äî
    if uid in PENDING:
        st = PENDING[uid]

        if text.lower() in ("–æ—Ç–º–µ–Ω–∞","/cancel","cancel"):
            PENDING.pop(uid, None)
            await m.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ.")
            return

        if st.get("variants"):
            if text_looks_like_new_request(text):
                PENDING.pop(uid, None)
            else:
                await m.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=kb_variants(st["variants"]))
                return

        elif st.get("base_date"):
            parsed = parse_time_for_base(text, st["base_date"])
            if parsed:
                tag = parsed[0]
                if tag == "ok":
                    _, dt, _ = parsed
                    desc = st.get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                    PENDING.pop(uid, None)
                    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
                    plan(REMINDERS[-1])
                    await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
                    return
                else:
                    _, _, variants = parsed
                    desc = st.get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                    PENDING[uid] = {"description": desc, "variants": variants}
                    await m.reply("–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ –≤—Ä–µ–º—è:", reply_markup=kb_variants(variants))
                    return

            await m.reply("–ù—É–∂–Ω–æ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: 19, 19:30, 1710, ¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª, ¬´–±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å¬ª.")
            return
        # –µ—Å–ª–∏ –±—ã–ª–æ variants ‚Äî –≤—ã—à–µ return; –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ

    # 1) —Ç–æ–ª—å–∫–æ ¬´—Å–µ–≥–æ–¥–Ω—è/‚Ä¶¬ª
    r = parse_day_only(text)
    if r:
        _, base, rest = r
        desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "base_date": base}
        await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10, 10:30, 1710)")
        return

    # 2) –¥–µ–Ω—å + —á–∞—Å—Ç—å —Å—É—Ç–æ–∫
    r = parse_dayword_part_only(text)
    if r:
        _, base, rest = r
        desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "base_date": base}
        await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19, 19:30)")
        return

    # 3) —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    r = parse_in_weeks(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, base, rest = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "base_date": base}
        await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ?"); return

    # 4) –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ ¬´—á–µ—Ä–µ–∑ ‚Ä¶¬ª
    r = parse_relative(text)
    if r:
        dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return

    # 5) ¬´–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ N –¥–Ω–µ–π¬ª
    if RX_SAME_TIME.search(text):
        now = datetime.now(tz).replace(second=0, microsecond=0)
        m_nd = RX_IN_N_DAYS.search(text)
        if m_nd:
            n = int(m_nd.group(1))
            dt = now + timedelta(days=n)
            desc = clean_desc(RX_IN_N_DAYS.sub("", RX_SAME_TIME.sub("", text)).strip(" ,.-"))
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return

    # 6) ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –≤ HH:MM¬ª
    r = parse_dayword_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    # 7) ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 1540¬ª
    r = parse_dayword_compact(text)
    if r:
        _, dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return

    # 8) ¬´—Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª
    r = parse_dayword_half(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    # 9) ¬´—Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å¬ª
    r = parse_dayword_bez(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    # 10) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞—Ç—ã
    for parser in (parse_dot_date, parse_month_date, parse_day_of_month):
        r = parser(text)
        if r:
            tag = r[0]
            if tag == "ok":
                _, dt, rest = r; desc = clean_desc(rest or text)
                REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
                await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
            if tag == "amb":
                _, rest, variants = r; desc = clean_desc(rest or text)
                PENDING[uid] = {"description": desc, "variants": variants}
                await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return
            if tag == "need_time":
                _, base, rest = r; desc = clean_desc(rest or text)
                PENDING[uid] = {"description": desc, "base_date": base}
                await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ?"); return

    # 10.5) –ë—É–¥–Ω–∏–π (–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/‚Ä¶)
    r = parse_weekday(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        if tag == "amb":
            _, rest, variants = r; desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "variants": variants}
            await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return
        if tag == "need_time":
            _, base, rest = r; desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "base_date": base}
            await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10, 10:30)"); return

    # 11) ¬´–≤ 17 —á–∞—Å–æ–≤¬ª
    r = parse_exact_hour(text)
    if r:
        dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return

    # 12) ¬´1710¬ª / ¬´–≤ 17:10¬ª / ¬´10 —É—Ç—Ä–∞¬ª
    r = parse_only_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    await m.reply(
        "–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 19¬ª, ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 1540¬ª, ¬´—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 15¬ª, "
        "¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª, ¬´–±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å¬ª, ¬´–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º¬ª (–ø–æ—Ç–æ–º –≤—Ä–µ–º—è)."
    )

# ========= CALLBACK =========
@router.callback_query(F.data.startswith("time|"))
async def cb_time(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("variants"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è"); return
    iso = cb.data.split("|", 1)[1]
    dt = datetime.fromisoformat(iso)
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ pytz
    dt = tz.localize(dt.replace(tzinfo=None)) if dt.tzinfo is None else dt.astimezone(tz)
    desc = PENDING[uid].get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
    plan(REMINDERS[-1])
    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ========= RUN =========
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
