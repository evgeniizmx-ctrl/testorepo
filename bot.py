import os
import io
import json
import re
import asyncio
from datetime import datetime, timedelta
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ChatAction

import httpx
from dateutil import parser as dateparser
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ===================== –û–ö–†–£–ñ–ï–ù–ò–ï =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OCR_SPACE_API_KEY = os.getenv("OCR_SPACE_API_KEY")

TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(TZ)

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=TZ)

PENDING = {}
REMINDERS = []

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
async def send_reminder(user_id: int, text: str):
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("Send reminder error:", e)

def schedule_one(reminder: dict):
    run_dt = reminder["remind_dt"]
    scheduler.add_job(send_reminder, "date", run_date=run_dt,
                      args=[reminder["user_id"], reminder["text"]])

def as_local_iso(dt_like: str | None) -> datetime | None:
    if not dt_like:
        return None
    try:
        dt = dateparser.parse(dt_like)
        if not dt:
            return None
        if dt.tzinfo is None:
            dt = tz.localize(dt)
        else:
            dt = dt.astimezone(tz)
        return dt.replace(second=0, microsecond=0)
    except Exception:
        return None

def normalize_spaces(s: str) -> str:
    return re.sub(r"\s+", " ", s, flags=re.UNICODE).strip()

def clean_description(desc: str) -> str:
    d = desc.strip()
    d = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", d, flags=re.IGNORECASE)
    d = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", d, flags=re.IGNORECASE)
    return d or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

# ===================== –ü–ê–†–°–ï–†–´ =====================
# --- "—á–µ—Ä–µ–∑ ..." ---
REL_NUM_PATTERNS = [
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫\.?)\b", "seconds"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω\.?)\b", "minutes"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(—á–∞—Å(?:–∞|–æ–≤)?|—á\.?)\b",     "hours"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b","days"),
]
REL_NUM_REGEXES = [re.compile(p, re.IGNORECASE | re.UNICODE | re.DOTALL) for p, _ in REL_NUM_PATTERNS]

def parse_relative_phrase(raw_text: str):
    s = normalize_spaces(raw_text)
    now = datetime.now(tz).replace(second=0, microsecond=0)
    for rx, (_, kind) in zip(REL_NUM_REGEXES, REL_NUM_PATTERNS):
        m = rx.search(s)
        if not m: continue
        amount = int(m.group(2))
        if kind == "seconds": dt = now + timedelta(seconds=amount)
        elif kind == "minutes": dt = now + timedelta(minutes=amount)
        elif kind == "hours":   dt = now + timedelta(hours=amount)
        elif kind == "days":    dt = now + timedelta(days=amount)
        remainder = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return dt, remainder
    return None

# --- "—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ ..." ---
DAYTIME_RX = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏))?\b",
    re.IGNORECASE | re.UNICODE | re.DOTALL
)

# --- "–ø—Ä–æ—Å—Ç–æ –≤ HH[:MM]" (–±–µ–∑ –¥–Ω—è) ---
ONLYTIME_RX = re.compile(
    r"\b–≤\s*(\d{1,2})(?::(\d{2}))?\s*(—á–∞—Å(?:–æ–≤|–∞)?|—á\.)?\b",
    re.IGNORECASE | re.UNICODE
)

def parse_daytime_or_onlytime(raw_text: str):
    s = normalize_spaces(raw_text)
    now = datetime.now(tz).replace(second=0, microsecond=0)

    # —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º "—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    m = DAYTIME_RX.search(s)
    if m:
        day_word = m.group(1).lower()
        hour_raw = int(m.group(2))
        minute = int(m.group(3) or 0)
        mer = (m.group(4) or "").lower()
        if day_word == "—Å–µ–≥–æ–¥–Ω—è": base = now
        elif day_word == "–∑–∞–≤—Ç—Ä–∞": base = now + timedelta(days=1)
        else: base = now + timedelta(days=2)
        # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω "—É—Ç—Ä–∞/–≤–µ—á–µ—Ä–∞" ‚Üí –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        if mer in ("—É—Ç—Ä–∞","–¥–Ω—è","–≤–µ—á–µ—Ä–∞","–Ω–æ—á–∏"):
            h = hour_raw
            if mer in ("–¥–Ω—è","–≤–µ—á–µ—Ä–∞") and h < 12: h += 12
            if mer == "–Ω–æ—á–∏" and h == 12: h = 0
            return ("ok", base.replace(hour=h, minute=minute), "")
        # –∏–Ω–∞—á–µ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ ‚Üí –≤–µ—Ä–Ω—ë–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä)
        dt1 = base.replace(hour=hour_raw, minute=minute)
        dt2 = base.replace(hour=(hour_raw+12)%24, minute=minute)
        return ("amb", None, [dt1, dt2])

    # –∏—â–µ–º "–≤ 17 —á–∞—Å–æ–≤" –±–µ–∑ –¥–Ω—è
    m2 = ONLYTIME_RX.search(s)
    if m2:
        hour_raw = int(m2.group(1))
        minute = int(m2.group(2) or 0)
        target = now.replace(hour=hour_raw, minute=minute, second=0, microsecond=0)
        if target <= now:  # –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Üí –∑–∞–≤—Ç—Ä–∞
            target = target + timedelta(days=1)
        return ("ok", target, "")

    return None

# ===================== GPT =====================
OPENAI_BASE = "https://api.openai.com/v1"
async def gpt_parse(text: str) -> dict:
    return {"description": text, "event_time":"", "remind_time":"", "repeat":"none", "needs_clarification":True,
            "clarification_question":"–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08 14:25)."}

# ===================== –•–ï–ù–î–õ–ï–†–´ =====================
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ ¬´–Ω–∞–ø–æ–º–Ω–∏ –≤ 17 —á–∞—Å–æ–≤¬ª ‚Äî —è –ø–æ—Å—Ç–∞–≤–ª—é –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 17:00."
    )

@dp.message(F.text)
async def on_text(message: Message):
    uid = message.from_user.id
    text = normalize_spaces(message.text or "")

    # 1) "–≤ HH"
    pack = parse_daytime_or_onlytime(text)
    if pack:
        tag = pack[0]
        if tag=="ok":
            _, dt, _ = pack
            desc = clean_description(text)
            r = {"user_id":uid,"text":desc,"remind_dt":dt,"repeat":"none"}
            REMINDERS.append(r); schedule_one(r)
            await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
            return
        elif tag=="amb":
            _,_,variants = pack
            desc = clean_description(text)
            PENDING[uid]={"description":desc,"variants":variants,"repeat":"none"}
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=dt.strftime('%d.%m %H:%M'),callback_data=f"time|{dt.isoformat()}")]
                for dt in variants])
            await message.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb)
            return

    # 2) "—á–µ—Ä–µ–∑ ..."
    rel = parse_relative_phrase(text)
    if rel:
        dt, remainder = rel
        desc = clean_description(remainder or text)
        r={"user_id":uid,"text":desc,"remind_dt":dt,"repeat":"none"}
        REMINDERS.append(r); schedule_one(r)
        await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
        return

    await message.reply("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: ¬´–≤ 17 —á–∞—Å–æ–≤¬ª –∏–ª–∏ ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 9¬ª.")

@dp.callback_query(F.data.startswith("time|"))
async def on_choice(cb: CallbackQuery):
    iso = cb.data.split("|",1)[1]
    dt=datetime.fromisoformat(iso).astimezone(tz)
    desc=PENDING[cb.from_user.id]["description"]
    r={"user_id":cb.from_user.id,"text":desc,"remind_dt":dt,"repeat":"none"}
    REMINDERS.append(r); schedule_one(r)
    await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
    PENDING.pop(cb.from_user.id,None)
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ===================== –ó–ê–ü–£–°–ö =====================
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())
