import os
import re
import asyncio
import json
from datetime import datetime, timedelta
import pytz

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ====== LLM client (OpenAI-style) ======
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# ========= ENV / BASE TZ (fallback) =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
BASE_TZ_NAME = os.getenv("APP_TZ", "Europe/Moscow")  # –¥–µ—Ñ–æ–ª—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º—ã–π —Å—Ç–∞—Ä—Ç
BASE_TZ = pytz.timezone(BASE_TZ_NAME)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –≥–ª–æ–±–∞–ª—å–Ω—ã–π TZ —Ä–æ–ª–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç, –º—ã –ø–µ—Ä–µ–¥–∞—ë–º aware run_date –≤ TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
scheduler = AsyncIOScheduler(timezone=BASE_TZ)

# ====== In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (MVP) ======
REMINDERS: list[dict] = []  # {"user_id", "text", "remind_dt", "repeat"}
PENDING: dict[int, dict] = {}  # —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {"description", "candidates":[iso,...]}
USER_TZS: dict[int, str] = {}  # user_id -> "Europe/Moscow" | "UTC+180" (FixedOffset)

# ========= TZ helpers =========
IANA_SUGGESTIONS = [
    "Europe/Moscow", "Europe/Kyiv", "Asia/Almaty", "Asia/Dubai", "Europe/Berlin"
]

def tz_kb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=name, callback_data=f"settz|{name}")] for name in IANA_SUGGESTIONS]
    rows.append([InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å–º–µ—â–µ–Ω–∏–µ (+03:00)", callback_data="settz|ASK_OFFSET")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

OFFSET_RX = re.compile(r"^[+-](?:0?\d|1\d|2[0-3]):[0-5]\d$")  # +03:00, -05:30

def parse_user_tz_string(s: str) -> pytz.tzinfo.BaseTzInfo | None:
    s = (s or "").strip()
    # IANA?
    try:
        return pytz.timezone(s)
    except Exception:
        pass
    # +HH:MM ?
    if OFFSET_RX.match(s):
        sign = 1 if s[0] == "+" else -1
        hh, mm = map(int, s[1:].split(":"))
        minutes = sign * (hh * 60 + mm)
        return pytz.FixedOffset(minutes)
    return None

def get_user_tz(uid: int) -> pytz.tzinfo.BaseTzInfo:
    name = USER_TZS.get(uid)
    if not name:
        return BASE_TZ
    # FixedOffset —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ 'UTC+180' (–º–∏–Ω—É—Ç—ã) –∏–ª–∏ IANA –∏–º—è
    if name.startswith("UTC+") or name.startswith("UTC-"):
        minutes = int(name[3:])
        return pytz.FixedOffset(minutes)
    return pytz.timezone(name)

def store_user_tz(uid: int, tzobj: pytz.tzinfo.BaseTzInfo):
    # –µ—Å–ª–∏ FixedOffset ‚Äî —Ö—Ä–∞–Ω–∏–º –º–∏–Ω—É—Ç—ã; –µ—Å–ª–∏ IANA ‚Äî –∏–º—è
    if isinstance(tzobj, pytz.tzinfo.StaticTzInfo) and getattr(tzobj, "_minutes", None) is not None:
        USER_TZS[uid] = f"UTC+{tzobj._minutes}"  # –Ω–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å _minutes; fallback —á–µ—Ä–µ–∑ utcoffset
    else:
        # –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å offset —É FixedOffset
        ofs = tzobj.utcoffset(datetime.utcnow()).total_seconds() // 60
        if isinstance(tzobj, pytz.tzinfo.DstTzInfo) or isinstance(tzobj, pytz.tzinfo.BaseTzInfo) and hasattr(tzobj, "zone"):
            USER_TZS[uid] = getattr(tzobj, "zone", BASE_TZ_NAME)
        else:
            USER_TZS[uid] = f"UTC+{int(ofs)}"

# ========= Common helpers =========
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

def fmt_dt_local(dt: datetime) -> str:
    return f"{dt.strftime('%d.%m')} –≤ {dt.strftime('%H:%M')}"  # –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

def as_local_for(uid: int, dt_iso: str) -> datetime:
    user_tz = get_user_tz(uid)
    # –¥–æ–ø—É—Å–∫–∞–µ–º ISO —Å 'Z' –∏–ª–∏ —Å –æ—Ñ—Ñ—Å–µ—Ç–æ–º
    dt = datetime.fromisoformat(dt_iso.replace("Z", "+00:00"))
    if dt.tzinfo is None:
        dt = user_tz.localize(dt)
    else:
        dt = dt.astimezone(user_tz)
    return dt

def kb_variants_for(uid: int, dt_isos: list[str]) -> InlineKeyboardMarkup:
    dts = sorted(as_local_for(uid, x) for x in dt_isos)
    def human_label(dt: datetime) -> str:
        now = datetime.now(get_user_tz(uid))
        if dt.date() == now.date():
            d = "–°–µ–≥–æ–¥–Ω—è"
        elif dt.date() == (now + timedelta(days=1)).date():
            d = "–ó–∞–≤—Ç—Ä–∞"
        else:
            d = dt.strftime("%d.%m")
        return f"{d} –≤ {dt.strftime('%H:%M')}"
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=human_label(dt), callback_data=f"time|{dt.isoformat()}")] for dt in dts]
    )

def plan(rem):
    # run_date ‚Äî aware –≤ TZ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    scheduler.add_job(send_reminder, "date", run_date=rem["remind_dt"], args=[rem["user_id"], rem["text"]])

async def send_reminder(uid: int, text: str):
    try:
        await bot.send_message(uid, f"üîîüîî {text}")  # —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞ –∏ —Ç–µ–∫—Å—Ç
    except Exception as e:
        print("send_reminder error:", e)

# ========= LLM PARSER =========
SYSTEM_PROMPT = """–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–í–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ JSON:
{
  "ok": true|false,
  "description": "—Å—Ç—Ä–æ–∫–∞",
  "datetimes": ["ISO8601", ...],   // –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ user_tz
  "need_clarification": true|false,
  "clarify_type": "time|date|both|none",
  "reason": "—Å—Ç—Ä–æ–∫–∞"
}
–ü—Ä–∞–≤–∏–ª–∞: –ø–æ–Ω–∏–º–∞–µ—à—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—ã; –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —á–∞—Å—ã -> –¥–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (06:00 –∏ 18:00).
–ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ –≤—Ä–µ–º—è. –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è ‚Äî —Å—Ç–∞–≤—å –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ.
–û–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∏ –æ—Ç –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤.
"""

def build_user_prompt(text: str, user_tz_name: str) -> str:
    now = datetime.now(getattr(pytz, 'timezone')(user_tz_name) if "/" in user_tz_name else BASE_TZ).strftime("%Y-%m-%d %H:%M:%S")
    return json.dumps({
        "user_text": text,
        "now_local": now,
        "user_tz": user_tz_name,
        "locale": "ru-RU"
    }, ensure_ascii=False)

async def ai_parse(uid: int, text: str) -> dict:
    """LLM ‚Üí JSON. –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏."""
    user_tz_name = USER_TZS.get(uid, BASE_TZ_NAME)
    if not (OpenAI and OPENAI_API_KEY):
        return {"ok": False, "description": clean_desc(text), "datetimes": [], "need_clarification": True, "clarify_type": "time", "reason": "LLM disabled"}
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        rsp = await asyncio.to_thread(
            client.chat.completions.create,
            model=OPENAI_MODEL,
            temperature=0.2,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": build_user_prompt(text, user_tz_name)}
            ],
            response_format={"type": "json_object"},
        )
        data = json.loads(rsp.choices[0].message.content)
        data.setdefault("ok", False)
        data.setdefault("description", clean_desc(text))
        data.setdefault("datetimes", [])
        data.setdefault("need_clarification", not data.get("ok"))
        data.setdefault("clarify_type", "time" if not data.get("ok") else "none")
        return data
    except Exception as e:
        print("ai_parse error:", e)
        return {"ok": False, "description": clean_desc(text), "datetimes": [], "need_clarification": True, "clarify_type": "time", "reason": "LLM error"}

# ========= Onboarding TZ =========
def need_tz(uid: int) -> bool:
    return uid not in USER_TZS

async def ask_tz(m: Message):
    await m.answer(
        "–ü—Ä–µ–∂–¥–µ —á–µ–º —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —É–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
        "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow) –ª–∏–±–æ —Å–º–µ—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ +03:00.",
        reply_markup=tz_kb()
    )

# ========= COMMANDS =========
@router.message(Command("start"))
async def cmd_start(m: Message):
    if need_tz(m.from_user.id):
        await ask_tz(m)
    else:
        await m.answer(
            "–ì–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å. –ü–∏—à–∏: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ –ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ –ø–∞–¥–µ–ª¬ª, ¬´—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —á–∞–π¬ª, ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 1710 –æ—Ç—á—ë—Ç¬ª.\n"
            "/tz ‚Äî —Å–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, /list ‚Äî —Å–ø–∏—Å–æ–∫, /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ."
        )

@router.message(Command("tz"))
async def cmd_tz(m: Message):
    await m.answer(
        "–í—ã–±–µ—Ä–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –≤–≤–µ–¥–∏ IANA (Europe/Paris) –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ (+03:00).",
        reply_markup=tz_kb()
    )

@router.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
        return
    items = sorted(items, key=lambda r: r["remind_dt"])
    lines = [f"‚Ä¢ {r['text']} ‚Äî {fmt_dt_local(r['remind_dt'])}" for r in items]
    await m.answer("\n".join(lines))

@router.message(Command("cancel"))
async def cmd_cancel(m: Message):
    uid = m.from_user.id
    if uid in PENDING:
        PENDING.pop(uid, None)
        await m.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    else:
        await m.reply("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

# ========= MAIN HANDLER =========
@router.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    text = norm(m.text)

    # –ï—Å–ª–∏ TZ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—è—Ç—å –∫–∞–∫ –≤–≤–æ–¥ TZ
    if need_tz(uid):
        tz_obj = parse_user_tz_string(text)
        if tz_obj:
            store_user_tz(uid, tz_obj)
            await m.reply("–ü—Ä–∏–Ω—è–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –¢–µ–ø–µ—Ä—å –ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 19 –æ—Ç—á—ë—Ç¬ª.")
            return
        await ask_tz(m)
        return

    # –≠—Ç–∞–ø —É—Ç–æ—á–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –∂–¥–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏)
    if uid in PENDING:
        st = PENDING[uid]
        enriched = f"{text}. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {st.get('description','')}"
        data = await ai_parse(uid, enriched)
        desc = st.get("description") or data.get("description") or clean_desc(text)

        if data.get("ok") and data.get("datetimes"):
            dt = as_local_for(uid, data["datetimes"][0])
            PENDING.pop(uid, None)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt_local(dt)}")
            return

        cands = data.get("datetimes", []) or st.get("candidates", [])
        if len(cands) >= 2:
            PENDING[uid] = {"description": desc, "candidates": cands}
            await m.reply("–£—Ç–æ—á–Ω–∏ –≤—Ä–µ–º—è:", reply_markup=kb_variants_for(uid, cands))
            return

        await m.reply("–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: 10, 10:30, 1710.")
        return

    # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –≤ LLM
    data = await ai_parse(uid, text)
    desc = clean_desc(data.get("description") or text)

    if data.get("ok") and data.get("datetimes"):
        dt = as_local_for(uid, data["datetimes"][0])
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
        plan(REMINDERS[-1])
        await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt_local(dt)}")
        return

    cands = data.get("datetimes", [])
    if len(cands) >= 2:
        PENDING[uid] = {"description": desc, "candidates": cands}
        await m.reply(f"–£—Ç–æ—á–Ω–∏ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants_for(uid, cands))
        return

    if data.get("need_clarification", True):
        PENDING[uid] = {"description": desc}
        ct = data.get("clarify_type", "time")
        if ct == "time":
            await m.reply(f"–û–∫–µ–π, ¬´{desc}¬ª. –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10, 10:30, 1710)")
        elif ct == "date":
            await m.reply(f"–û–∫–µ–π, ¬´{desc}¬ª. –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å?")
        else:
            await m.reply(f"–û–∫–µ–π, ¬´{desc}¬ª. –£—Ç–æ—á–Ω–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
        return

    await m.reply("–ù–µ –ø–æ–Ω—è–ª. –°–∫–∞–∂–∏, –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 19 –æ—Ç—á—ë—Ç¬ª).")

# ========= CALLBACKS =========
@router.callback_query(F.data.startswith("settz|"))
async def cb_settz(cb: CallbackQuery):
    uid = cb.from_user.id
    _, payload = cb.data.split("|", 1)
    if payload == "ASK_OFFSET":
        await cb.message.answer("–í–≤–µ–¥–∏ —Å–º–µ—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +03:00 –∏–ª–∏ —É–∫–∞–∂–∏ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow).")
        await cb.answer()
        return
    tz_obj = parse_user_tz_string(payload)
    if tz_obj is None:
        await cb.answer("–ù–µ –ø–æ–Ω—è–ª —Ç–∞–π–º–∑–æ–Ω—É", show_alert=True)
        return
    store_user_tz(uid, tz_obj)
    try:
        await cb.message.edit_text("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚úçÔ∏è")
    except Exception:
        await cb.message.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚úçÔ∏è")
    await cb.answer("OK")

@router.callback_query(F.data.startswith("time|"))
async def cb_time(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("candidates"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è"); return
    iso = cb.data.split("|", 1)[1]
    dt = as_local_for(uid, iso)
    desc = PENDING[uid].get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
    plan(REMINDERS[-1])
    try:
        await cb.message.edit_text(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt_local(dt)}")
    except Exception:
        await cb.message.answer(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt_local(dt)}")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ========= RUN =========
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
