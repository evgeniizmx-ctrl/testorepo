import os
import io
import re
import json
import yaml
import logging
import secrets
from typing import List, Optional
from datetime import datetime, timedelta, timezone

from pydantic import BaseModel, Field, ValidationError
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import UpdateType
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from openai import OpenAI

# =====================
# Config & Logging
# =====================
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

def _extract_token(raw: str | None) -> str:
    if not raw:
        return ""
    raw = raw.strip().replace("\u200b", "").replace("\u200c", "").replace("\uFEFF", "")
    raw = raw.strip(" '\"")
    m = re.search(r"[0-9]+:[A-Za-z0-9_-]{30,}", raw)
    return m.group(0) if m else raw

RAW_TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RAW_BOT_TOKEN = os.getenv("BOT_TOKEN")

TOKEN = _extract_token(RAW_TELEGRAM_TOKEN) or _extract_token(RAW_BOT_TOKEN)
OPENAI_API_KEY = (os.getenv("OPENAI_API_KEY") or "").strip()
PROMPTS_PATH = os.getenv("PROMPTS_PATH", "prompts.yaml")
MODEL = os.getenv("LLM_MODEL", "gpt-4o-mini")
TRANSCRIBE_MODEL = os.getenv("ASR_MODEL", "whisper-1")
DEFAULT_TZ = os.getenv("DEFAULT_TZ", "+03:00")

def _valid_token(t: str) -> bool:
    return bool(re.fullmatch(r"[0-9]+:[A-Za-z0-9_-]{30,}", t))

logging.info("Env debug: TELEGRAM_TOKEN=%r BOT_TOKEN=%r | picked=%r",
             RAW_TELEGRAM_TOKEN, RAW_BOT_TOKEN, TOKEN)

if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN / BOT_TOKEN not set (empty)")
if not _valid_token(TOKEN):
    raise RuntimeError(f"TELEGRAM_TOKEN invalid format ‚Üí {TOKEN!r} (must be 123456789:AAAA...)")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set")

client = OpenAI(api_key=OPENAI_API_KEY)

# =====================
# Time helpers
# =====================
def tz_from_offset(off: str) -> timezone:
    # allow "+3" / "+03:00" / "-4:30"
    off = off.strip()
    if re.fullmatch(r"[+-]\d{1,2}$", off):
        sign = off[0]
        hh = int(off[1:])
        off = f"{sign}{hh:02d}:00"
    m = re.fullmatch(r"([+-])(\d{2}):?(\d{2})?", off)
    if not m:
        return timezone.utc
    sign, hh, mm = m.group(1), m.group(2), m.group(3) or "00"
    delta = timedelta(hours=int(hh), minutes=int(mm))
    if sign == "-":
        delta = -delta
    return timezone(delta)

def now_iso_for_tz(tz_str: str) -> str:
    tz = tz_from_offset(tz_str)
    return datetime.now(tz).replace(microsecond=0).isoformat()

def fmt_dt(iso: str) -> str:
    try:
        dt = datetime.fromisoformat(iso)
        return dt.strftime("%d.%m –≤ %H:%M")
    except Exception:
        return iso

def bump_to_future(iso_when: str) -> str:
    """–ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –ø–æ–¥–Ω—è—Ç—å –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ (+2—Å)."""
    try:
        when = datetime.fromisoformat(iso_when)
        now = datetime.now(when.tzinfo)
        if when <= now:
            when = now + timedelta(seconds=2)
        return when.replace(microsecond=0).isoformat()
    except Exception:
        return iso_when

# =====================
# Reminder fire + snooze/done keyboard
# =====================
def fire_kb(reminder_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å 10 –º–∏–Ω", callback_data=f"snz|10m|{reminder_id}"),
            InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å 1 —á–∞—Å", callback_data=f"snz|1h|{reminder_id}")
        ],
        [InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done|{reminder_id}")]
    ])

async def schedule_reminder(context: ContextTypes.DEFAULT_TYPE, chat_id: int, title: str, iso_when: str):
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ JobQueue."""
    try:
        when = datetime.fromisoformat(iso_when)
        now = datetime.now(when.tzinfo)
        if when <= now:
            when = now + timedelta(seconds=2)

        async def _fire(ctx: ContextTypes.DEFAULT_TYPE):
            # —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π id –∏ –∑–∞–ø–æ–º–Ω–∏–º –≤ bot_data (in-memory)
            rid = secrets.token_urlsafe(6)
            ctx.application.bot_data.setdefault("reminder_map", {})[rid] = {
                "chat_id": chat_id,
                "title": title
            }
            await ctx.bot.send_message(
                chat_id=chat_id,
                text=f"üîî ¬´{title or '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'}¬ª",
                reply_markup=fire_kb(rid)
            )

        context.job_queue.run_once(_fire, when=when)
        logging.info("Scheduled reminder at %s for chat %s", when.isoformat(), chat_id)
    except Exception as e:
        logging.exception("schedule_reminder failed: %s", e)

def extract_title_from_message(text: str | None) -> str:
    t = (text or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ").replace("üîî", "").replace("‚úÖ", "").replace("‚è∏", "").strip()
    t = t.strip("¬´¬ª\"' ").strip()
    return t or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

# =====================
# Local relative-time parser ("—á–µ—Ä–µ–∑ ...")
# =====================
REL_MIN    = re.compile(r"—á–µ—Ä–µ–∑\s+(?:–º–∏–Ω—É—Ç—É|1\s*–º–∏–Ω(?:—É—Ç)?)(?:\b|$)", re.I)
REL_NSEC   = re.compile(r"—á–µ—Ä–µ–∑\s+(\d+)\s*—Å–µ–∫(?:—É–Ω–¥|—É–Ω–¥—ã|—É–Ω|)?(?:\b|$)", re.I)
REL_NMIN   = re.compile(r"—á–µ—Ä–µ–∑\s+(\d+)\s*–º–∏–Ω(?:—É—Ç|—ã)?(?:\b|$)", re.I)
REL_HALF   = re.compile(r"—á–µ—Ä–µ–∑\s+–ø–æ–ª—á–∞—Å–∞(?:\b|$)", re.I)
REL_NH     = re.compile(r"—á–µ—Ä–µ–∑\s+(\d+)\s*—á–∞—Å(?:–∞|–æ–≤)?(?:\b|$)", re.I)
REL_ND     = re.compile(r"—á–µ—Ä–µ–∑\s+(\d+)\s*–¥(–µ–Ω—å|–Ω—è|–Ω–µ–π)?(?:\b|$)", re.I)
REL_WEEK   = re.compile(r"—á–µ—Ä–µ–∑\s+–Ω–µ–¥–µ–ª(?:—é|—é)(?:\b|$)", re.I)

def _clean_title(text: str) -> str:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —á–∏—Å—Ç–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
    - —É–±–∏—Ä–∞–µ–º '–Ω–∞–ø–æ–º–Ω–∏', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞'
    - –≤—ã—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ '—á–µ—Ä–µ–∑ ...'
    –û—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø—Ä–æ').
    """
    t = text.strip()
    t = re.sub(r"\b(–Ω–∞–ø–æ–º–Ω–∏(—Ç—å)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b", "", t, flags=re.I)
    for rx in (REL_MIN, REL_NSEC, REL_NMIN, REL_HALF, REL_NH, REL_ND, REL_WEEK):
        t = rx.sub("", t)
    t = re.sub(r"\s{2,}", " ", t).strip(",. :")
    return t or text or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

def try_parse_relative_local(text: str, user_tz: str) -> Optional[str]:
    """–í–µ—Ä–Ω—ë—Ç ISO-—Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ ¬´—á–µ—Ä–µ–∑ ‚Ä¶¬ª, –∏–Ω–∞—á–µ None."""
    tz = tz_from_offset(user_tz)
    now = datetime.now(tz).replace(microsecond=0)
    if REL_MIN.search(text):
        return (now + timedelta(minutes=1)).isoformat()
    m = REL_NSEC.search(text)
    if m:
        return (now + timedelta(seconds=int(m.group(1)))).isoformat()
    m = REL_NMIN.search(text)
    if m:
        return (now + timedelta(minutes=int(m.group(1)))).isoformat()
    if REL_HALF.search(text):
        return (now + timedelta(minutes=30)).isoformat()
    m = REL_NH.search(text)
    if m:
        return (now + timedelta(hours=int(m.group(1)))).isoformat()
    m = REL_ND.search(text)
    if m:
        return (now + timedelta(days=int(m.group(1)))).isoformat()
    if REL_WEEK.search(text):
        return (now + timedelta(days=7)).isoformat()
    return None

# =====================
# Prompt store
# =====================
class PromptPack(BaseModel):
    system: str
    fewshot: List[dict] = []

def load_prompts() -> PromptPack:
    with open(PROMPTS_PATH, "r", encoding="utf-8") as f:
        raw = yaml.safe_load(f)
    if "system" in raw:
        return PromptPack(system=raw["system"], fewshot=raw.get("fewshot", []))
    if "parse" in raw and isinstance(raw["parse"], dict):
        sys_txt = raw["parse"].get("system") or raw["parse"].get("instruction")
        shots = raw["parse"].get("fewshot") or raw.get("examples") or []
        if sys_txt:
            return PromptPack(system=sys_txt, fewshot=shots)
    raise ValueError("prompts.yaml –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏ 'system' –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) 'fewshot'.")

try:
    PROMPTS = load_prompts()
    logging.info("Prompts loaded: system=%s... | fewshot=%d",
                 (PROMPTS.system or "")[:40].replace("\n", " "),
                 len(PROMPTS.fewshot))
except Exception as e:
    logging.exception("Failed to load prompts.yaml: %s", e)
    class _PP(BaseModel):
        system: str
        fewshot: list = []
    PROMPTS = _PP(system="Fallback system prompt", fewshot=[])

# =====================
# Output schema from LLM
# =====================
class ReminderOption(BaseModel):
    iso_datetime: str
    label: str

class LLMResult(BaseModel):
    intent: str = Field(description="'create_reminder' | 'ask_clarification' | 'chat'")
    text_original: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    timezone: Optional[str] = None
    fixed_datetime: Optional[str] = None
    need_confirmation: bool = False
    options: List[ReminderOption] = []

# =====================
# OpenAI calls
# =====================
async def transcribe_voice(file_bytes: bytes, filename: str = "audio.ogg") -> str:
    f = io.BytesIO(file_bytes)
    f.name = filename if filename.endswith(".ogg") else (filename + ".ogg")
    resp = client.audio.transcriptions.create(
        model=TRANSCRIBE_MODEL,
        file=f,
        response_format="text"
    )
    return resp

async def call_llm(text: str, user_tz: str) -> LLMResult:
    now = now_iso_for_tz(user_tz)
    messages = [
        {"role": "system", "content": f"NOW_ISO={now}  TZ_DEFAULT={user_tz}"},
        {"role": "system", "content": PROMPTS.system},
        *PROMPTS.fewshot,
        {"role": "user", "content": text}
    ]
    resp = client.chat.completions.create(
        model=MODEL,
        messages=messages,
        temperature=0.2,
        response_format={"type": "json_object"}
    )
    raw = resp.choices[0].message.content
    try:
        data = json.loads(raw)
        return LLMResult(**data)
    except (json.JSONDecodeError, ValidationError) as e:
        logging.exception("LLM JSON parse failed: %s\nRaw: %s", e, raw)
        return LLMResult(intent="ask_clarification", need_confirmation=True, options=[])

def build_time_keyboard(options: List[ReminderOption]) -> InlineKeyboardMarkup:
    buttons = [InlineKeyboardButton(opt.label, callback_data=f"pick|{opt.iso_datetime}") for opt in options]
    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(rows)

# =====================
# Timezone selection UI
# =====================
TZ_OPTIONS = [
    ("–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (+2)", "+02:00"),
    ("–ú–æ—Å–∫–≤–∞ (+3)", "+03:00"),
    ("–°–∞–º–∞—Ä–∞ (+4)", "+04:00"),
    ("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (+5)", "+05:00"),
    ("–û–º—Å–∫ (+6)", "+06:00"),
    ("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (+7)", "+07:00"),
    ("–ò—Ä–∫—É—Ç—Å–∫ (+8)", "+08:00"),
    ("–Ø–∫—É—Ç—Å–∫ (+9)", "+09:00"),
    ("–•–∞–±–∞—Ä–æ–≤—Å–∫ (+10)", "+10:00"),
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[InlineKeyboardButton(label, callback_data=f"tz|{offset}")]
               for label, offset in TZ_OPTIONS]
    buttons.append([InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data="tz|other")])
    kb = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
        "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î—Ä—É–≥–æ–π¬ª, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é.\n\n"
        "–ü—Ä–∏–º–µ—Ä: +11 –∏–ª–∏ -4:30",
        reply_markup=kb
    )

async def handle_tz_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if data == "tz|other":
        context.user_data["tz_waiting"] = True
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç UTC –≤ —Ü–∏—Ñ—Ä–∞—Ö.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: +3, +03:00 –∏–ª–∏ -4:30"
        )
        return
    _, offset = data.split("|", 1)
    context.user_data["tz"] = offset
    await query.edit_message_text(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: UTC{offset}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.")

async def handle_tz_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("tz_waiting"):
        return
    tz = update.message.text.strip()
    if re.fullmatch(r"[+-]\d{1,2}(:\d{2})?", tz):
        if re.fullmatch(r"[+-]\d{1,2}$", tz):
            sign = tz[0]
            hh = int(tz[1:])
            tz = f"{sign}{hh:02d}:00"
        context.user_data["tz"] = tz
        context.user_data["tz_waiting"] = False
        await update.message.reply_text(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: UTC{tz}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.")
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +3, +03:00 –∏–ª–∏ -4:30")

# =====================
# Core handlers
# =====================
async def reload_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PROMPTS
    try:
        PROMPTS = load_prompts()
        await update.message.reply_text("–ü—Ä–æ–º—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")
        logging.info("Prompts reloaded: system=%s... | fewshot=%d",
                     (PROMPTS.system or "")[:40].replace("\n", " "), len(PROMPTS.fewshot))
    except Exception as e:
        logging.exception("/reload error")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

def _ack_text(title: str, iso: str) -> str:
    return f"–û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é ¬´{title}¬ª {fmt_dt(iso)}"

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_tz = context.user_data.get("tz", DEFAULT_TZ)
    text = update.message.text.strip()

    iso = try_parse_relative_local(text, user_tz)
    if iso:
        title = _clean_title(text)
        iso = bump_to_future(iso)
        await update.message.reply_text(_ack_text(title, iso))
        await schedule_reminder(context, update.effective_chat.id, title, iso)
        return

    result = await call_llm(text, user_tz)
    if result.fixed_datetime:
        result.fixed_datetime = bump_to_future(result.fixed_datetime)
    await route_llm_result(update, context, result, user_tz)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_tz = context.user_data.get("tz", DEFAULT_TZ)
    file = await update.message.voice.get_file()
    file_bytes = await file.download_as_bytearray()
    text = await transcribe_voice(file_bytes, filename="telegram_voice.ogg")

    iso = try_parse_relative_local(text, user_tz)
    if iso:
        title = _clean_title(text)
        iso = bump_to_future(iso)
        await update.message.reply_text(_ack_text(title, iso))
        await schedule_reminder(context, update.effective_chat.id, title, iso)
        return

    result = await call_llm(text, user_tz)
    if result.fixed_datetime:
        result.fixed_datetime = bump_to_future(result.fixed_datetime)
    await route_llm_result(update, context, result, user_tz)

async def route_llm_result(update: Update, context: ContextTypes.DEFAULT_TYPE, result: LLMResult, user_tz: str):
    chat_id = update.effective_chat.id
    if result.intent == "create_reminder" and result.fixed_datetime:
        title = result.title or result.text_original or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        await update.message.reply_text(_ack_text(title, result.fixed_datetime))
        await schedule_reminder(context, chat_id, title, result.fixed_datetime)
    elif result.intent == "ask_clarification" and result.options:
        kb = build_time_keyboard(result.options)
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏:", reply_markup=kb)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –°–∫–∞–∂–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 15 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ¬ª.")

# =====================
# Callback handlers: pick time / snooze / done
# =====================
async def handle_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data or ""
    try:
        await query.answer()

        if data.startswith("pick|"):
            _, iso = data.split("|", 1)
            iso = bump_to_future(iso)
            title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
            await query.edit_message_text(_ack_text(title, iso))
            await schedule_reminder(context, query.message.chat_id, title, iso)
            return

        if data.startswith("snz|"):
            # snz|10m|rid   –∏–ª–∏ snz|1h|rid
            _, delta, rid = data.split("|", 2)
            info = context.application.bot_data.get("reminder_map", {}).get(rid)
            title = (info or {}).get("title") or extract_title_from_message(query.message.text)
            chat_id = (info or {}).get("chat_id") or query.message.chat_id

            user_tz = context.user_data.get("tz", DEFAULT_TZ)
            tz = tz_from_offset(user_tz)
            now = datetime.now(tz)

            if delta.endswith("m"):
                minutes = int(delta[:-1])
                new_iso = (now + timedelta(minutes=minutes)).replace(microsecond=0).isoformat()
            elif delta.endswith("h"):
                hours = int(delta[:-1])
                new_iso = (now + timedelta(hours=hours)).replace(microsecond=0).isoformat()
            else:
                new_iso = (now + timedelta(minutes=10)).replace(microsecond=0).isoformat()

            await query.edit_message_text(f"‚è∏ –û—Ç–ª–æ–∂–µ–Ω–æ ¬´{title}¬ª –¥–æ {fmt_dt(new_iso)}")
            await schedule_reminder(context, chat_id, title, new_iso)
            return

        if data.startswith("done|"):
            _, rid = data.split("|", 1)
            info = context.application.bot_data.get("reminder_map", {}).get(rid)
            title = (info or {}).get("title") or extract_title_from_message(query.message.text)
            await query.edit_message_text(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ¬´{title}¬ª")
            # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞—Ä—Ç—ã
            if info:
                context.application.bot_data["reminder_map"].pop(rid, None)
            return

    except Exception as e:
        logging.exception("handle_callbacks failed: %s", e)
        try:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        except Exception:
            pass

# =====================
# Main
# =====================
def main():
    app = Application.builder().token(TOKEN).build()

    # TZ selection
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_tz_choice, pattern="^tz"))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^[+-]"), handle_tz_manual))

    # Core
    app.add_handler(CommandHandler("reload", reload_prompts))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # Callbacks for time pick / snooze / done
    app.add_handler(CallbackQueryHandler(handle_callbacks, pattern="^(pick|snz|done)"))

    async def on_error(update, context):
        logging.exception("PTB error: %s | update=%r", context.error, update)
    app.add_error_handler(on_error)

    logging.info("Bot starting‚Ä¶ polling enabled")
    app.run_polling(
        allowed_updates=[UpdateType.MESSAGE, UpdateType.CALLBACK_QUERY],
        drop_pending_updates=True,
        poll_interval=1.0,
        timeout=10
    )

if __name__ == "__main__":
    main()
