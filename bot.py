#!/usr/bin/env python3
import os
import re
import json
import sqlite3
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, List, Tuple

import pytz
import yaml
from pydantic import BaseModel, Field, ValidationError

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# ============ –õ–û–ì–ò ============
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
)
log = logging.getLogger("reminder-bot")

# ============ ENV ============
TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN") or ""
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_APIKEY") or ""

if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY:
    log.warning("OPENAI_API_KEY missing ‚Äî LLM parsing will fail.")

# ============ DB ============
DB_PATH = os.getenv("DB_PATH", "reminders.db")
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
conn.row_factory = sqlite3.Row
cur = conn.cursor()

cur.execute(
    """
CREATE TABLE IF NOT EXISTS reminders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL,
  chat_id INTEGER NOT NULL,
  title TEXT NOT NULL,
  when_ts INTEGER,                  -- unix ts –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∏ "–≤—Ä–µ–º—è —Å—É—Ç–æ–∫" —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏–∫–∏
  tz TEXT,                          -- "+03:00" –∏ —Ç.–ø.
  repeat TEXT DEFAULT 'none',       -- 'none'|'daily'|'weekly'|'monthly'
  day_of_week INTEGER,              -- 1..7 (–ü–Ω..–í—Å) –¥–ª—è weekly
  day_of_month INTEGER,             -- 1..31 –¥–ª—è monthly
  state TEXT DEFAULT 'active',      -- 'active'|'done'|'cancelled'
  created_at INTEGER                -- unix ts
);
"""
)
conn.commit()

# ============ –ü–ê–ú–Ø–¢–¨ –£–¢–û–ß–ù–ï–ù–ò–ô ============
PENDING: Dict[int, Dict[str, Any]] = {}  # user_id -> {"pending": dict, "clarify_count": int}
MAX_CLARIFY = 2

# ============ –ú–ï–ù–Æ-–ö–õ–ê–í–ò–ê–¢–£–†–ê ============
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    ],
    resize_keyboard=True,
)

# ============ –ü–†–û–ú–ü–¢–´ ============
class PromptPack(BaseModel):
    system: Optional[str] = None  # root-level system (–º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
    parse: Dict[str, Any]
    fewshot: Optional[List[Dict[str, str]]] = None

def load_prompts() -> PromptPack:
    path = os.getenv("PROMPTS_PATH", "prompts.yaml")
    try:
        with open(path, "r", encoding="utf-8") as f:
            raw = yaml.safe_load(f)
        pack = PromptPack(**raw)
        log.info(
            "Prompts loaded: system=%s | fewshot=%s",
            (pack.parse.get("system", "")[:40] + "...") if pack.parse.get("system") else None,
            len(pack.fewshot or []),
        )
        return pack
    except Exception as e:
        log.error("Failed to load prompts.yaml: %s", e, exc_info=False)
        raise

PROMPTS = load_prompts()

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –î–ê–¢–´ ============
def now_iso_with_tz(tz_offset: str) -> str:
    # tz_offset "+03:00"
    sign = 1 if tz_offset.startswith("+") else -1
    hh, mm = map(int, tz_offset[1:].split(":"))
    off = timezone(timedelta(minutes=sign * (hh * 60 + mm)))
    return datetime.now(off).replace(microsecond=0).isoformat()

def ensure_tz_offset(s: Optional[str]) -> str:
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +03:00
    if not s:
        return "+03:00"
    m = re.fullmatch(r"[+-]\d{2}:\d{2}", s.strip())
    return s.strip() if m else "+03:00"

def iso_to_unix(iso_str: str) -> int:
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ RFC3339 —Å –æ—Ñ—Ñ—Å–µ—Ç–æ–º
    dt = datetime.fromisoformat(iso_str)
    return int(dt.timestamp())

def unix_to_local_str(ts: int, tz_offset: str) -> str:
    sign = 1 if tz_offset.startswith("+") else -1
    hh, mm = map(int, tz_offset[1:].split(":"))
    off = timezone(timedelta(minutes=sign * (hh * 60 + mm)))
    dt = datetime.fromtimestamp(ts, tz=off)
    return dt.strftime("%d.%m %H:%M")

# —Å—Ç—Ä–æ–∏—Ç ISO —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ "—Å–µ–≥–æ–¥–Ω—è –≤ HH:MM" (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ ‚Äî –∑–∞–≤—Ç—Ä–∞)
def build_today_time_iso(tz_offset: str, hhmm: str) -> str:
    sign = 1 if tz_offset.startswith("+") else -1
    hh_off, mm_off = map(int, tz_offset[1:].split(":"))
    off = timezone(timedelta(minutes=sign * (hh_off * 60 + mm_off)))
    now = datetime.now(off)
    h, m = map(int, hhmm.split(":"))
    dt = now.replace(hour=h, minute=m, second=0, microsecond=0)
    if dt <= now:
        dt += timedelta(days=1)
    return dt.isoformat()

# ============ OPENAI LLM ============
from openai import OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

async def call_llm(text: str, tz_offset: str) -> Optional[dict]:
    """
    –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: system + NOW_ISO/TZ_DEFAULT + user + fewshot.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π dict –∏–ª–∏ None.
    """
    tz_offset = ensure_tz_offset(tz_offset)
    now_iso = now_iso_with_tz(tz_offset)
    system_text = PROMPTS.parse.get("system", "")

    messages = []
    if system_text:
        messages.append({"role": "system", "content": system_text})

    # –ü–µ—Ä–µ–¥–∞—ë–º ¬´—Å–ª—É–∂–µ–±–Ω—ã–π¬ª NOW_ISO / TZ_DEFAULT –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –ø—Ä–æ–º—Ç–µ)
    messages.append(
        {
            "role": "user",
            "content": f"NOW_ISO={now_iso}  TZ_DEFAULT={tz_offset}",
        }
    )

    # few-shot (–µ—Å–ª–∏ –µ—Å—Ç—å)
    few = PROMPTS.fewshot or []
    for fs in few:
        role = fs.get("role")
        content = fs.get("content", "")
        if role and content:
            messages.append({"role": role, "content": content})

    # –æ—Å–Ω–æ–≤–Ω–æ–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "content": text})

    log.debug("LLM messages: %s", messages)

    try:
        resp = await asyncio.to_thread(
            openai_client.chat.completions.create,
            model=os.getenv("OPENAI_MODEL", "gpt-4o-mini"),
            messages=messages,
            temperature=0.2,
        )
        raw = resp.choices[0].message.content or ""
        # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ –±—ç–∫—Ç–∏–∫–∏ ‚Äî —Å–Ω–∏–º–µ–º
        raw = raw.strip()
        if raw.startswith("```"):
            raw = re.sub(r"^```(json|JSON)?\s*", "", raw)
            raw = re.sub(r"\s*```$", "", raw).strip()
        # –ø—Ä–æ—Å—Ç–æ –ø–∞—Ä—Å–∏–º JSON
        data = json.loads(raw)
        return data
    except Exception as e:
        log.error("LLM error: %s", e, exc_info=False)
        return None

# ============ –£–¢–û–ß–ù–ï–ù–ò–Ø ============

def upsert_pending(user_id: int, payload: dict):
    d = PENDING.get(user_id, {"pending": {}, "clarify_count": 0})
    pen = d["pending"]
    for k in [
        "title",
        "description",
        "timezone",
        "fixed_datetime",
        "repeat",
        "day_of_week",
        "day_of_month",
    ]:
        if payload.get(k) is not None:
            pen[k] = payload[k]
    PENDING[user_id] = {"pending": pen, "clarify_count": d["clarify_count"]}

def inc_clarify(user_id: int):
    d = PENDING.get(user_id, {"pending": {}, "clarify_count": 0})
    d["clarify_count"] += 1
    PENDING[user_id] = d

def can_clarify(user_id: int) -> bool:
    d = PENDING.get(user_id)
    return (d is None) or (d["clarify_count"] < MAX_CLARIFY)

def render_options_keyboard(options: List[dict], cb_prefix: str = "clarify") -> InlineKeyboardMarkup:
    rows, row = [], []
    for i, opt in enumerate(options):
        data = {
            "iso": opt.get("iso_datetime") or "",
            "dow": str(opt.get("day_of_week") or ""),
            "dom": str(opt.get("day_of_month") or ""),
        }
        cb_data = f"{cb_prefix}:{data['iso']}:{data['dow']}:{data['dom']}"
        label = opt.get("label", "‚Ä¶")
        row.append(InlineKeyboardButton(label, callback_data=cb_data))
        if len(row) == 3:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(rows)

# ============ –°–û–•–†–ê–ù–ï–ù–ò–ï/–°–ù–û–û–ó ============

def save_reminder(
    user_id: int,
    chat_id: int,
    title: str,
    when_iso: Optional[str],
    tz_offset: str,
    repeat: str = "none",
    day_of_week: Optional[int] = None,
    day_of_month: Optional[int] = None,
) -> int:
    when_ts = iso_to_unix(when_iso) if when_iso else None
    cur.execute(
        """
        INSERT INTO reminders (user_id, chat_id, title, when_ts, tz, repeat, day_of_week, day_of_month, state, created_at)
        VALUES (?,?,?,?,?,?,?,?,?,?)
        """,
        (
            user_id,
            chat_id,
            title,
            when_ts,
            tz_offset,
            repeat,
            day_of_week,
            day_of_month,
            "active",
            int(datetime.utcnow().timestamp()),
        ),
    )
    conn.commit()
    return cur.lastrowid

def snooze_reminder(rem_id: int, minutes: int) -> Optional[int]:
    cur.execute("SELECT * FROM reminders WHERE id=? AND state='active'", (rem_id,))
    row = cur.fetchone()
    if not row:
        return None
    new_ts = (row["when_ts"] or int(datetime.utcnow().timestamp())) + minutes * 60
    cur.execute("UPDATE reminders SET when_ts=? WHERE id=?", (new_ts, rem_id))
    conn.commit()
    return new_ts

def delete_reminder(rem_id: int) -> bool:
    cur.execute("UPDATE reminders SET state='cancelled' WHERE id=?", (rem_id,))
    conn.commit()
    return cur.rowcount > 0

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –î–õ–Ø –ü–ï–†–ò–û–î–ò–ö–ò ============
def compute_next_fire(row: sqlite3.Row) -> Optional[int]:
    repeat = row["repeat"]
    if repeat == "none":
        return None

    tz_off = ensure_tz_offset(row["tz"] or "+03:00")
    sign = 1 if tz_off.startswith("+") else -1
    hh, mm = map(int, tz_off[1:].split(":"))
    off_minutes = sign * (hh * 60 + mm)
    off = timezone(timedelta(minutes=off_minutes))

    now_local = datetime.now(off).replace(second=0, microsecond=0)
    base_time = datetime.fromtimestamp(row["when_ts"], tz=off) if row["when_ts"] else now_local

    if repeat == "daily":
        nxt = base_time
        if nxt <= now_local:
            nxt = nxt + timedelta(days=1)
        return int(nxt.astimezone(timezone.utc).timestamp())

    if repeat == "weekly":
        target_dow = int(row["day_of_week"] or 1)  # 1..7
        current_dow = now_local.isoweekday()
        delta = (target_dow - current_dow) % 7
        nxt = now_local.replace(hour=base_time.hour, minute=base_time.minute, second=0, microsecond=0)
        if delta == 0 and nxt <= now_local:
            delta = 7
        nxt = nxt + timedelta(days=delta)
        return int(nxt.astimezone(timezone.utc).timestamp())

    if repeat == "monthly":
        dom = int(row["day_of_month"] or 1)
        y, m = now_local.year, now_local.month
        # –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
        import calendar
        last = calendar.monthrange(y, m)[1]
        d = dom if dom <= last else last
        candidate = now_local.replace(day=d, hour=base_time.hour, minute=base_time.minute, second=0, microsecond=0)
        if candidate <= now_local:
            # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            if m == 12:
                y, m = y + 1, 1
            else:
                m += 1
            last = calendar.monthrange(y, m)[1]
            d = dom if dom <= last else last
            candidate = candidate.replace(year=y, month=m, day=d)
        return int(candidate.astimezone(timezone.utc).timestamp())

    return None

def bump_next(row_id: int, next_ts: Optional[int]):
    if next_ts:
        cur.execute("UPDATE reminders SET when_ts=? WHERE id=?", (next_ts, row_id))
    else:
        cur.execute("UPDATE reminders SET state='done' WHERE id=?", (row_id,))
    conn.commit()

# ============ SCHEDULER LOOP ============
async def scheduler_loop(app: Application):
    log.info("Scheduler started")
    while True:
        try:
            now_ts = int(datetime.utcnow().timestamp())
            cur.execute(
                "SELECT * FROM reminders WHERE state='active' AND when_ts IS NOT NULL AND when_ts <= ?",
                (now_ts,),
            )
            due = cur.fetchall()
            for row in due:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                tz_off = row["tz"] or "+03:00"
                when_str = unix_to_local_str(row["when_ts"], tz_off)
                kb = InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("‚è∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω", callback_data=f"snooze:10:{row['id']}"),
                            InlineKeyboardButton("üïí —á–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data=f"snooze:60:{row['id']}"),
                            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done:{row['id']}"),
                        ]
                    ]
                )
                try:
                    await app.bot.send_message(
                        chat_id=row["chat_id"],
                        text=f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {row['title']}\n‚è± {when_str}",
                        reply_markup=kb,
                    )
                except Exception as e:
                    log.error("Send reminder failed: %s", e, exc_info=False)

                # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ (–µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥–∏–∫–∞), –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                next_ts = compute_next_fire(row)
                bump_next(row["id"], next_ts)

        except Exception as e:
            log.error("Scheduler error: %s", e, exc_info=False)

        await asyncio.sleep(30)

# ============ –•–ï–ù–î–õ–ï–†–´ ============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ù–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 11 –ø–∞–¥–µ–ª¬ª, ¬´—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª, ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏¬ª.",
        reply_markup=MAIN_MENU,
    )

async def reload_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PROMPTS
    try:
        PROMPTS = load_prompts()
        await update.message.reply_text("üîÑ –ü—Ä–æ–º–ø—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")

def format_period_suffix(row: sqlite3.Row) -> str:
    if row["repeat"] == "none":
        return ""
    if row["repeat"] == "daily":
        return " (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å)"
    if row["repeat"] == "weekly":
        map_dow = {1: "–ü–Ω", 2: "–í—Ç", 3: "–°—Ä", 4: "–ß—Ç", 5: "–ü—Ç", 6: "–°–±", 7: "–í—Å"}
        lbl = map_dow.get(row["day_of_week"] or 1, "?")
        return f" (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, {lbl})"
    if row["repeat"] == "monthly":
        dom = row["day_of_month"] or 1
        return f" (–µ–∂–µ–º–µ—Å—è—á–Ω–æ, {dom} —á–∏—Å–ª–∞)"
    return ""

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cur.execute(
        "SELECT * FROM reminders WHERE user_id=? AND state='active' ORDER BY when_ts IS NULL, when_ts ASC",
        (user_id,),
    )
    rows = cur.fetchall()
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    chunks = []
    for r in rows:
        tz = r["tz"] or "+03:00"
        when_s = "-" if r["when_ts"] is None else unix_to_local_str(r["when_ts"], tz)
        suffix = format_period_suffix(r)
        line = f"‚Ä¢ {r['title']}\n   ‚è± {when_s}{suffix}"
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{r['id']}")]]
        )
        await update.message.reply_text(line, reply_markup=kb)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt.startswith("üìã"):
        await list_reminders(update, context)
    elif txt.startswith("‚öôÔ∏è"):
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=MAIN_MENU)
    else:
        await handle_text(update, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    # –æ–ø—Ä–µ–¥–µ–ª–∏–º tz –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; —É —Ç–µ–±—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ–π –º–µ—Ö–∞–Ω–∏–∑–º ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +03:00
    tz_offset = context.user_data.get("tz_offset", "+03:00")

    data = await call_llm(text, tz_offset)
    if not data:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 6 –ø–∞–¥–µ–ª¬ª.")
        return

    intent = data.get("intent", "create_reminder")
    title = data.get("title") or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    fixed = data.get("fixed_datetime")
    repeat = data.get("repeat", "none")
    day_of_week = data.get("day_of_week")
    day_of_month = data.get("day_of_month")
    timezone_str = ensure_tz_offset(data.get("timezone") or tz_offset)

    if intent == "ask_clarification":
        # —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        upsert_pending(user.id, data)
        inc = PENDING.get(user.id, {"clarify_count": 0})["clarify_count"]
        if inc >= MAX_CLARIFY:
            # —Å–æ–∑–¥–∞—ë–º –ª—É—á—à—É—é –¥–æ–≥–∞–¥–∫—É
            pen = PENDING[user.id]["pending"]
            rem_id = save_reminder(
                user.id,
                chat_id,
                pen.get("title", title),
                pen.get("fixed_datetime"),
                ensure_tz_offset(pen.get("timezone") or timezone_str),
                pen.get("repeat", "none"),
                pen.get("day_of_week"),
                pen.get("day_of_month"),
            )
            PENDING.pop(user.id, None)
            pretty = (
                unix_to_local_str(iso_to_unix(pen["fixed_datetime"]), ensure_tz_offset(pen.get("timezone") or timezone_str))
                if pen.get("fixed_datetime")
                else "‚Äî"
            )
            await update.message.reply_text(f"üìÖ –û–∫–µ–π, –∑–∞–ø–∏—Å–∞–ª: {pen.get('title','–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')} ‚Äî {pretty}", reply_markup=MAIN_MENU)
            return

        inc_clarify(user.id)
        opts = data.get("options") or []

        # –µ—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç, –ø–æ–¥–∫–∏–Ω–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (–≤—Ä–µ–º—è)
        if not opts:
            std = ["08:00", "12:00", "19:00"]
            opts = [{"iso_datetime": build_today_time_iso(timezone_str, hh), "label": hh} for hh in std]

        kb = render_options_keyboard(opts, cb_prefix="clarify")
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=kb)
        return

    # create_reminder
    rem_id = save_reminder(
        user.id,
        chat_id,
        title,
        fixed,
        timezone_str,
        repeat,
        day_of_week,
        day_of_month,
    )
    if repeat == "none":
        pretty = unix_to_local_str(iso_to_unix(fixed), timezone_str) if fixed else "‚Äî"
        await update.message.reply_text(f"üìÖ –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é: {title}\n‚è± {pretty}", reply_markup=MAIN_MENU)
    else:
        # –ø–µ—Ä–∏–æ–¥–∏–∫–∞
        when_s = "-" if not fixed else unix_to_local_str(iso_to_unix(fixed), timezone_str)
        suffix = ""
        if repeat == "daily":
            suffix = "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
        elif repeat == "weekly":
            map_dow = {1: "–ü–Ω", 2: "–í—Ç", 3: "–°—Ä", 4: "–ß—Ç", 5: "–ü—Ç", 6: "–°–±", 7: "–í—Å"}
            suffix = f"–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, {map_dow.get(day_of_week or 1,'?')}"
        elif repeat == "monthly":
            suffix = f"–∫–∞–∂–¥–æ–µ {day_of_month} —á–∏—Å–ª–æ"

        await update.message.reply_text(
            f"üìÖ –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é: {title}\n‚è± {when_s} ({suffix})",
            reply_markup=MAIN_MENU,
        )

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data or ""
    await q.answer()
    if data.startswith("snooze:"):
        # snooze:MIN:ID
        try:
            _, mins, rem_id = data.split(":", 2)
            mins = int(mins)
            rem_id = int(rem_id)
        except:
            return
        new_ts = snooze_reminder(rem_id, mins)
        if new_ts:
            # –ü–æ–ª—É—á–∏–º tz –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            cur.execute("SELECT tz, title FROM reminders WHERE id=?", (rem_id,))
            row = cur.fetchone()
            tz_off = row["tz"] or "+03:00"
            new_local = unix_to_local_str(new_ts, tz_off)
            await q.edit_message_text(f"üïí –û—Ç–ª–æ–∂–µ–Ω–æ –¥–æ {new_local} ‚Äî {row['title']}")
    elif data.startswith("done:"):
        try:
            _, rem_id = data.split(":", 1)
            rem_id = int(rem_id)
        except:
            return
        cur.execute("UPDATE reminders SET state='done' WHERE id=?", (rem_id,))
        conn.commit()
        await q.edit_message_text("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
    elif data.startswith("del:"):
        try:
            _, rem_id = data.split(":", 1)
            rem_id = int(rem_id)
        except:
            return
        ok = delete_reminder(rem_id)
        if ok:
            await q.edit_message_text("üóë –£–¥–∞–ª–µ–Ω–æ")
    elif data.startswith("clarify:"):
        # clarify:ISO:DOW:DOM
        try:
            _, iso, dow, dom = data.split(":", 3)
        except:
            return
        user_id = q.from_user.id
        d = PENDING.get(user_id, {"pending": {}, "clarify_count": 0})
        pen = d["pending"]
        if iso:
            pen["fixed_datetime"] = iso
        if dow:
            try:
                pen["day_of_week"] = int(dow)
            except:
                pass
        if dom:
            try:
                pen["day_of_month"] = int(dom)
            except:
                pass
        PENDING[user_id] = {"pending": pen, "clarify_count": d["clarify_count"]}

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        repeat = pen.get("repeat", "none")
        ready = False
        if repeat == "none":
            ready = bool(pen.get("fixed_datetime"))
        elif repeat == "daily":
            ready = bool(pen.get("fixed_datetime"))
        elif repeat == "weekly":
            ready = bool(pen.get("fixed_datetime")) and bool(pen.get("day_of_week"))
        elif repeat == "monthly":
            ready = bool(pen.get("fixed_datetime")) and bool(pen.get("day_of_month"))

        if ready:
            rem_id = save_reminder(
                user_id,
                q.message.chat_id,
                pen.get("title", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
                pen.get("fixed_datetime"),
                ensure_tz_offset(pen.get("timezone") or "+03:00"),
                pen.get("repeat", "none"),
                pen.get("day_of_week"),
                pen.get("day_of_month"),
            )
            PENDING.pop(user_id, None)
            pretty = (
                unix_to_local_str(iso_to_unix(pen["fixed_datetime"]), ensure_tz_offset(pen.get("timezone") or "+03:00"))
                if pen.get("fixed_datetime")
                else "-"
            )
            await q.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {pen.get('title','–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')} ‚Äî {pretty}")
        else:
            # –µ—â—ë –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ-–¥–æ–≥–∞–¥–∫–∞
            d = PENDING.get(user_id, {"pending": pen, "clarify_count": 0})
            if d["clarify_count"] >= MAX_CLARIFY:
                rem_id = save_reminder(
                    user_id,
                    q.message.chat_id,
                    pen.get("title", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
                    pen.get("fixed_datetime"),
                    ensure_tz_offset(pen.get("timezone") or "+03:00"),
                    pen.get("repeat", "none"),
                    pen.get("day_of_week"),
                    pen.get("day_of_month"),
                )
                PENDING.pop(user_id, None)
                await q.edit_message_text("‚úÖ –ó–∞–ø–∏—Å–∞–ª (–ø–æ –ª—É—á—à–µ–º—É –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—é).")
                return
            d["clarify_count"] += 1
            PENDING[user_id] = d

            # –≤—ã–±–∏—Ä–∞–µ–º, —á—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å
            opts = []
            if not pen.get("fixed_datetime"):
                for hh in ["08:00", "12:00", "19:00"]:
                    iso = build_today_time_iso(ensure_tz_offset(pen.get("timezone") or "+03:00"), hh)
                    opts.append({"iso_datetime": iso, "label": hh, "day_of_week": None, "day_of_month": None})
                await q.edit_message_text("–£—Ç–æ—á–Ω–∏ –≤—Ä–µ–º—è:", reply_markup=render_options_keyboard(opts))
                return
            if pen.get("repeat") == "weekly" and not pen.get("day_of_week"):
                dows = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
                opts = [{"iso_datetime": "", "label": lbl, "day_of_week": i + 1, "day_of_month": None} for i, lbl in enumerate(dows)]
                await q.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=render_options_keyboard(opts))
                return
            if pen.get("repeat") == "monthly" and not pen.get("day_of_month"):
                dom_opts = [1, 5, 10, 15, 20, 25]
                opts = [{"iso_datetime": "", "label": str(x), "day_of_week": None, "day_of_month": x} for x in dom_opts]
                await q.edit_message_text("–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞:", reply_markup=render_options_keyboard(opts))
                return

# ============ /help ============
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 11 –ø–∞–¥–µ–ª\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏\n"
        "‚Ä¢ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ —Å—Ä–µ–¥—É –≤ 19 ‚Äî –∑–∞–ª\n"
        "‚Ä¢ –∫–∞–∂–¥–æ–µ 5 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ –≤ 18 ‚Äî –±–∞–Ω—è\n",
        reply_markup=MAIN_MENU,
    )

# ============ MAIN ============
def build_app() -> Application:
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reload", reload_prompts))

    app.add_handler(CallbackQueryHandler(on_callback, pattern=r"^(snooze|done|del|clarify):"))
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.Regex(r"^(üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏)$"), handle_menu))
    # –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    return app

async def main_async():
    log.info("Bot starting‚Ä¶ polling enabled")
    app = build_app()
    # –∑–∞–ø—É—Å—Ç–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(scheduler_loop(app))
    await app.initialize()
    await app.start()
    await app.updater.start_polling(allowed_updates=None)
    await app.updater.idle()
    await app.stop()
    await app.shutdown()

def main():
    asyncio.run(main_async())

if __name__ == "__main__":
    main()
