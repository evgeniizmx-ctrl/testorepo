import os
import io
import json
import asyncio
from datetime import datetime, timedelta
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ChatAction

import httpx
from dateutil import parser as dateparser

from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ==== –ö–ª—é—á–∏ –∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ====
BOT_TOKEN = os.getenv("BOT_TOKEN")            # –∏–∑ Railway Variables
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –∏–∑ Railway Variables
OCR_SPACE_API_KEY = os.getenv("OCR_SPACE_API_KEY")  # –∏–∑ Railway Variables

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å—Ç–∞–≤–∏–º Europe/Moscow; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–º–µ–Ω–∏)
TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(TZ)

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=TZ)

# –ü–∞–º—è—Ç—å-–≤-—Ä–∞–º–∫–µ –¥–ª—è "—á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤" –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø—Ä–æ—Å—Ç–µ–Ω—å–∫–æ, –±–µ–∑ –ë–î)
PENDING = {}   # user_id -> dict
REMINDERS = [] # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: {user_id, text, remind_dt, repeat}

# ==== –£—Ç–∏–ª–∏—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ====
async def send_reminder(user_id: int, text: str):
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("Send reminder error:", e)

def schedule_one(reminder: dict):
    run_dt = reminder["remind_dt"]
    scheduler.add_job(send_reminder, "date", run_date=run_dt, args=[reminder["user_id"], reminder["text"]])

def schedule_next_if_repeat(reminder: dict):
    if reminder.get("repeat") in ("daily", "weekly"):
        delta = timedelta(days=1) if reminder["repeat"] == "daily" else timedelta(weeks=1)
        next_dt = reminder["remind_dt"] + delta
        reminder["remind_dt"] = next_dt
        schedule_one(reminder)

# ==== OpenAI: GPT (–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞) + Whisper (—Ä–∞—Å–ø–æ–∑–Ω. —Ä–µ—á–∏) ====
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç openai (—á–µ—Ä–µ–∑ httpx –≤—Ä—É—á–Ω—É—é –¥–ª—è Audio ‚Äî —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ)
OPENAI_BASE = "https://api.openai.com/v1"

async def gpt_parse(text: str) -> dict:
    """
    –ü—Ä–æ—Å–∏–º GPT –≤–µ—Ä–Ω—É—Ç—å JSON —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
    {
      "description": "—Å—Ç—Ä–æ–∫–∞",
      "event_time": "ISO –∏–ª–∏ –ø—É—Å—Ç–æ",
      "remind_time": "ISO –∏–ª–∏ –ø—É—Å—Ç–æ",
      "repeat": "daily|weekly|none",
      "needs_clarification": true/false,
      "clarification_question": "–µ—Å–ª–∏ –Ω—É–∂–Ω–æ"
    }
    """
    system = (
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
        "–†–∞–∑–±–∏—Ä–∞–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ JSON. "
        "–ï—Å–ª–∏ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã ‚Äî –æ—Ç–º–µ—Ç—å needs_clarification=true –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å. "
        "–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ '–Ω–∞–ø–æ–º–Ω–∏ –∑–∞ X', –≤—ã—á–∏—Å–ª–∏ remind_time –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ event_time. "
        "–í—Ä–µ–º—è –∏ –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–π –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ (YYYY-MM-DD HH:MM, 24h). "
        "–ö–ª—é—á–∏: description, event_time, remind_time, repeat(daily|weekly|none), needs_clarification, clarification_question."
    )
    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": system},
            {"role": "user", "content": text}
        ],
        "temperature": 0
    }
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    async with httpx.AsyncClient(timeout=60) as client:
        r = await client.post(f"{OPENAI_BASE}/chat/completions", headers=headers, json=payload)
        r.raise_for_status()
        answer = r.json()["choices"][0]["message"]["content"]
    try:
        data = json.loads(answer)
    except json.JSONDecodeError:
        data = {
            "description": text,
            "event_time": "",
            "remind_time": "",
            "repeat": "none",
            "needs_clarification": True,
            "clarification_question": "–£—Ç–æ—á–Ω–∏—Ç–µ, –∫–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å (–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è)?"
        }
    return data

async def openai_whisper_bytes(ogg_bytes: bytes) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å (ogg/opus) –≤ Whisper API –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    files = {
        "file": ("voice.ogg", ogg_bytes, "audio/ogg"),
        "model": (None, "whisper-1"),
        "language": (None, "ru")
    }
    async with httpx.AsyncClient(timeout=120) as client:
        r = await client.post(f"{OPENAI_BASE}/audio/transcriptions", headers=headers, files=files)
        r.raise_for_status()
        return r.json().get("text", "").strip()

# ==== OCR.Space –¥–ª—è —Å–∫—Ä–∏–Ω–æ–≤ ====
async def ocr_space_image(bytes_png: bytes) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ OCR.Space.
    –°–æ–≤–µ—Ç—ã: –ª—É—á—à–µ —Å–∫—Ä–∏–Ω—ã/—Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–∞. PDF/—Å–ª–æ–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –¥–ª—è MVP.
    """
    url = "https://api.ocr.space/parse/image"
    data = {
        "apikey": OCR_SPACE_API_KEY,
        "language": "rus",
        "OCREngine": 2
    }
    files = {"file": ("image.png", bytes_png, "image/png")}
    async with httpx.AsyncClient(timeout=120) as client:
        r = await client.post(url, data=data, files=files)
        r.raise_for_status()
        js = r.json()
    try:
        parsed = js["ParsedResults"][0]["ParsedText"]
    except Exception:
        parsed = ""
    return parsed.strip()

# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ ====
def as_local_iso(dt_like: str) -> datetime | None:
    """–ü–∞—Ä—Å–∏–º —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—É—é –¥–∞—Ç—É –≤ datetime –≤ –Ω–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ."""
    if not dt_like:
        return None
    try:
        dt = dateparser.parse(dt_like)
        if not dt:
            return None
        if dt.tzinfo is None:
            dt = tz.localize(dt)
        else:
            dt = dt.astimezone(tz)
        # –æ–∫—Ä—É–≥–ª–∏–º —Å–µ–∫—É–Ω–¥—ã
        return dt.replace(second=0, microsecond=0)
    except Exception:
        return None

# ==== –î–∏–∞–ª–æ–≥–∏/—Ö–µ–Ω–¥–ª–µ—Ä—ã ====
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å–æ–≤–æ–µ/—Å–∫—Ä–∏–Ω —Å –∑–∞–¥–∞—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É 25.08 –≤ 15:00, –Ω–∞–ø–æ–º–Ω–∏ –∑–∞ –¥–µ–Ω—å¬ª)."
    )

# –¢–µ–∫—Å—Ç
@dp.message(F.text)
async def on_text(message: Message):
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    plan = await gpt_parse(message.text)
    await handle_plan(message, plan)

# –í–æ–π—Å—ã
@dp.message(F.voice)
async def on_voice(message: Message):
    await bot.send_chat_action(message.chat.id, ChatAction.RECORD_VOICE)
    file = await bot.get_file(message.voice.file_id)
    buf = await bot.download_file(file.file_path)  # BytesIO
    buf.seek(0)
    text = await openai_whisper_bytes(buf.read())
    if not text:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    plan = await gpt_parse(text)
    await handle_plan(message, plan)

# –§–æ—Ç–æ/–¥–æ–∫ –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞
@dp.message(F.photo | F.document)
async def on_image(message: Message):
    await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)

    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document and str(message.document.mime_type).startswith("image/"):
        file_id = message.document.file_id
    else:
        await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω) —Å —Ç–µ–∫—Å—Ç–æ–º.")
        return

    file = await bot.get_file(file_id)
    buf = await bot.download_file(file.file_path)
    buf.seek(0)
    text = await ocr_space_image(buf.read())
    if not text:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
        return
    plan = await gpt_parse(text)
    await handle_plan(message, plan)

async def handle_plan(message: Message, plan: dict):
    # –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ GPT
    desc = plan.get("description", "").strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    repeat = (plan.get("repeat") or "none").lower()
    need = plan.get("needs_clarification", False)

    # –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å remind_time
    remind_iso = plan.get("remind_time", "") or plan.get("event_time", "")
    remind_dt = as_local_iso(remind_iso)

    # –ï—Å–ª–∏ GPT —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞–¥–æ —É—Ç–æ—á–Ω–∏—Ç—å ‚Äî —Å–ø—Ä–æ—Å–∏–º
    if need or not remind_dt:
        question = plan.get("clarification_question") or "–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08 15:00):"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º "—á–µ—Ä–Ω–æ–≤–∏–∫"
        PENDING[message.from_user.id] = {
            "description": desc,
            "repeat": "none"
        }
        await message.reply(question)
        return

    # –í—Å—ë –µ—Å—Ç—å ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º
    reminder = {
        "user_id": message.from_user.id,
        "text": desc,
        "remind_dt": remind_dt,
        "repeat": "none" if repeat not in ("daily", "weekly") else repeat
    }
    REMINDERS.append(reminder)
    schedule_one(reminder)
    await message.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {remind_dt.strftime('%d.%m %H:%M')} ({TZ})")

# –û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –±–æ—Ç –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å)
@dp.message(F.text & (F.from_user.id.in_(lambda uids: True)))
async def clarifying(message: Message):
    uid = message.from_user.id
    if uid not in PENDING:
        return  # –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    dt = as_local_iso(message.text)
    if not dt:
        await message.reply("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 25.08 15:00")
        return

    draft = PENDING.pop(uid)
    reminder = {
        "user_id": uid,
        "text": draft["description"],
        "remind_dt": dt,
        "repeat": draft.get("repeat", "none")
    }
    REMINDERS.append(reminder)
    schedule_one(reminder)
    await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{reminder['text']}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")

async def main():
    scheduler.start()
    print("Bot started.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
