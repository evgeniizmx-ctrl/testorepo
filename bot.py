import os
import json
import yaml
import sqlite3
import logging
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from openai import OpenAI

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters,
)

# --------------------------- logging ---------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
)
log = logging.getLogger("rembot")

# --------------------------- env ---------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PROMPTS_PATH = os.getenv("PROMPTS_PATH", "prompts.yaml")
DEFAULT_TZ = os.getenv("DEFAULT_TZ", "+03:00")  # –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ

if not BOT_TOKEN:
    raise RuntimeError("No BOT_TOKEN set")

client = OpenAI(api_key=OPENAI_API_KEY)

# --------------------------- scheduler & db ---------------------------
scheduler = AsyncIOScheduler(timezone="UTC")

DB_PATH = os.getenv("DB_PATH", "reminders.db")
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
conn.execute("""
CREATE TABLE IF NOT EXISTS reminders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  chat_id INTEGER NOT NULL,
  title TEXT NOT NULL,
  iso TEXT,                      -- for one-shot
  recurrence TEXT,               -- json: {"type": "...", "weekday": "...", "day": 5, "time":"HH:MM", "tz":"+03:00"}
  created_at TEXT
);
""")
conn.commit()

# --------------------------- prompts ---------------------------
class PromptPack:
    def __init__(self, data: dict):
        self.system = data.get("system", "")
        parse = data.get("parse", {}) or {}
        self.parse_system = parse.get("system", "")
        self.fewshot = data.get("fewshot", []) or []

def load_prompts() -> PromptPack:
    with open(PROMPTS_PATH, "r", encoding="utf-8") as f:
        raw = yaml.safe_load(f)
    pp = PromptPack(raw)
    log.info("Prompts loaded: system=%s... | fewshot=%d",
             (pp.system or "")[:30], len(pp.fewshot))
    return pp

PROMPTS = load_prompts()

# --------------------------- utils ---------------------------
def now_iso_with_offset(offset_str: str) -> str:
    # offset like +03:00
    now_utc = datetime.utcnow().replace(tzinfo=ZoneInfo("UTC"))
    sign = 1 if offset_str.startswith("+") else -1
    hh, mm = map(int, offset_str[1:].split(":"))
    delta = timedelta(hours=hh, minutes=mm)
    local = now_utc + sign * delta
    return local.isoformat(timespec="seconds")

def parse_weekday_to_cron(weekday: str) -> str:
    # mon..sun -> 0..6 (cron: 0=mon in APS? CronTrigger with day_of_week uses mon-sun text)
    # APS CronTrigger supports 'mon,tue,...'
    return weekday

async def send_reminder(context: ContextTypes.DEFAULT_TYPE, chat_id: int, title: str):
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ß–µ—Ä–µ–∑ 10 –º–∏–Ω", callback_data="snz:10"),
            InlineKeyboardButton("–ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data="snz:60"),
        ],
        [InlineKeyboardButton("‚úÖ", callback_data="done")]
    ])
    await context.bot.send_message(chat_id, f"üîî ¬´{title}¬ª", reply_markup=kb)

def add_one_shot_job(app: Application, chat_id: int, title: str, iso: str):
    # APScheduler –æ–∂–∏–¥–∞–µ—Ç UTC ‚Äî —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    dt = datetime.fromisoformat(iso)
    trigger = DateTrigger(run_date=dt)
    scheduler.add_job(
        send_reminder,
        trigger=trigger,
        args=[app.bot, chat_id, title],
        id=f"one:{chat_id}:{iso}:{title}",
        replace_existing=True,
        misfire_grace_time=60,
    )

def add_recurrence_job(app: Application, chat_id: int, title: str, rec: dict, tz: str):
    t = rec.get("type")
    time_str = rec.get("time")
    hh, mm = map(int, time_str.split(":"))
    # APS CronTrigger –∏—Å–ø–æ–ª—å–∑—É–µ—Ç timezone –∏–∑ scheduler; –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º UTC –∏ –¥–∞—ë–º offset –≤ —á–∞—Å–∞—Ö —á–µ—Ä–µ–∑ cron –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
    # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—ë–º CronTrigger –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π offset (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ).
    if t == "daily":
        trig = CronTrigger(hour=hh, minute=mm)
    elif t == "weekly":
        dow = parse_weekday_to_cron(rec.get("weekday"))
        trig = CronTrigger(day_of_week=dow, hour=hh, minute=mm)
    elif t == "monthly":
        day = int(rec.get("day"))
        trig = CronTrigger(day=day, hour=hh, minute=mm)
    else:
        return

    scheduler.add_job(
        send_reminder,
        trigger=trig,
        args=[app.bot, chat_id, title],
        id=f"rec:{chat_id}:{title}:{json.dumps(rec, ensure_ascii=False)}",
        replace_existing=False,
        misfire_grace_time=300,
    )

def save_reminder(chat_id: int, title: str, iso: str | None, rec: dict | None, tz: str):
    conn.execute(
        "INSERT INTO reminders (chat_id, title, iso, recurrence, created_at) VALUES (?,?,?,?,?)",
        (chat_id, title, iso, json.dumps({**(rec or {}), "tz": tz}, ensure_ascii=False) if rec else None, datetime.utcnow().isoformat())
    )
    conn.commit()

def list_future(chat_id: int):
    rows = conn.execute("SELECT id, title, iso, recurrence FROM reminders WHERE chat_id=? ORDER BY id DESC", (chat_id,)).fetchall()
    return rows

def delete_reminder(rem_id: int, chat_id: int) -> bool:
    cur = conn.execute("DELETE FROM reminders WHERE id=? AND chat_id=?", (rem_id, chat_id))
    conn.commit()
    return cur.rowcount > 0

# --------------------------- LLM ---------------------------
async def call_llm(user_text: str, tz: str, followup: bool = False) -> dict:
    now_iso = now_iso_with_offset(tz)
    sys_hint = f"NOW_ISO={now_iso}  TZ_DEFAULT={tz}"

    messages = [
        {"role": "system", "content": PROMPTS.system},
        {"role": "system", "content": sys_hint},
        {"role": "system", "content": PROMPTS.parse_system},
    ]
    # fewshot
    for ex in PROMPTS.fewshot:
        messages.append(ex)

    if followup:
        messages.append({"role": "system", "content": "–≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –í–µ—Ä–Ω–∏ —á–∏—Å—Ç—ã–π JSON."})

    messages.append({"role": "user", "content": user_text})

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.2,
        response_format={ "type": "json_object" }
    )
    try:
        data = json.loads(resp.choices[0].message.content)
        return data
    except Exception as e:
        log.exception("LLM parse error: %s", e)
        return {"intent": "chat", "title": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "fixed_datetime": None, "recurrence": None}

# --------------------------- handlers ---------------------------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tz = context.user_data.get("tz") or DEFAULT_TZ
    context.user_data["tz"] = tz
    await update.message.reply_text(
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: UTC{tz}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.\n\n"
        f"–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å–Ω–∏–∑—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É üëá",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")], [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
            resize_keyboard=True
        )
    )

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rows = list_future(chat_id)
    if not rows:
        await update.message.reply_text("–ë—É–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
        return
    lines = ["üóí –ë–ª–∏–∂–∞–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"]
    kb_rows = []
    for rid, title, iso, rec_json in rows:
        if iso:
            lines.append(f"‚Ä¢ {iso} ‚Äî ¬´{title}¬ª")
        else:
            r = json.loads(rec_json)
            t = r.get("time")
            typ = r.get("type")
            if typ == "daily":
                lines.append(f"‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t} ‚Äî ¬´{title}¬ª")
            elif typ == "weekly":
                lines.append(f"‚Ä¢ –ø–æ {r.get('weekday')} –≤ {t} ‚Äî ¬´{title}¬ª")
            else:
                lines.append(f"‚Ä¢ –∫–∞–∂–¥–æ–µ {r.get('day')} –≤ {t} ‚Äî ¬´{title}¬ª")
        kb_rows.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{rid}")])
    await update.message.reply_text("\n".join(lines), reply_markup=InlineKeyboardMarkup(kb_rows))

async def on_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = query.message.chat_id
    await query.answer()
    if data == "done":
        await query.edit_message_text("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return
    if data.startswith("snz:"):
        mins = int(data.split(":")[1])
        await query.edit_message_text(f"‚è∞ –û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {mins} –º–∏–Ω")
        asyncio.create_task(context.bot.send_message(chat_id, f"–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {mins} –º–∏–Ω."))
        # —Ç—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ¬´—Å–Ω—É–∑¬ª –∫–∞–∫ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –¥–∞—Ç—É
        return
    if data.startswith("del:"):
        rid = int(data.split(":")[1])
        if delete_reminder(rid, chat_id):
            await query.edit_message_text("üóë –£–¥–∞–ª–µ–Ω–æ")
        else:
            await query.edit_message_text("–ù–µ –Ω–∞—à—ë–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        return
    if data.startswith("clar:"):
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º —É—Ç–æ—á–Ω–µ–Ω–∏–∏
        idx = int(data.split(":")[1])
        c = context.user_data.get("clarify")
        if not c:
            return
        variants = c.get("variants") or []
        picked = variants[idx]
        original = c["original_text"]
        merged = f"{original}\n–û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ ({c['expects']}): {picked}"
        result = await call_llm(merged, context.user_data.get("tz", DEFAULT_TZ), followup=True)
        context.user_data.pop("clarify", None)
        await apply_llm_result(result, update, context, by_callback=True)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text in ("üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "/list"):
        await cmd_list(update, context)
        return
    if text in ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/settings"):
        await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return

    # –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    c = context.user_data.get("clarify")
    if c:
        answer = text
        original = c["original_text"]
        merged = f"{original}\n–û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ ({c['expects']}): {answer}"
        result = await call_llm(merged, context.user_data.get("tz", DEFAULT_TZ), followup=True)
        # –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ ask_clarification –∏ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å variants ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏
        if result.get("intent") == "ask_clarification":
            q = result.get("question") or "–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
            variants = result.get("variants") or []
            context.user_data["clarify"] = {
                "original_text": original,
                "expects": result.get("expects"),
                "question": q,
                "variants": variants
            }
            if variants:
                keyboard = [[InlineKeyboardButton(v, callback_data=f"clar:{i}")]
                            for i, v in enumerate(variants)]
                await update.message.reply_text(q, reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await update.message.reply_text(q)
            return
        context.user_data.pop("clarify", None)
        await apply_llm_result(result, update, context)
        return

    # –æ–±—ã—á–Ω–∞—è –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    result = await call_llm(text, context.user_data.get("tz", DEFAULT_TZ))
    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º
    if result.get("intent") == "ask_clarification":
        q = result.get("question") or "–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
        context.user_data["clarify"] = {
            "original_text": text,
            "expects": result.get("expects"),
            "question": q,
            "variants": result.get("variants") or []
        }
        await update.message.reply_text(q)
        return

    await apply_llm_result(result, update, context)

async def apply_llm_result(result: dict, update: Update, context: ContextTypes.DEFAULT_TYPE, by_callback: bool = False):
    chat_id = update.effective_chat.id
    tz = context.user_data.get("tz", DEFAULT_TZ)

    title = result.get("title") or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    iso = result.get("fixed_datetime")
    rec = result.get("recurrence")

    # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
    if iso:
        save_reminder(chat_id, title, iso, None, tz)
        add_one_shot_job(context.application, chat_id, title, iso)
        dt_short = iso.replace("T", " ")[:-3]
        await (update.callback_query.message.edit_text if by_callback else update.message.reply_text)(
            f"üìÖ –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é ¬´{title}¬ª {dt_short}"
        )
        return

    # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ
    if rec:
        save_reminder(chat_id, title, None, rec, tz)
        add_recurrence_job(context.application, chat_id, title, rec, tz)
        # –∫—Ä–∞—Å–∏–≤–∞—è –ø–æ–¥–ø–∏—Å—å
        if rec["type"] == "daily":
            when = f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {rec['time']}"
        elif rec["type"] == "weekly":
            when = f"–ø–æ {rec['weekday']} –≤ {rec['time']}"
        else:
            when = f"–∫–∞–∂–¥–æ–µ {rec['day']} —á–∏—Å–ª–æ –≤ {rec['time']}"
        await (update.callback_query.message.edit_text if by_callback else update.message.reply_text)(
            f"üìÖ –û–∫–µ–π, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å ¬´{title}¬ª {when}"
        )
        return

    # fallback
    await (update.callback_query.message.edit_text if by_callback else update.message.reply_text)(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
    )

# --------------------------- main ---------------------------
def main():
    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()
    # scheduler
    scheduler.start()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("list", cmd_list))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(on_buttons))

    log.info("Bot starting‚Ä¶ polling enabled")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
