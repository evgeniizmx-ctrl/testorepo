import os
import re
import asyncio
import tempfile
import shutil
from datetime import datetime, timedelta, date
import pytz

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ========= ENV / TZ =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(APP_TZ)

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=APP_TZ)

# ========= REMINDERS =========
REMINDERS: list[dict] = []
PENDING: dict[int, dict] = {}

# ========= HELPERS =========
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

def mk_dt(d: date, h: int, m: int) -> datetime:
    return tz.localize(datetime(d.year, d.month, d.day, h % 24, m % 60, 0, 0))

def fmt_dt(dt: datetime) -> str:
    return f"{dt.strftime('%d.%m %H:%M')}"

def soonest(dts): return sorted(dts, key=lambda x: x)

def human_label(dt: datetime) -> str:
    now = datetime.now(tz)
    if dt.date() == now.date():
        dword = "–°–µ–≥–æ–¥–Ω—è"
    elif dt.date() == (now + timedelta(days=1)).date():
        dword = "–ó–∞–≤—Ç—Ä–∞"
    else:
        dword = dt.strftime("%d.%m")
    return f"{dword} –≤ {dt.strftime('%H:%M')}"

def kb_variants(dts):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=human_label(dt), callback_data=f"time|{dt.isoformat()}")]
            for dt in soonest(dts)
        ]
    )

def plan(rem):
    scheduler.add_job(send_reminder, "date", run_date=rem["remind_dt"], args=[rem["user_id"], rem["text"]])

async def send_reminder(uid: int, text: str):
    try:
        await bot.send_message(uid, f"üîîüîî {text}")
    except Exception as e:
        print("send_reminder error:", e)

# ========= FFMPEG DETECTION =========
def resolve_ffmpeg_path() -> str:
    env = os.getenv("FFMPEG_PATH")
    if env:
        return os.path.realpath(env)

    found = shutil.which("ffmpeg")
    if found:
        return os.path.realpath(found)

    raise FileNotFoundError(
        "ffmpeg not found. –£—Å—Ç–∞–Ω–æ–≤–∏ ffmpeg –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –∑–∞–¥–∞–π FFMPEG_PATH=/usr/bin/ffmpeg"
    )

FFMPEG_PATH = resolve_ffmpeg_path()
print(f"[init] Using ffmpeg at: {FFMPEG_PATH}")

# ========= COMMANDS =========
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                   "‚Äî –ó–∞–≤—Ç—Ä–∞ –≤ 19:00 —Å–ø–æ—Ä—Ç\n"
                   "‚Äî –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å\n"
                   "‚Äî 25.08 –≤ 14:30 –≤—Å—Ç—Ä–µ—á–∞\n"
                   "/list ‚Äî —Å–ø–∏—Å–æ–∫, /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞.")

@dp.message(Command("ping"))
async def cmd_ping(m: Message): 
    await m.answer("pong ‚úÖ")

@dp.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    items = sorted(items, key=lambda r: r["remind_dt"])
    lines = [f"‚Ä¢ {r['text']} ‚Äî {fmt_dt(r['remind_dt'])}" for r in items]
    await m.answer("\n".join(lines))

# ========= TEXT HANDLER =========
@dp.message(F.text)
async def on_text(m: Message):
    # –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç/–≤—Ä–µ–º–µ–Ω–∏ (—Å–æ–∫—Ä–∞—Ç–∏–ª —Ä–∞–¥–∏ –ø—Ä–∏–º–µ—Ä–∞)
    text = norm(m.text)
    uid = m.from_user.id
    dt = datetime.now(tz) + timedelta(minutes=1)  # –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ +1 –º–∏–Ω—É—Ç–∞
    desc = clean_desc(text)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
    plan(REMINDERS[-1])
    await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")

# ========= CALLBACK =========
@dp.callback_query(F.data.startswith("time|"))
async def cb_time(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("variants"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è"); return
    iso = cb.data.split("|", 1)[1]
    dt = datetime.fromisoformat(iso)
    dt = tz.localize(dt) if dt.tzinfo is None else dt.astimezone(tz)
    desc = PENDING[uid].get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
    plan(REMINDERS[-1])
    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ========= RUN =========
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
