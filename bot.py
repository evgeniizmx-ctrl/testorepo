import os
import io
import json
import re
import asyncio
from datetime import datetime, timedelta
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ChatAction

import httpx
from dateutil import parser as dateparser
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ===================== –û–ö–†–£–ñ–ï–ù–ò–ï =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OCR_SPACE_API_KEY = os.getenv("OCR_SPACE_API_KEY")

TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(TZ)

print("ENV CHECK:",
      "BOT_TOKEN set:", bool(BOT_TOKEN),
      "OPENAI_API_KEY set:", bool(OPENAI_API_KEY),
      "OCR_SPACE_API_KEY set:", bool(OCR_SPACE_API_KEY))

# ===================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====================
print("STEP: creating Bot/Dispatcher...")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
print("STEP: Bot/Dispatcher OK")

scheduler = AsyncIOScheduler(timezone=TZ)

# –ü–∞–º—è—Ç—å (MVP)
# PENDING: user_id -> {
#   "description": str,
#   "repeat": str,
#   "variants": [datetime, ...]  # –µ—Å–ª–∏ –∂–¥—ë–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–Ω–æ–ø–æ–∫
# }
PENDING = {}
REMINDERS = []  # {user_id, text, remind_dt, repeat}

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
async def send_reminder(user_id: int, text: str):
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("Send reminder error:", e)

def schedule_one(reminder: dict):
    run_dt = reminder["remind_dt"]
    scheduler.add_job(send_reminder, "date", run_date=run_dt,
                      args=[reminder["user_id"], reminder["text"]])

def as_local_iso(dt_like: str | None) -> datetime | None:
    """–ü–∞—Ä—Å–∏–º –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤–∏–¥–∞ '25.08 14:25', '—Å–µ–≥–æ–¥–Ω—è 18:30', '2025-08-25 15:00' –∏ —Ç.–ø."""
    if not dt_like:
        return None
    try:
        dt = dateparser.parse(dt_like)
        if not dt:
            return None
        if dt.tzinfo is None:
            dt = tz.localize(dt)
        else:
            dt = dt.astimezone(tz)
        return dt.replace(second=0, microsecond=0)
    except Exception:
        return None

def normalize_spaces(s: str) -> str:
    return re.sub(r"\s+", " ", s, flags=re.UNICODE).strip()

def clean_description(desc: str) -> str:
    d = desc.strip()
    d = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", d, flags=re.IGNORECASE)
    d = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", d, flags=re.IGNORECASE)
    return d or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

# ---------- –†–û–ë–ê–°–¢–ù–´–ô –ü–ê–†–°–ï–† ¬´–ß–ï–†–ï–ó ‚Ä¶ / –°–ü–£–°–¢–Ø ‚Ä¶¬ª ----------
REL_NUM_PATTERNS = [
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫\.?)\b", "seconds"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω\.?)\b", "minutes"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(—á–∞—Å(?:–∞|–æ–≤)?|—á\.?)\b",     "hours"),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b","days"),
]
REL_SINGULAR_PATTERNS = [  # –±–µ–∑ —á–∏—Å–ª–∞ = 1
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+—Å–µ–∫—É–Ω–¥(?:—É)\b", "seconds", 1),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+–º–∏–Ω—É—Ç(?:—É|–∫—É)\b", "minutes", 1),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+—á–∞—Å\b", "hours", 1),
    (r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+–¥–µ–Ω—å\b", "days", 1),
]
REL_HALF_HOUR_RX = re.compile(r"(—á–µ—Ä–µ–∑)\s+–ø–æ–ª\s*—á–∞—Å–∞\b", re.IGNORECASE | re.UNICODE)
REL_NUM_REGEXES = [re.compile(p, re.IGNORECASE | re.UNICODE | re.DOTALL) for p, _ in REL_NUM_PATTERNS]
REL_SING_REGEXES = [(re.compile(p, re.IGNORECASE | re.UNICODE | re.DOTALL), kind, val)
                    for p, kind, val in REL_SINGULAR_PATTERNS]

def parse_relative_phrase(raw_text: str):
    s = normalize_spaces(raw_text)
    now = datetime.now(tz).replace(second=0, microsecond=0)

    m = REL_HALF_HOUR_RX.search(s)
    if m:
        dt = now + timedelta(minutes=30)
        remainder = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        print(f"[REL] '–ø–æ–ª—á–∞—Å–∞' ‚Üí {dt}")
        return dt, remainder

    for rx, kind, val in REL_SING_REGEXES:
        m = rx.search(s)
        if m:
            if kind == "seconds": dt = now + timedelta(seconds=val)
            elif kind == "minutes": dt = now + timedelta(minutes=val)
            elif kind == "hours": dt = now + timedelta(hours=val)
            elif kind == "days": dt = now + timedelta(days=val)
            remainder = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            print(f"[REL] {kind}=1 ‚Üí {dt}")
            return dt, remainder

    for rx, (_, kind) in zip(REL_NUM_REGEXES, REL_NUM_PATTERNS):
        m = rx.search(s)
        if not m:
            continue
        amount = int(m.group(2))
        if kind == "seconds": dt = now + timedelta(seconds=amount)
        elif kind == "minutes": dt = now + timedelta(minutes=amount)
        elif kind == "hours":   dt = now + timedelta(hours=amount)
        elif kind == "days":    dt = now + timedelta(days=amount)
        remainder = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        print(f"[REL] {kind}={amount} ‚Üí {dt}")
        return dt, remainder

    return None

# ---------- ¬´–í –≠–¢–û –ñ–ï –í–†–ï–ú–Ø¬ª ----------
SAME_TIME_RX = re.compile(r"\b–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è\b", re.IGNORECASE | re.UNICODE)
TOMORROW_RX = re.compile(r"\b–∑–∞–≤—Ç—Ä–∞\b", re.IGNORECASE | re.UNICODE)
AFTER_TOMORROW_RX = re.compile(r"\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b", re.IGNORECASE | re.UNICODE)
IN_N_DAYS_RX = re.compile(r"(—á–µ—Ä–µ–∑|—Å–ø—É—Å—Ç—è)\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.IGNORECASE | re.UNICODE)

def parse_same_time_phrase(raw_text: str):
    s = normalize_spaces(raw_text)
    if not SAME_TIME_RX.search(s):
        return None
    now = datetime.now(tz).replace(second=0, microsecond=0)
    days = None
    if AFTER_TOMORROW_RX.search(s): days = 2
    elif TOMORROW_RX.search(s):     days = 1
    else:
        m = IN_N_DAYS_RX.search(s)
        if m:
            try: days = int(m.group(2))
            except: days = None
    if days is None:
        return None
    target = (now + timedelta(days=days)).replace(hour=now.hour, minute=now.minute)
    remainder = s
    remainder = SAME_TIME_RX.sub("", remainder)
    remainder = TOMORROW_RX.sub("", remainder)
    remainder = AFTER_TOMORROW_RX.sub("", remainder)
    remainder = IN_N_DAYS_RX.sub("", remainder)
    remainder = remainder.strip(" ,.-")
    print(f"[SAME] +{days}d ‚Üí {target}")
    return target, remainder

# ---------- ¬´–°–ï–ì–û–î–ù–Ø/–ó–ê–í–¢–†–ê/–ü–û–°–õ–ï–ó–ê–í–¢–†–ê ‚Ä¶ –í HH[:MM] (—É—Ç—Ä–∞/–¥–Ω—è/–≤–µ—á–µ—Ä–∞/–Ω–æ—á–∏)¬ª ----------
# –¥–æ–ø—É—Å–∫–∞–µ–º –õ–Æ–ë–û–ô —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É ¬´–∑–∞–≤—Ç—Ä–∞¬ª –∏ ¬´–≤ 5¬ª: ¬´–∑–∞–≤—Ç—Ä–∞ —Å–≤–∞–¥—å–±–∞ –≤ 5¬ª
DAYTIME_RX = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏))?\b",
    re.IGNORECASE | re.UNICODE | re.DOTALL
)

def parse_daytime_phrase(raw_text: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      ("amb", remainder, [dt1, dt2])  ‚Äî –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ (–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∏)
      ("ok", dt, remainder)           ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
      None                            ‚Äî –Ω–µ —Å–æ–≤–ø–∞–ª–æ
    """
    s = normalize_spaces(raw_text)
    m = DAYTIME_RX.search(s)
    if not m:
        return None

    day_word = m.group(1).lower()
    hour_raw = int(m.group(2))
    minute = int(m.group(3) or 0)
    mer = (m.group(4) or "").lower()

    now = datetime.now(tz).replace(second=0, microsecond=0)
    if day_word == "—Å–µ–≥–æ–¥–Ω—è":
        base = now
    elif day_word == "–∑–∞–≤—Ç—Ä–∞":
        base = now + timedelta(days=1)
    else:
        base = now + timedelta(days=2)

    def clamp(h, mm):
        return max(0, min(h, 23)), max(0, min(mm, 59))

    remainder = (s[:m.start()] + s[m.end():]).strip(" ,.-")

    # –µ—Å—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Äî –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ
    if mer in ("—É—Ç—Ä–∞", "–¥–Ω—è", "–≤–µ—á–µ—Ä–∞", "–Ω–æ—á–∏"):
        h = hour_raw
        if mer in ("–¥–Ω—è", "–≤–µ—á–µ—Ä–∞"):
            if h < 12: h += 12
        elif mer == "–Ω–æ—á–∏":
            if h == 12: h = 0
        h, minute2 = clamp(h, minute)
        target = base.replace(hour=h, minute=minute2)
        print(f"[DAYTIME] exact {day_word} {h:02d}:{minute2:02d} ‚Üí {target}")
        return ("ok", target, remainder)

    # –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º 2 –∫–Ω–æ–ø–∫–∏ (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä)
    h1, m1 = clamp(hour_raw, minute)  # —É—Ç—Ä–æ
    dt1 = base.replace(hour=h1, minute=m1)

    if hour_raw == 12:
        h2 = 0  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è ¬´12¬ª ‚Äî 00:00
    else:
        h2 = (hour_raw + 12) % 24
    h2, m2 = clamp(h2, minute)
    dt2 = base.replace(hour=h2, minute=m2)

    print(f"[DAYTIME] ambiguous {day_word} {hour_raw}:{minute:02d} ‚Üí {dt1}, {dt2}")
    return ("amb", remainder, [dt1, dt2])

# ===================== OpenAI (GPT/Whisper) =====================
OPENAI_BASE = "https://api.openai.com/v1"

async def gpt_parse(text: str) -> dict:
    system = (
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
        "–í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON —Å –∫–ª—é—á–∞–º–∏: description, event_time, remind_time, repeat(daily|weekly|none), "
        "needs_clarification, clarification_question. "
        "–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ '–Ω–∞–ø–æ–º–Ω–∏ –∑–∞ X', –≤—ã—á–∏—Å–ª–∏ remind_time –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ event_time. "
        "–î–∞—Ç—ã/–≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:MM' (24h)."
    )
    payload = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": system},
            {"role": "user", "content": text}
        ],
        "temperature": 0
    }
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    async with httpx.AsyncClient(timeout=60) as client:
        r = await client.post(f"{OPENAI_BASE}/chat/completions", headers=headers, json=payload)
        r.raise_for_status()
        answer = r.json()["choices"][0]["message"]["content"]
    try:
        return json.loads(answer)
    except json.JSONDecodeError:
        return {
            "description": text,
            "event_time": "",
            "remind_time": "",
            "repeat": "none",
            "needs_clarification": True,
            "clarification_question": "–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08 14:25)."
        }

async def openai_whisper_bytes(ogg_bytes: bytes) -> str:
    headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
    files = {"file": ("voice.ogg", ogg_bytes, "audio/ogg"),
             "model": (None, "whisper-1"),
             "language": (None, "ru")}
    async with httpx.AsyncClient(timeout=120) as client:
        r = await client.post(f"{OPENAI_BASE}/audio/transcriptions", headers=headers, files=files)
        r.raise_for_status()
        return r.json().get("text", "").strip()

# ===================== OCR.Space =====================
async def ocr_space_image(bytes_png: bytes) -> str:
    url = "https://api.ocr.space/parse/image"
    data = {"apikey": OCR_SPACE_API_KEY, "language": "rus", "OCREngine": 2}
    files = {"file": ("image.png", bytes_png, "image/png")}
    async with httpx.AsyncClient(timeout=120) as client:
        r = await client.post(url, data=data, files=files)
        r.raise_for_status()
        js = r.json()
    try:
        return js["ParsedResults"][0]["ParsedText"].strip()
    except Exception:
        return ""

# ===================== –•–ï–ù–î–õ–ï–†–´ =====================
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "‚Ä¢ –ü–∏—à–∏: ¬´–ó–∞–ø–∏—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É —Å–µ–≥–æ–¥–Ω—è 14:25¬ª, ¬´–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –ø–æ–º—ã—Ç—å—Å—è¬ª, "
        "¬´–∑–∞–≤—Ç—Ä–∞ —Å–≤–∞–¥—å–±–∞ –≤ 5¬ª ‚Äî –µ—Å–ª–∏ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂—É –∫–Ω–æ–ø–∫–∏.\n"
        "‚Ä¢ –ü—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ/—Å–∫—Ä–∏–Ω ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é.\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, –∂–∏–≤ –ª–∏ –±–æ—Ç.\n"
        "‚Ä¢ /list ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏)."
    )

@dp.message(Command("ping"))
async def ping(message: Message):
    await message.answer("pong ‚úÖ")

@dp.message(Command("list"))
async def list_cmd(message: Message):
    uid = message.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
        return
    lines = []
    for r in items:
        lines.append(
            f"‚Ä¢ {r['text']} ‚Äî {r['remind_dt'].strftime('%d.%m %H:%M')} ({TZ}) "
            + (f"[{r['repeat']}]" if r['repeat']!='none' else "")
        )
    await message.answer("\n".join(lines))

# ---- –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ----
@dp.message(F.text)
async def on_any_text(message: Message):
    uid = message.from_user.id
    raw_text = message.text or ""
    text = normalize_spaces(raw_text)

    # 1) –µ—Å–ª–∏ –∂–¥—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    if uid in PENDING:
        # –µ—Å–ª–∏ —É–∂–µ –∂–¥—ë–º –≤—ã–±–æ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å–∏–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
        if PENDING[uid].get("variants"):
            await message.reply("–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è ‚¨áÔ∏è")
            return

        # –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è
        pack = parse_daytime_phrase(text)
        if pack:
            tag = pack[0]
            if tag == "amb":
                _, remainder, variants = pack
                desc = clean_description(remainder or text)
                PENDING[uid] = {"description": desc, "variants": variants, "repeat": "none"}
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=dt.strftime("%d.%m %H:%M"),
                                          callback_data=f"time|{dt.isoformat()}")]
                    for dt in variants
                ])
                await message.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?", reply_markup=kb)
                return
            else:
                _, dt, remainder = pack
                draft = PENDING.pop(uid)
                desc = clean_description(remainder or draft.get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
                reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": draft.get("repeat","none")}
                REMINDERS.append(reminder)
                schedule_one(reminder)
                await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
                return

        rel = parse_relative_phrase(text)
        if rel:
            dt, remainder = rel
            draft = PENDING.pop(uid)
            desc = clean_description(remainder or draft.get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
            reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": draft.get("repeat","none")}
            REMINDERS.append(reminder)
            schedule_one(reminder)
            await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
            return

        same = parse_same_time_phrase(text)
        if same:
            dt, remainder = same
            draft = PENDING.pop(uid)
            desc = clean_description(remainder or draft.get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
            reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": draft.get("repeat","none")}
            REMINDERS.append(reminder)
            schedule_one(reminder)
            await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
            return

        dt = as_local_iso(text)
        if dt:
            draft = PENDING.pop(uid)
            desc = clean_description(draft.get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
            reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": draft.get("repeat","none")}
            REMINDERS.append(reminder)
            schedule_one(reminder)
            await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
            return

        await message.reply("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ —Å–≤–∞–¥—å–±–∞ –≤ 5¬ª, ¬´—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É¬ª –∏–ª–∏ ¬´25.08 14:25¬ª.")
        return

    # 2) –Ω–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî –ø–æ—Ä—è–¥–æ–∫: daytime ‚Üí relative ‚Üí same-time ‚Üí GPT
    pack = parse_daytime_phrase(text)
    if pack:
        tag = pack[0]
        if tag == "amb":
            _, remainder, variants = pack
            desc = clean_description(remainder or text)
            PENDING[uid] = {"description": desc, "variants": variants, "repeat": "none"}
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=dt.strftime("%d.%m %H:%M"),
                                      callback_data=f"time|{dt.isoformat()}")]
                for dt in variants
            ])
            await message.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?", reply_markup=kb)
            return
        else:
            _, dt, remainder = pack
            desc = clean_description(remainder or text)
            reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"}
            REMINDERS.append(reminder)
            schedule_one(reminder)
            await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
            return

    rel = parse_relative_phrase(text)
    if rel:
        dt, remainder = rel
        desc = clean_description(remainder or text)
        reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"}
        REMINDERS.append(reminder)
        schedule_one(reminder)
        await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
        return

    same = parse_same_time_phrase(text)
    if same:
        dt, remainder = same
        desc = clean_description(remainder or text)
        reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"}
        REMINDERS.append(reminder)
        schedule_one(reminder)
        await message.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
        return

    # 3) –∏–Ω–∞—á–µ ‚Äî GPT
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    plan = await gpt_parse(text)

    desc = clean_description(plan.get("description") or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    repeat = (plan.get("repeat") or "none").lower()
    remind_iso = plan.get("remind_time") or plan.get("event_time")
    remind_dt = as_local_iso(remind_iso)

    if plan.get("needs_clarification") or not remind_dt:
        question = plan.get("clarification_question") or "–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 5¬ª, ¬´—á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç¬ª –∏–ª–∏ 25.08 14:25):"
        PENDING[uid] = {"description": desc, "repeat": "none"}
        await message.reply(question)
        return

    reminder = {"user_id": uid, "text": desc, "remind_dt": remind_dt,
                "repeat": "none" if repeat not in ("daily","weekly") else repeat}
    REMINDERS.append(reminder)
    schedule_one(reminder)
    await message.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {remind_dt.strftime('%d.%m %H:%M')} ({TZ})")

# ---- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ ----
@dp.callback_query(F.data.startswith("time|"))
async def on_time_choice(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("variants"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è")
        return
    try:
        iso = cb.data.split("|", 1)[1]
        dt = datetime.fromisoformat(iso)
        if dt.tzinfo is None:
            dt = tz.localize(dt)
        else:
            dt = dt.astimezone(tz)
    except Exception as e:
        print("time| parse error:", e)
        await cb.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
        return

    desc = PENDING[uid].get("description", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)

    reminder = {"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"}
    REMINDERS.append(reminder)
    schedule_one(reminder)

    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({TZ})")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ---- –≤–æ–π—Å—ã ----
@dp.message(F.voice)
async def on_voice(message: Message):
    await bot.send_chat_action(message.chat.id, ChatAction.RECORD_VOICE)
    file = await bot.get_file(message.voice.file_id)
    buf = await bot.download_file(file.file_path)
    buf.seek(0)
    text = await openai_whisper_bytes(buf.read())
    if not text:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await on_any_text(Message.model_construct(**{**message.model_dump(), "text": text}))

# ---- —Ñ–æ—Ç–æ/–¥–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º ----
@dp.message(F.photo | F.document)
async def on_image(message: Message):
    await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)

    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document and str(message.document.mime_type).startswith("image/"):
        file_id = message.document.file_id
    else:
        await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω) —Å —Ç–µ–∫—Å—Ç–æ–º.")
        return

    file = await bot.get_file(file_id)
    buf = await bot.download_file(file.file_path)
    buf.seek(0)
    text = await ocr_space_image(buf.read())
    if not text:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
        return
    await on_any_text(Message.model_construct(**{**message.model_dump(), "text": text}))

# ===================== –ó–ê–ü–£–°–ö =====================
async def main():
    print("STEP: starting scheduler...")
    scheduler.start()
    print("STEP: scheduler started")
    print("STEP: start polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("STEP: asyncio.run(main())")
        asyncio.run(main())
    except Exception as e:
        import traceback, time
        print("FATAL:", e)
        traceback.print_exc()
        time.sleep(120)
        raise
