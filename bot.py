# bot.py
import os
import re
import json
import sqlite3
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.cron import CronTrigger

from dateutil import parser as dparser

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# -------- OpenAI ------------
from openai import OpenAI
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# ---------- ENV -------------
BOT_TOKEN = os.environ.get("BOT_TOKEN") or os.environ.get("TELEGRAM_TOKEN")
PROMPTS_PATH = os.environ.get("PROMPTS_PATH", "prompts.yaml")

# ---------- DB --------------
DB_PATH = os.environ.get("DB_PATH", "reminders.db")

def db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def db_init():
    with db() as conn:
        conn.execute("""
            create table if not exists users (
                user_id integer primary key,
                tz text
            )
        """)
        conn.execute("""
            create table if not exists reminders (
                id integer primary key autoincrement,
                user_id integer not null,
                title text not null,
                body text,
                when_iso text,
                status text default 'scheduled',
                kind text default 'oneoff',            -- 'oneoff' | 'recurring'
                recurrence_json text                   -- nullable, JSON —Å {type,weekday,day,time,tz}
            )
        """)
        # –ú—è–≥–∫–∏–µ ALTER—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try: conn.execute("alter table reminders add column kind text default 'oneoff'")
        except Exception: pass
        try: conn.execute("alter table reminders add column recurrence_json text")
        except Exception: pass
        conn.commit()

def db_get_user_tz(user_id: int) -> str | None:
    with db() as conn:
        row = conn.execute("select tz from users where user_id=?", (user_id,)).fetchone()
        return row["tz"] if row and row["tz"] else None

def db_set_user_tz(user_id: int, tz: str):
    with db() as conn:
        conn.execute(
            "insert into users(user_id, tz) values(?, ?) "
            "on conflict(user_id) do update set tz=excluded.tz",
            (user_id, tz)
        )
        conn.commit()

def db_add_reminder_oneoff(user_id: int, title: str, body: str | None, when_iso: str) -> int:
    with db() as conn:
        cur = conn.execute(
            "insert into reminders(user_id,title,body,when_iso,kind) values(?,?,?,?,?)",
            (user_id, title, body, when_iso, 'oneoff')
        )
        conn.commit()
        return cur.lastrowid

def db_add_reminder_recurring(user_id: int, title: str, body: str | None, recurrence: dict, tz: str) -> int:
    rec = dict(recurrence or {})
    rec["tz"] = tz
    with db() as conn:
        cur = conn.execute(
            "insert into reminders(user_id,title,body,when_iso,kind,recurrence_json) values(?,?,?,?,?,?)",
            (user_id, title, body, None, 'recurring', json.dumps(rec, ensure_ascii=False))
        )
        conn.commit()
        return cur.lastrowid

def db_mark_done(rem_id: int):
    with db() as conn:
        conn.execute("update reminders set status='done' where id=?", (rem_id,))
        conn.commit()

def db_snooze(rem_id: int, minutes: int):
    with db() as conn:
        row = conn.execute("select when_iso, kind from reminders where id=?", (rem_id,)).fetchone()
        if not row:
            return None, None
        if row["kind"] == "recurring":
            # –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö ‚Äî –≤–µ—Ä–Ω—ë–º None (—Å–¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π snooze-–¥–∂–æ–± –Ω–∏–∂–µ)
            return "recurring", None
        dt = parse_iso_flexible(row["when_iso"]) + timedelta(minutes=minutes)
        new_iso = iso_no_seconds(dt)
        conn.execute("update reminders set when_iso=?, status='scheduled' where id=?", (new_iso, rem_id))
        conn.commit()
        return "oneoff", dt

def db_delete(rem_id: int):
    with db() as conn:
        conn.execute("delete from reminders where id=?", (rem_id,))
        conn.commit()

def db_future(user_id: int):
    with db() as conn:
        rows = conn.execute(
            "select * from reminders where user_id=? and status='scheduled' order by id desc",
            (user_id,)
        ).fetchall()
        return rows

def db_get_reminder(rem_id: int):
    with db() as conn:
        return conn.execute("select * from reminders where id=?", (rem_id,)).fetchone()

# ---------- TZ utils --------
def tzinfo_from_user(tz_str: str) -> timezone | ZoneInfo:
    if not tz_str:
        return timezone(timedelta(hours=3))
    tz_str = tz_str.strip()
    if tz_str[0] in "+-":
        m = re.fullmatch(r"([+-])(\d{1,2})(?::?(\d{2}))?", tz_str)
        if not m:
            return timezone(timedelta(hours=3))
        sign, hh, mm = m.group(1), int(m.group(2)), int(m.group(3) or 0)
        delta = timedelta(hours=hh, minutes=mm)
        if sign == "-":
            delta = -delta
        return timezone(delta)
    try:
        return ZoneInfo(tz_str)
    except Exception:
        return timezone(timedelta(hours=3))

def now_in_user_tz(tz_str: str) -> datetime:
    return datetime.now(tzinfo_from_user(tz_str))

def iso_no_seconds(dt: datetime) -> str:
    dt = dt.replace(microsecond=0)
    s = dt.isoformat()
    s = re.sub(r":\d{2}([+-Z])", r"\1", s) if re.search(r"T\d{2}:\d{2}:\d{2}", s) else s
    return s

def parse_iso_flexible(s: str) -> datetime:
    return dparser.isoparse(s)

# ---------- UI: Keyboards ---
MAIN_MENU_KB = ReplyKeyboardMarkup(
    [[KeyboardButton("üìù –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]],
    resize_keyboard=True, one_time_keyboard=False
)

_TZ_ROWS = [
    ["–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (+2)", "–ú–æ—Å–∫–≤–∞ (+3)"],
    ["–°–∞–º–∞—Ä–∞ (+4)", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (+5)"],
    ["–û–º—Å–∫ (+6)", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (+7)"],
    ["–ò—Ä–∫—É—Ç—Å–∫ (+8)", "–Ø–∫—É—Ç—Å–∫ (+9)"],
    ["–•–∞–±–∞—Ä–æ–≤—Å–∫ (+10)", "–î—Ä—É–≥–æ–π‚Ä¶"],
]
TZ_KB = ReplyKeyboardMarkup([[KeyboardButton(x) for x in row] for row in _TZ_ROWS],
                            resize_keyboard=True, one_time_keyboard=True)

CITY_TO_OFFSET = {
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (+2)": "+02:00",
    "–ú–æ—Å–∫–≤–∞ (+3)": "+03:00",
    "–°–∞–º–∞—Ä–∞ (+4)": "+04:00",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (+5)": "+05:00",
    "–û–º—Å–∫ (+6)": "+06:00",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (+7)": "+07:00",
    "–ò—Ä–∫—É—Ç—Å–∫ (+8)": "+08:00",
    "–Ø–∫—É—Ç—Å–∫ (+9)": "+09:00",
    "–•–∞–±–∞—Ä–æ–≤—Å–∫ (+10)": "+10:00",
}

# ---------- Prompts ---------
import yaml
def load_prompts():
    with open(PROMPTS_PATH, "r", encoding="utf-8") as f:
        raw = yaml.safe_load(f)
    return raw

PROMPTS = load_prompts()

# ---------- LLM ------------
async def call_llm(user_text: str, user_tz: str) -> dict:
    now_local = now_in_user_tz(user_tz)
    now_iso = iso_no_seconds(now_local)
    header = f"NOW_ISO={now_iso}\nTZ_DEFAULT={user_tz or '+03:00'}"

    messages = [
        {"role": "system", "content": PROMPTS["system"]},
        {"role": "system", "content": header},
        {"role": "system", "content": PROMPTS["parse"]["system"]},
    ]

    few = PROMPTS.get("fewshot") or []
    messages.extend(few)

    messages.append({"role": "user", "content": user_text})

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.2
    )
    txt = resp.choices[0].message.content.strip()
    try:
        return json.loads(txt)
    except Exception:
        m = re.search(r"\{[\s\S]+\}", txt)
        if m:
            return json.loads(m.group(0))
        raise

# ---------- Scheduler -------
scheduler = AsyncIOScheduler()

async def fire_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    data = job.data  # dict
    chat_id = data["chat_id"]
    rem_id = data["rem_id"]
    title = data["title"]
    kind = data.get("kind", "oneoff")

    kb_rows = [[
        InlineKeyboardButton("–ß–µ—Ä–µ–∑ 10 –º–∏–Ω", callback_data=f"snooze:10:{rem_id}"),
        InlineKeyboardButton("–ß–µ—Ä–µ–∑ 1 —á–∞—Å", callback_data=f"snooze:60:{rem_id}")
    ]]
    if kind == "oneoff":
        kb_rows.append([InlineKeyboardButton("‚úÖ", callback_data=f"done:{rem_id}")])

    await context.bot.send_message(chat_id, f"üîî ¬´{title}¬ª", reply_markup=InlineKeyboardMarkup(kb_rows))

# schedule helpers
def schedule_oneoff(rem_id: int, user_id: int, when_iso: str, title: str, kind: str = "oneoff"):
    dt = parse_iso_flexible(when_iso)
    scheduler.add_job(
        fire_reminder,
        trigger=DateTrigger(run_date=dt),
        id=f"rem-{rem_id}",
        replace_existing=True,
        misfire_grace_time=60,
        coalesce=True,
        name=f"rem {rem_id}",
    )
    job = scheduler.get_job(f"rem-{rem_id}")
    if job:
        job.data = {"chat_id": user_id, "rem_id": rem_id, "title": title, "kind": kind}

def schedule_recurring(rem_id: int, user_id: int, title: str, recurrence: dict, tz_str: str):
    tzinfo = tzinfo_from_user(tz_str)
    rtype = recurrence.get("type")
    time_str = recurrence.get("time")  # "HH:MM"
    hh, mm = map(int, time_str.split(":"))
    trigger = None
    if rtype == "daily":
        trigger = CronTrigger(hour=hh, minute=mm, timezone=tzinfo)
    elif rtype == "weekly":
        wd = recurrence.get("weekday")  # mon..sun
        # CronTrigger uses mon..sun as 'mon'.. 'sun'
        trigger = CronTrigger(day_of_week=wd, hour=hh, minute=mm, timezone=tzinfo)
    elif rtype == "monthly":
        day = int(recurrence.get("day"))
        trigger = CronTrigger(day=day, hour=hh, minute=mm, timezone=tzinfo)
    else:
        return

    scheduler.add_job(
        fire_reminder,
        trigger=trigger,
        id=f"rem-{rem_id}",
        replace_existing=True,
        misfire_grace_time=300,
        coalesce=True,
        name=f"rem {rem_id}",
    )
    job = scheduler.get_job(f"rem-{rem_id}")
    if job:
        job.data = {"chat_id": user_id, "rem_id": rem_id, "title": title, "kind": "recurring"}

# ---------- Handlers --------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tz = db_get_user_tz(user_id)
    if not tz:
        await update.message.reply_text(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
            "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å:\n"
            "‚Ä¢ —Å–º–µ—â–µ–Ω–∏–µ: +03:00\n"
            "‚Ä¢ –∏–ª–∏ IANA-–∑–æ–Ω—É: Europe/Moscow",
            reply_markup=TZ_KB
        )
        return
    await update.message.reply_text(
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.",
        reply_markup=MAIN_MENU_KB
    )

async def try_handle_tz_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if not update.message or not update.message.text:
        return False
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if text in CITY_TO_OFFSET:
        tz = CITY_TO_OFFSET[text]
    elif text == "–î—Ä—É–≥–æ–π‚Ä¶":
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∞ +03:00 –∏–ª–∏ IANA –∑–æ–Ω—É (Europe/Moscow).")
        return True
    else:
        try:
            _ = tzinfo_from_user(text)
            tz = text
        except Exception:
            return False

    db_set_user_tz(user_id, tz)
    await update.message.reply_text(
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.",
        reply_markup=MAIN_MENU_KB
    )
    return True

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    rows = db_future(user_id)
    if not rows:
        await update.message.reply_text("–ë—É–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.", reply_markup=MAIN_MENU_KB)
        return

    lines = ["üóì –ë–ª–∏–∂–∞–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî"]
    kb_rows = []
    tz = db_get_user_tz(user_id) or "+03:00"
    for r in rows:
        title = r["title"]
        kind = r["kind"] or "oneoff"
        if kind == "oneoff" and r["when_iso"]:
            dt_local = parse_iso_flexible(r["when_iso"]).astimezone(tzinfo_from_user(tz))
            line = f"‚Ä¢ {dt_local.strftime('%d.%m –≤ %H:%M')} ‚Äî ¬´{title}¬ª"
        else:
            # –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
            rec = json.loads(r["recurrence_json"]) if r["recurrence_json"] else {}
            rtype = rec.get("type")
            if rtype == "daily":
                line = f"‚Ä¢ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {rec.get('time')} ‚Äî ¬´{title}¬ª"
            elif rtype == "weekly":
                line = f"‚Ä¢ –ö–∞–∂–¥—É—é {rec.get('weekday')} –≤ {rec.get('time')} ‚Äî ¬´{title}¬ª"
            else:
                line = f"‚Ä¢ –ö–∞–∂–¥–æ–µ {rec.get('day')}-–µ –≤ {rec.get('time')} ‚Äî ¬´{title}¬ª"
        lines.append(line)
        kb_rows.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{r['id']}")])

    text = "\n".join(lines)
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb_rows))

# ---- callbacks
async def cb_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""

    if data.startswith("del:"):
        rem_id = int(data.split(":")[1])
        db_delete(rem_id)
        # –æ—Å—Ç–∞–Ω–æ–≤–∏–º –¥–∂–æ–±
        job = scheduler.get_job(f"rem-{rem_id}")
        if job: job.remove()
        await q.edit_message_text("–£–¥–∞–ª–µ–Ω–æ ‚úÖ")
        return

    if data.startswith("snooze:"):
        _, mins, rem_id = data.split(":")
        rem_id = int(rem_id); mins = int(mins)
        kind, dt = db_snooze(rem_id, mins)
        row = db_get_reminder(rem_id)
        if not row:
            await q.edit_message_text("–û—à–∏–±–∫–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        if kind == "oneoff":
            schedule_oneoff(rem_id, row["user_id"], row["when_iso"], row["title"], kind="oneoff")
            await q.edit_message_text(f"‚è≤ –û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {mins} –º–∏–Ω.")
        else:
            # –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ ‚Äî —Å–æ–∑–¥–∞—ë–º —Ä–∞–∑–æ–≤–æ–µ ¬´snooze-rem-{id}¬ª
            when = iso_no_seconds(datetime.now(timezone.utc) + timedelta(minutes=mins))
            tmp_job_id = f"snooze-{rem_id}"
            scheduler.add_job(
                fire_reminder,
                trigger=DateTrigger(run_date=parse_iso_flexible(when)),
                id=tmp_job_id,
                replace_existing=True,
                misfire_grace_time=60,
                coalesce=True,
                name=f"snooze {rem_id}",
            )
            job = scheduler.get_job(tmp_job_id)
            if job:
                job.data = {"chat_id": row["user_id"], "rem_id": rem_id, "title": row["title"], "kind": "oneoff"}
            await q.edit_message_text(f"‚è≤ –û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {mins} –º–∏–Ω. (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ)")
        return

    if data.startswith("done:"):
        rem_id = int(data.split(":")[1])
        db_mark_done(rem_id)
        job = scheduler.get_job(f"rem-{rem_id}")
        if job: job.remove()
        await q.edit_message_text("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return

async def cb_pick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º: pick:ISO ‚Äî —Å–æ–∑–¥–∞—ë—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if data.startswith("pick:"):
        iso = data.split("pick:")[1]
        user_id = q.message.chat_id
        title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        rem_id = db_add_reminder_oneoff(user_id, title, None, iso)
        schedule_oneoff(rem_id, user_id, iso, title, kind="oneoff")
        tz = db_get_user_tz(user_id) or "+03:00"
        dt_local = parse_iso_flexible(iso).astimezone(tzinfo_from_user(tz))
        await q.edit_message_text(f"üìÖ –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é ¬´{title}¬ª {dt_local.strftime('%d.%m –≤ %H:%M')}")

async def cb_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º: answer:<text> ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if not data.startswith("answer:"):
        return
    choice = data.split("answer:", 1)[1]
    # –¥—ë—Ä–Ω–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º" –∞–ø–¥–µ–π—Ç–æ–º
    # –ø–æ–ª–æ–∂–∏–º –≤ context.user_data —Ñ–ª–∞–≥ auto_answer
    context.user_data["__auto_answer"] = choice
    await handle_text(update, context)

# ---------- Clarification memory ----------
def get_clarify_state(context: ContextTypes.DEFAULT_TYPE):
    return context.user_data.get("clarify_state")

def set_clarify_state(context: ContextTypes.DEFAULT_TYPE, state: dict | None):
    if state is None:
        context.user_data.pop("clarify_state", None)
    else:
        context.user_data["clarify_state"] = state

# ---------- main text handler ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await try_handle_tz_input(update, context):
        return

    user_id = update.effective_user.id
    incoming_text = (context.user_data.pop("__auto_answer", None)
                     or (update.message.text.strip() if update.message and update.message.text else ""))

    # –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é
    if incoming_text == "üìù –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" or incoming_text.lower() == "/list":
        return await cmd_list(update, context)
    if incoming_text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" or incoming_text.lower() == "/settings":
        return await update.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=MAIN_MENU_KB)

    user_tz = db_get_user_tz(user_id)
    if not user_tz:
        if update.message:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.", reply_markup=TZ_KB)
        return

    # –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π
    cstate = get_clarify_state(context)
    if cstate:
        # –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç
        composed = f"–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞—è–≤–∫–∞: {cstate['original']}\n–û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: {incoming_text}"
        user_text_for_llm = composed
    else:
        user_text_for_llm = incoming_text

    try:
        result = await call_llm(user_text_for_llm, user_tz)
    except Exception:
        if update.message:
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è–ª. –°–∫–∞–∂–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 15 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ¬ª.")
        return

    intent = result.get("intent")

    # ===== ASK CLARIFICATION =====
    if intent == "ask_clarification":
        question = result.get("question") or "–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        variants = result.get("variants") or []
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è 2-—Ö —à–∞–≥–æ–≤
        original = cstate['original'] if cstate else (result.get("text_original") or incoming_text)
        set_clarify_state(context, {"original": original})

        # –ö–Ω–æ–ø–∫–∏: –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ ISO-–≤–∞—Ä–∏–∞–Ω—Ç—ã (iso_datetime) —Ç–∞–∫ –∏ —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
        kb_rows = []
        for v in variants[:6]:
            if isinstance(v, dict):
                label = v.get("label") or v.get("text") or v.get("iso_datetime") or "–í—ã–±—Ä–∞—Ç—å"
                iso = v.get("iso_datetime")
                if iso:
                    kb_rows.append([InlineKeyboardButton(label, callback_data=f"pick:{iso}")])
                else:
                    kb_rows.append([InlineKeyboardButton(label, callback_data=f"answer:{label}")])
            else:
                kb_rows.append([InlineKeyboardButton(str(v), callback_data=f"answer:{v}")])

        if update.message:
            await update.message.reply_text(question,
                                            reply_markup=InlineKeyboardMarkup(kb_rows) if kb_rows else None)
        else:
            await update.effective_chat.send_message(question,
                                                     reply_markup=InlineKeyboardMarkup(kb_rows) if kb_rows else None)
        return

    # ===== CREATE REMINDER =====
    if intent == "create_reminder":
        set_clarify_state(context, None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

        title = result.get("title") or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        body = result.get("description")
        dt_iso = result.get("fixed_datetime")
        recurrence = result.get("recurrence")

        if recurrence:
            # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ
            rem_id = db_add_reminder_recurring(user_id, title, body, recurrence, user_tz)
            schedule_recurring(rem_id, user_id, title, recurrence, user_tz)
            # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            rtype = recurrence.get("type")
            if rtype == "daily":
                text = f"üìÖ –û–∫–µ–π, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å ¬´{title}¬ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {recurrence.get('time')}"
            elif rtype == "weekly":
                text = f"üìÖ –û–∫–µ–π, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å ¬´{title}¬ª –∫–∞–∂–¥—É—é {recurrence.get('weekday')} –≤ {recurrence.get('time')}"
            else:
                text = f"üìÖ –û–∫–µ–π, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å ¬´{title}¬ª –∫–∞–∂–¥–æ–µ {recurrence.get('day')}-–µ —á–∏—Å–ª–æ –≤ {recurrence.get('time')}"
            if update.message:
                await update.message.reply_text(text, reply_markup=MAIN_MENU_KB)
            else:
                await update.effective_chat.send_message(text, reply_markup=MAIN_MENU_KB)
            return

        if not dt_iso:
            if update.message:
                await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Å–µ–≥–æ–¥–Ω—è 18:30¬ª.")
            return

        # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
        dt = parse_iso_flexible(dt_iso)
        dt_iso_clean = iso_no_seconds(dt)
        rem_id = db_add_reminder_oneoff(user_id, title, body, dt_iso_clean)
        schedule_oneoff(rem_id, user_id, dt_iso_clean, title, kind="oneoff")

        tz = db_get_user_tz(user_id) or "+03:00"
        dt_local = parse_iso_flexible(dt_iso_clean).astimezone(tzinfo_from_user(tz))
        text = f"üìÖ –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é ¬´{title}¬ª {dt_local.strftime('%d.%m –≤ %H:%M')}"
        if update.message:
            await update.message.reply_text(text, reply_markup=MAIN_MENU_KB)
        else:
            await update.effective_chat.send_message(text, reply_markup=MAIN_MENU_KB)
        return

    # ===== fallback =====
    set_clarify_state(context, None)
    if update.message:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=MAIN_MENU_KB)

# ---------- main -----------
def main():
    db_init()
    app = Application.builder().token(BOT_TOKEN).build()

    # Scheduler
    scheduler.start()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("list", cmd_list))
    app.add_handler(CommandHandler("settings", lambda u,c: u.message.reply_text("–†–∞–∑–¥–µ–ª ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=MAIN_MENU_KB)))

    app.add_handler(CallbackQueryHandler(cb_inline, pattern=r"^(del:|done:|snooze:)"))
    app.add_handler(CallbackQueryHandler(cb_pick, pattern=r"^pick:"))
    app.add_handler(CallbackQueryHandler(cb_answer, pattern=r"^answer:"))

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
