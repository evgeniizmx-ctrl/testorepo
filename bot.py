# bot.py
import asyncio
import json
import logging
import os
import re
import sqlite3
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, List

from zoneinfo import ZoneInfo

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# OpenAI (pip install openai==1.40.0)
from openai import OpenAI

# APScheduler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

import yaml

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
)
log = logging.getLogger("bot")

# ========= ENV & CLIENTS =========
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
PROMPTS_PATH = os.getenv("PROMPTS_PATH", "prompts.yaml")
MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

if not BOT_TOKEN:
    raise RuntimeError("No BOT_TOKEN/TELEGRAM_TOKEN in env")

# OpenAI
oi = OpenAI(api_key=OPENAI_API_KEY)

# ========= DB (fallback, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Å—Ç–æ—Ä–µ–¥–∂) =========
DB_PATH = os.getenv("DB_PATH", "data.db")

def db_connect():
    con = sqlite3.connect(DB_PATH)
    con.execute(
        """
        CREATE TABLE IF NOT EXISTS user_prefs(
          user_id INTEGER PRIMARY KEY,
          tz TEXT
        )
        """
    )
    con.execute(
        """
        CREATE TABLE IF NOT EXISTS reminders(
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          title TEXT NOT NULL,
          iso TEXT NOT NULL,
          tz TEXT,
          done INTEGER DEFAULT 0
        )
        """
    )
    con.commit()
    return con

DB = db_connect()

def db_get_tz(user_id: int) -> Optional[str]:
    cur = DB.execute("SELECT tz FROM user_prefs WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    return row[0] if row and row[0] else None

def db_set_tz(user_id: int, tz: str) -> None:
    DB.execute(
        "INSERT INTO user_prefs(user_id, tz) VALUES(?, ?) ON CONFLICT(user_id) DO UPDATE SET tz=excluded.tz",
        (user_id, tz),
    )
    DB.commit()

def db_add_reminder(user_id: int, title: str, iso: str, tz: Optional[str]) -> int:
    cur = DB.execute(
        "INSERT INTO reminders(user_id, title, iso, tz, done) VALUES(?,?,?,?,0)",
        (user_id, title, iso, tz or ""),
    )
    DB.commit()
    return cur.lastrowid

def db_mark_done(rem_id: int) -> None:
    DB.execute("UPDATE reminders SET done=1 WHERE id=?", (rem_id,))
    DB.commit()

def db_list_future(user_id: int) -> List[sqlite3.Row]:
    DB.row_factory = sqlite3.Row
    cur = DB.execute(
        "SELECT id, title, iso, tz, done FROM reminders WHERE user_id=? AND done=0 ORDER BY iso ASC",
        (user_id,),
    )
    return cur.fetchall()

# ========= PROMPTS =========
@dataclass
class PromptPack:
    system: str
    parse: List[Dict[str, str]]  # few-shot list: [{'role':'user'|'assistant', 'content': '...'}, ...]

def load_prompts() -> PromptPack:
    with open(PROMPTS_PATH, "r", encoding="utf-8") as f:
        raw = yaml.safe_load(f)

    if "system" not in raw or "parse" not in raw:
        raise ValueError("prompts.yaml must have 'system' and 'parse' sections")

    # normalize few-shot to list of dicts
    few = raw["fewshot"] if "fewshot" in raw else raw.get("parse", [])
    parse = []
    for item in few:
        if isinstance(item, dict) and "role" in item and "content" in item:
            parse.append({"role": item["role"], "content": item["content"]})
    pp = PromptPack(system=raw["system"], parse=parse)
    log.info(
        "Prompts loaded: system=%s | fewshot=%d",
        (pp.system[:40] + "‚Ä¶") if len(pp.system) > 40 else pp.system,
        len(pp.parse),
    )
    return pp

PROMPTS = load_prompts()

# ========= SCHEDULER =========
SCHED = AsyncIOScheduler()
SCHED.start()

# ========= Utils =========
def fmt_user_dt(dt: datetime, tz_str: Optional[str]) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫—É –±–µ–∑ —Å–µ–∫—É–Ω–¥ –∏ –±–µ–∑ –æ—Ñ—Ñ—Å–µ—Ç–∞: 25.08 –≤ 11:00
    tz_str –º–æ–∂–µ—Ç –±—ã—Ç—å IANA ('Europe/Moscow') –∏–ª–∏ —Å–º–µ—â–µ–Ω–∏–µ '+03:00'
    """
    try:
        if tz_str and "/" in tz_str:
            dt = dt.astimezone(ZoneInfo(tz_str))
        return dt.strftime("%d.%m –≤ %H:%M")
    except Exception:
        return dt.strftime("%d.%m –≤ %H:%M")

def to_rfc3339_no_seconds(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: YYYY-MM-DDTHH:MM¬±HH:MM (–±–µ–∑ —Å–µ–∫—É–Ω–¥)."""
    # –£ dt –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ñ—Ñ—Å–µ—Ç –≤–∏–¥–∞ +0300 ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ +03:00
    s = dt.strftime("%Y-%m-%dT%H:%M%z")
    if len(s) >= 5:
        return s[:-2] + ":" + s[-2:]
    return s

def make_now_iso_and_tzdefault(user_tz: Optional[str]) -> (str, str):
    """
    NOW_ISO ‚Äî –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    TZ_DEFAULT ‚Äî —Å–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∞ +03:00 (–Ω—É–∂–Ω–æ –¥–ª—è –º–æ–¥–µ–ª–∏).
    """
    if user_tz and "/" in user_tz:
        now_local = datetime.now(ZoneInfo(user_tz))
    else:
        # —Å–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∞ +03:00 ‚Äî –∑–∞–¥–∞–¥–∏–º fixed offset
        if user_tz and re.match(r"^[\+\-]\d{2}:\d{2}$", user_tz):
            hours = int(user_tz[1:3])
            mins = int(user_tz[4:6])
            sign = 1 if user_tz[0] == "+" else -1
            tzinfo = timezone(sign * timedelta(hours=hours, minutes=mins))
            now_local = datetime.now(tzinfo)
        else:
            now_local = datetime.now().astimezone()

    tz_default = now_local.strftime("%z")
    tz_default = tz_default[:3] + ":" + tz_default[3:]  # +0300 -> +03:00
    now_iso = now_local.isoformat(timespec="seconds")   # –¥–ª—è –º–æ–¥–µ–ª–∏ —Å–µ–∫—É–Ω–¥—ã –Ω–æ—Ä–º
    return now_iso, tz_default

def build_llm_messages(user_text: str, user_tz: Optional[str], pp: PromptPack) -> List[Dict[str, str]]:
    now_iso, tz_default = make_now_iso_and_tzdefault(user_tz)
    sys_suffix = f"\nNOW_ISO={now_iso}\nTZ_DEFAULT={tz_default}\n"
    msgs: List[Dict[str, str]] = [{"role": "system", "content": pp.system + sys_suffix}]
    msgs.extend(pp.parse)
    msgs.append({"role": "user", "content": user_text})
    return msgs

async def call_llm(user_text: str, user_tz: Optional[str]) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON (dict) –æ—Ç LLM –ø–æ –Ω–∞—à–µ–º—É –ø—Ä–æ–º—Ç—É
    """
    msgs = build_llm_messages(user_text, user_tz, PROMPTS)
    resp = oi.chat.completions.create(
        model=MODEL,
        messages=msgs,
        temperature=0.2,
    )
    content = resp.choices[0].message.content.strip()
    # LLM –æ–±—è–∑–∞–Ω –≤–µ—Ä–Ω—É—Ç—å JSON ‚Äî –ø–∞—Ä—Å–∏–º
    try:
        data = json.loads(content)
    except json.JSONDecodeError:
        # –Ω–∞ –∫—Ä–∞–π–Ω—è–∫ ‚Äî –≤—ã–¥–µ—Ä–Ω–µ–º JSON —á–µ—Ä–µ–∑ –∂–∞–¥–Ω—ã–π –º–∞—Ç—á
        m = re.search(r"\{.*\}", content, re.S)
        if not m:
            raise
        data = json.loads(m.group(0))
    return data

# ========= –û–Ω–±–æ—Ä–¥–∏–Ω–≥ TZ =========
ASYNC_TZ_FLAG = "awaiting_tz"

async def ensure_tz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
    uid = update.effective_user.id
    tz = db_get_tz(uid)
    if tz:
        return tz
    context.user_data[ASYNC_TZ_FLAG] = True
    await update.effective_chat.send_message(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å:\n"
        "‚Ä¢ —Å–º–µ—â–µ–Ω–∏–µ: +03:00\n"
        "‚Ä¢ –∏–ª–∏ IANA-–∑–æ–Ω—É: Europe/Moscow"
    )
    return None

def normalize_tz(raw: str) -> Optional[str]:
    raw = (raw or "").strip()
    if re.match(r"^[\+\-]\d{2}:\d{2}$", raw):
        return raw
    # –ø–æ–ø—Ä–æ–±—É–µ–º IANA
    try:
        ZoneInfo(raw)
        return raw
    except Exception:
        return None

# ========= –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ–µ) =========
async def fire_reminder(app: Application, user_id: int, rem_id: int, title: str):
    try:
        await app.bot.send_message(
            chat_id=user_id,
            text=f"üîî {title}",
        )
        db_mark_done(rem_id)
    except Exception as e:
        log.exception("send reminder failed: %s", e)

def schedule_once(app: Application, when_dt: datetime, user_id: int, rem_id: int, title: str):
    SCHED.add_job(
        fire_reminder,
        trigger=DateTrigger(run_date=when_dt),
        args=(app, user_id, rem_id, title),
        id=f"once:{rem_id}",
        replace_existing=True,
        misfire_grace_time=60,
    )

# ========= Handlers =========
async def cmd_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PROMPTS
    try:
        PROMPTS = load_prompts()
        await update.message.reply_text("–ü—Ä–æ–º–ø—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å: {e}")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop(ASYNC_TZ_FLAG, None)
    tz = db_get_tz(update.effective_user.id)
    if not tz:
        await ensure_tz(update, context)
        return
    await update.message.reply_text(
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å."
    )

async def cmd_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    rows = db_list_future(uid)
    if not rows:
        await update.message.reply_text("–ë—É–¥—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
        return

    lines = ["üóíÔ∏è –ë–ª–∏–∂–∞–π—à–∏–µ:"]
    kb = []
    for r in rows:
        iso = r["iso"]
        tz = r["tz"] or db_get_tz(uid)
        dt = datetime.fromisoformat(iso)
        lines.append(f"‚Ä¢ {fmt_user_dt(dt, tz)} ‚Äî ¬´{r['title']}¬ª")
        kb.append([
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{r['id']}")
        ])
    await update.message.reply_text(
        "\n".join(lines),
        reply_markup=InlineKeyboardMarkup(kb),
    )

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if data.startswith("del:"):
        rem_id = int(data.split(":", 1)[1])
        db_mark_done(rem_id)
        await q.edit_message_text("–£–¥–∞–ª–µ–Ω–æ ‚úÖ")
        return

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    txt = (update.message.text or "").strip()

    # –∂–¥—ë–º TZ?
    if context.user_data.get(ASYNC_TZ_FLAG):
        tz = normalize_tz(txt)
        if not tz:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏ —Å–º–µ—â–µ–Ω–∏–µ (+03:00) –∏–ª–∏ –∑–æ–Ω—É (Europe/Moscow).")
            return
        db_set_tz(uid, tz)
        context.user_data.pop(ASYNC_TZ_FLAG, None)
        await update.message.reply_text(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.")
        return

    user_tz = db_get_tz(uid)
    if not user_tz:
        tz = await ensure_tz(update, context)
        return

    # –∑–æ–≤—ë–º LLM
    try:
        parsed = await call_llm(txt, user_tz)
    except Exception as e:
        log.exception("LLM error: %s", e)
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    intent = parsed.get("intent")
    if intent == "chat":
        # —Ñ–æ–ª–±–µ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª, —Å–∫–∞–∂–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 15 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ¬ª.")
        return

    if intent == "ask_clarification":
        # —É–ø—Ä–æ—â—ë–Ω–Ω–æ ‚Äî –ø–æ–∫–∞–∂–µ–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        options = parsed.get("options") or []
        if not options:
            await update.message.reply_text("–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ.")
            return
        btns = []
        for op in options[:3]:
            iso = op.get("iso_datetime")
            label = op.get("label") or iso
            btns.append([InlineKeyboardButton(label, callback_data=f"pick:{iso}")])
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup(btns))
        return

    if intent == "create_reminder":
        title = parsed.get("title") or parsed.get("description") or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        iso = parsed.get("fixed_datetime")
        if not iso:
            await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Ç–æ—á–Ω–µ–µ.")
            return
        # –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –±–µ–∑ —Å–µ–∫—É–Ω–¥ (–Ω–∞—à) –∏ —Å —Å–µ–∫—É–Ω–¥–∞–º–∏ ‚Äî LLM –∏–Ω–æ–≥–¥–∞ —à–ª—ë—Ç —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
        try:
            dt = datetime.fromisoformat(iso)
        except Exception:
            # –ø–æ–ø—Ä–∞–≤–∏–º, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ "YYYY-MM-DD HH:MM:SS+03"
            iso_fixed = iso.replace(" ", "T")
            if re.match(r".*\+\d{2}$", iso_fixed):
                iso_fixed += ":00"
            dt = datetime.fromisoformat(iso_fixed)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º
        rem_id = db_add_reminder(uid, title, to_rfc3339_no_seconds(dt), user_tz)
        schedule_once(context.application, dt, uid, rem_id, title)

        pretty = fmt_user_dt(dt, user_tz)
        await update.message.reply_text(f"üìÖ –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é ¬´{title}¬ª {pretty}")
        return

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç
    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# CB –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ ask_clarification
async def on_pick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if not data.startswith("pick:"):
        return
    iso = data.split(":", 1)[1]
    uid = q.from_user.id
    tz = db_get_tz(uid)
    title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

    # —Ä–∞—Å–ø–∞—Ä—Å–∏–º –¥–∞—Ç—É
    iso_fixed = iso.replace(" ", "T")
    if re.match(r".*\+\d{2}$", iso_fixed):
        iso_fixed += ":00"
    dt = datetime.fromisoformat(iso_fixed)

    rem_id = db_add_reminder(uid, title, to_rfc3339_no_seconds(dt), tz)
    schedule_once(context.application, dt, uid, rem_id, title)

    pretty = fmt_user_dt(dt, tz)
    await q.edit_message_text(f"üìÖ –û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é ¬´{title}¬ª {pretty}")


# =========================
# APP & ENTRYPOINT (PTB v20)
# =========================

def build_app() -> Application:
    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("reload", cmd_reload))
    app.add_handler(CommandHandler("list", cmd_list))

    # Callback-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(on_cb,   pattern=r"^del:"))
    app.add_handler(CallbackQueryHandler(on_pick, pattern=r"^pick:"))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    return app


def main():
    app = build_app()
    # –ï—Å–ª–∏ —É —Ç–µ–±—è –≥–¥–µ-—Ç–æ –µ—Å—Ç—å SCHED.start(), –æ—Å—Ç–∞–≤—å –µ–≥–æ –≤—ã—à–µ –ø–æ —Ñ–∞–π–ª—É (–æ–Ω —É–∂–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç)
    # –ó–∞–ø—É—Å–∫ PTB v20: –±–µ–∑ asyncio.run/initialize/updater.start_polling
    log.info("Bot starting‚Ä¶ polling enabled")
    app.run_polling(close_loop=False)  # close_loop=False —á—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loop


if __name__ == "__main__":
    main()
