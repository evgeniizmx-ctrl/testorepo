import os
import re
import asyncio
from datetime import datetime, timedelta, date
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --------- ENV / TZ ---------
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(APP_TZ)

# --------- BOT / SCHED ---------
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=APP_TZ)

# PENDING[user_id] = {"description": str, "variants": [datetime], "base_date": date}
PENDING: dict[int, dict] = {}
REMINDERS: list[dict] = []

# --------- UTILS ---------
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

def fmt_dt(dt: datetime) -> str:
    return f"{dt.strftime('%d.%m')} –≤ {dt.strftime('%H:%M')} ({APP_TZ})"

async def send_reminder(uid: int, text: str):
    try:
        await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("send_reminder error:", e)

def plan(rem: dict):
    scheduler.add_job(send_reminder, "date",
                      run_date=rem["remind_dt"],
                      args=[rem["user_id"], rem["text"]])

def mk_dt(d: date, h: int, m: int) -> datetime:
    return tz.localize(datetime(d.year, d.month, d.day, h % 24, m % 60, 0, 0))

def soonest(dts: list[datetime]) -> list[datetime]:
    return sorted(dts, key=lambda x: x)

def human_label(dt: datetime) -> str:
    now = datetime.now(tz)
    if dt.date() == now.date():
        dword = "–°–µ–≥–æ–¥–Ω—è"
    elif dt.date() == (now + timedelta(days=1)).date():
        dword = "–ó–∞–≤—Ç—Ä–∞"
    else:
        dword = dt.strftime("%d.%m")
    h, m = dt.hour, dt.minute
    if 0 <= h <= 4: mer = "–Ω–æ—á–∏"
    elif 5 <= h <= 11: mer = "—É—Ç—Ä–∞"
    elif 12 <= h <= 16: mer = "–¥–Ω—è"
    else: mer = "–≤–µ—á–µ—Ä–∞"
    h12 = h % 12 or 12
    t = f"{h12}:{m:02d}" if m else f"{h12}"
    return f"{dword} –≤ {t} {mer}"

def kb_variants(dts: list[datetime]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=human_label(dt), callback_data=f"time|{dt.isoformat()}")]
            for dt in soonest(dts)
        ]
    )

# --------- MONTHS ---------
MONTHS = {
    "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
    "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12,
    "—è–Ω–≤–∞—Ä—å":1,"—Ñ–µ–≤—Ä–∞–ª—å":2,"–º–∞—Ä—Ç":3,"–∞–ø—Ä–µ–ª—å":4,"–º–∞–π":5,"–∏—é–Ω—å":6,"–∏—é–ª—å":7,
    "–∞–≤–≥—É—Å—Ç":8,"—Å–µ–Ω—Ç—è–±—Ä—å":9,"–æ–∫—Ç—è–±—Ä—å":10,"–Ω–æ—è–±—Ä—å":11,"–¥–µ–∫–∞–±—Ä—å":12,
}

def nearest_future_day(day: int, now: datetime) -> date:
    y, m = now.year, now.month
    try:
        cand = date(y, m, day)
        if cand > now.date():
            return cand
    except ValueError:
        pass
    y2, m2 = (y + 1, 1) if m == 12 else (y, m + 1)
    for dcap in (31,30,29,28):
        try:
            return date(y2, m2, min(day, dcap))
        except ValueError:
            continue
    return date(y2, m2, 28)

# --------- REGEX ---------
RX_HALF_HOUR = re.compile(r"\b—á–µ—Ä–µ–∑\s+–ø–æ–ª\s*—á–∞—Å–∞\b", re.I)
RX_REL = [
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫\.?)\b", re.I), "seconds"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω\.?)\b", re.I), "minutes"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å(?:–∞|–æ–≤)?|—á\.?)\b", re.I), "hours"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I), "days"),
]
RX_REL_SINGULAR = [
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+—Å–µ–∫—É–Ω–¥[—É—é]\b", re.I), "seconds", 1),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+–º–∏–Ω—É—Ç[—É—é]\b", re.I), "minutes", 1),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+—á–∞—Å\b", re.I), "hours", 1),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+–¥–µ–Ω—å\b", re.I), "days", 1),
]
RX_SAME_TIME = re.compile(r"\b–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è\b", re.I)
RX_TMR = re.compile(r"\b–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_ATMR = re.compile(r"\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_IN_N_DAYS = re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I)

# ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ‚Ä¶ –≤ HH[:MM] [–º–µ—Ä–∏–¥–∏–∞–Ω]¬ª
RX_DAY_WORD_TIME = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–≤\s*(\d{1,2})"
    r"(?:(?::(\d{2}))|\s*—á–∞—Å(?:–æ–≤|–∞)?)?"
    r"(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?\b",
    re.I | re.DOTALL
)
# ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞¬ª + —á–∞—Å—Ç—å —Å—É—Ç–æ–∫ (–±–µ–∑ —á–∏—Å–ª–∞)
RX_DAY_WORD_ONLY = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b",
    re.I | re.DOTALL
)

# ¬´–≤ HH[:MM]¬ª
RX_ONLY_TIME = re.compile(r"\b–≤\s*(\d{1,2})(?::(\d{2}))?\b", re.I)
# ¬´HH[:MM] —É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º ‚Ä¶¬ª ‚Äî –ë–ï–ó ¬´–≤¬ª
RX_BARE_TIME_WITH_MER = re.compile(r"\b(\d{1,2})(?::(\d{2}))?\s*(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b", re.I)

# ¬´–≤ HH —á–∞—Å–æ–≤¬ª
RX_EXACT_HOUR = re.compile(r"\b–≤\s*(\d{1,2})\s*—á–∞—Å(–æ–≤|–∞)?\b", re.I)

# –¥–∞—Ç—ã
RX_DOT_DATE = re.compile(
    r"\b(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{2,4}))?"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)
RX_MONTH_DATE = re.compile(
    r"\b(\d{1,2})\s+([–ê-–Ø–∞-—è—ë–Å]+)\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)
RX_DAY_OF_MONTH = re.compile(
    r"\b(\d{1,2})\s*—á–∏—Å–ª[–∞–æ]\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)

RX_ANY_MER = re.compile(r"\b(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b", re.I)
RX_TODAY = re.compile(r"\b—Å–µ–≥–æ–¥–Ω—è\b", re.I)

# --------- HELPERS ---------
def hour_is_unambiguous(h: int) -> bool:
    return h >= 13 or h == 0  # 13..23 –∏–ª–∏ 00

def part_of_day_defaults(word: str) -> int:
    w = word.lower()
    if w.startswith("—É—Ç—Ä"):   return 9
    if w.startswith("–¥–Ω"):    return 13
    if w.startswith("–≤–µ—á"):   return 19
    return 1  # –Ω–æ—á—å

def apply_meridian(h: int, mer: str | None) -> int:
    if not mer: return h
    mer = mer.lower()
    if mer.startswith("–¥–Ω"):   return h + 12 if h < 12 else h
    if mer.startswith("–≤–µ—á"):  return h + 12 if h < 12 else h
    if mer.startswith("–Ω–æ—á"):  return 0 if h == 12 else h
    return h  # —É—Ç—Ä–æ–º ‚Äî –±–µ–∑ —Å–¥–≤–∏–≥–∞

def text_looks_like_new_request(s: str) -> bool:
    s = norm(s).lower()
    if re.search(r"\b—á–µ—Ä–µ–∑\b", s): return True
    if re.search(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b", s): return True
    if re.search(r"\b\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?", s): return True
    if re.search(r"\b\d{1,2}\s+[–∞-—è—ë]+", s): return True
    if re.search(r"\b–≤\s*\d{1,2}\s*—á–∞—Å(–æ–≤|–∞)?\b", s): return True
    if re.search(r"\b–≤\s*\d{1,2}(?::\d{2})?\s*(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b", s): return True
    if re.search(r"\b–≤\s*(?:1[3-9]|2[0-3]|00)\b", s): return True
    return False

# --------- PARSERS ---------
def parse_relative(text: str):
    s = norm(text); now = datetime.now(tz).replace(second=0, microsecond=0)
    if RX_HALF_HOUR.search(s):
        dt = now + timedelta(minutes=30)
        return dt, RX_HALF_HOUR.sub("", s).strip(" ,.-")
    for rx, kind, val in RX_REL_SINGULAR:
        m = rx.search(s)
        if m:
            dt = now + (timedelta(seconds=val) if kind=="seconds" else
                        timedelta(minutes=val) if kind=="minutes" else
                        timedelta(hours=val) if kind=="hours" else
                        timedelta(days=val))
            return dt, (s[:m.start()] + s[m.end():]).strip(" ,.-")
    for rx, kind in RX_REL:
        m = rx.search(s)
        if m:
            n = int(m.group(1))
            dt = now + (timedelta(seconds=n) if kind=="seconds" else
                        timedelta(minutes=n) if kind=="minutes" else
                        timedelta(hours=n) if kind=="hours" else
                        timedelta(days=n))
            return dt, (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return None

def parse_same_time(text: str):
    s = norm(text)
    if not RX_SAME_TIME.search(s):
        return None
    now = datetime.now(tz).replace(second=0, microsecond=0)
    days = 1 if RX_TMR.search(s) else 2 if RX_ATMR.search(s) else None
    if days is None:
        m = RX_IN_N_DAYS.search(s)
        if m: days = int(m.group(1))
    if days is None:
        return None
    dt = (now + timedelta(days=days)).replace(second=0, microsecond=0)
    s2 = RX_IN_N_DAYS.sub("", RX_ATMR.sub("", RX_TMR.sub("", RX_SAME_TIME.sub("", s)))).strip(" ,.-")
    return dt, s2

def parse_dayword_time(text: str):
    s = norm(text); now = datetime.now(tz).replace(second=0, microsecond=0)

    m = RX_DAY_WORD_TIME.search(s)
    if m:
        word = m.group(1).lower()
        h = int(m.group(2)); mm = int(m.group(3) or 0)
        mer = (m.group(4) or "").lower()
        base = now.date()
        if word == "–∑–∞–≤—Ç—Ä–∞": base = (now + timedelta(days=1)).date()
        elif word == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": base = (now + timedelta(days=2)).date()

        if mer:
            dt = mk_dt(base, apply_meridian(h, mer), mm)
            rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return ("ok", dt, rest)

        if hour_is_unambiguous(h):
            dt = mk_dt(base, h % 24, mm)
            rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return ("ok", dt, rest)

        v1 = mk_dt(base, h % 24, mm)
        v2 = mk_dt(base, (h + 12) % 24, mm)
        if base == now.date():
            if v1 <= now: v1 += timedelta(days=1)
            if v2 <= now: v2 += timedelta(days=1)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("amb", rest, soonest([v1, v2]))

    m2 = RX_DAY_WORD_ONLY.search(s)
    if m2:
        word = m2.group(1).lower()
        mer = m2.group(2).lower()
        base = now.date()
        if word == "–∑–∞–≤—Ç—Ä–∞": base = (now + timedelta(days=1)).date()
        elif word == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": base = (now + timedelta(days=2)).date()
        h = part_of_day_defaults(mer)
        dt = mk_dt(base, h, 0)
        rest = RX_DAY_WORD_ONLY.sub("", s, count=1).strip(" ,.-")
        return ("ok", dt, rest)

    return None

def parse_only_time(text: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –±–µ–∑ –¥–∞—Ç—ã:
    - '–≤ HH[:MM]'
    - 'HH[:MM] —É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º/...' (–±–µ–∑ '–≤')
    –£—á–∏—Ç—ã–≤–∞–µ—Ç '—Å–µ–≥–æ–¥–Ω—è' –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —Å–ª–æ—Ç–∞.
    """
    s = norm(text)
    now = datetime.now(tz).replace(second=0, microsecond=0)

    # bare time with meridian (–±–µ–∑ '–≤'): "10 —É—Ç—Ä–∞"
    mb = RX_BARE_TIME_WITH_MER.search(s)
    if mb:
        h = int(mb.group(1)); mm = int(mb.group(2) or 0); mer = mb.group(3)
        dt = now.replace(hour=apply_meridian(h, mer) % 24, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:mb.start()] + s[mb.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    # classic: "–≤ 10[:30]"
    m = RX_ONLY_TIME.search(s)
    if not m:
        return None
    h = int(m.group(1)); mm = int(m.group(2) or 0)

    # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å —Å—É—Ç–æ–∫ –≥–¥–µ-—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ
    mer_m = RX_ANY_MER.search(s)
    if mer_m:
        mer = mer_m.group(1)
        dt = now.replace(hour=apply_meridian(h, mer) % 24, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    # –µ—Å–ª–∏ '—Å–µ–≥–æ–¥–Ω—è' –∏ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —á–∞—Å ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –°–ï–ì–û–î–ù–Ø
    if RX_TODAY.search(s) and not hour_is_unambiguous(h):
        dt1 = now.replace(hour=h % 24, minute=mm)
        dt2 = now.replace(hour=(h + 12) % 24, minute=mm)
        candidates = [dt for dt in (dt1, dt2) if dt >= now and dt.date() == now.date()]
        if candidates:
            dt = min(candidates)
            rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return ("ok", dt, rest)
        # –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –Ω–∏–∫–∞–∫ ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ—Ç –∂–µ —á–∞—Å
        dt = (now + timedelta(days=1)).replace(hour=h % 24, minute=mm)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    # –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π 24-—á–∞—Å–æ–≤–æ–π —á–∞—Å
    if hour_is_unambiguous(h):
        dt = now.replace(hour=h % 24, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    # –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –±–µ–∑ '—Å–µ–≥–æ–¥–Ω—è' ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±–æ—Ä
    v1 = now.replace(hour=h % 24, minute=mm)
    v2 = now.replace(hour=(h + 12) % 24, minute=mm)
    if v1 <= now: v1 += timedelta(days=1)
    if v2 <= now: v2 += timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def parse_exact_hour(text: str):
    s = norm(text); m = RX_EXACT_HOUR.search(s)
    if not m: return None
    h = int(m.group(1))
    now = datetime.now(tz).replace(second=0, microsecond=0)
    dt = now.replace(hour=h % 24, minute=0)
    if dt <= now: dt += timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return dt, rest

def parse_dot_date(text: str):
    s = norm(text); m = RX_DOT_DATE.search(s)
    if not m: return None
    dd, mm = int(m.group(1)), int(m.group(2))
    yy, hh, minu, mer = m.group(3), m.group(4), m.group(5), m.group(6)
    now = datetime.now(tz)
    yyyy = now.year if not yy else (int(yy) + 2000 if len(yy)==2 else int(yy))
    try:
        base = date(yyyy, mm, dd)
    except ValueError:
        return None
    rest = RX_DOT_DATE.sub("", s, count=1).strip(" ,.-")

    if not hh:
        mer_m = RX_ANY_MER.search(s)
        if mer_m:
            dt = mk_dt(base, part_of_day_defaults(mer_m.group(1)), 0)
            return ("ok", dt, rest)
        return ("day", base, rest)

    h = int(hh); minute = int(minu or 0)
    if mer:
        dt = mk_dt(base, apply_meridian(h, mer), minute)
        return ("ok", dt, rest)
    if hour_is_unambiguous(h):
        dt = mk_dt(base, h % 24, minute)
        return ("ok", dt, rest)
    dt1 = mk_dt(base, h % 24, minute)
    dt2 = mk_dt(base, (h + 12) % 24, minute)
    return ("amb", rest, soonest([dt1, dt2]))

def parse_month_date(text: str):
    s = norm(text); m = RX_MONTH_DATE.search(s)
    if not m: return None
    dd = int(m.group(1)); mon = m.group(2).lower()
    if mon not in MONTHS: return None
    mm = MONTHS[mon]
    hh, minu = m.group(3), m.group(4)
    mer = (m.group(5) or "").lower() if m.group(5) else None

    now = datetime.now(tz); yyyy = now.year
    try:
        base = date(yyyy, mm, dd)
    except ValueError:
        return None
    if base < now.date():
        try: base = date(yyyy + 1, mm, dd)
        except ValueError: return None

    rest = RX_MONTH_DATE.sub("", s, count=1).strip(" ,.-")

    if not hh:
        mer_m = RX_ANY_MER.search(s)
        if mer_m:
            dt = mk_dt(base, part_of_day_defaults(mer_m.group(1)), 0)
            return ("ok", dt, rest)
        return ("day", base, rest)

    h = int(hh); minute = int(minu or 0)
    if mer:
        dt = mk_dt(base, apply_meridian(h, mer), minute)
        return ("ok", dt, rest)
    if hour_is_unambiguous(h):
        dt = mk_dt(base, h % 24, minute)
        return ("ok", dt, rest)
    dt1 = mk_dt(base, h % 24, minute)
    dt2 = mk_dt(base, (h + 12) % 24, minute)
    return ("amb", rest, soonest([dt1, dt2]))

def parse_day_of_month(text: str):
    s = norm(text); m = RX_DAY_OF_MONTH.search(s)
    if not m: return None
    dd = int(m.group(1)); hh, minu = m.group(2), m.group(3)
    mer = (m.group(4) or "").lower() if m.group(4) else None
    now = datetime.now(tz); base = nearest_future_day(dd, now)
    rest = RX_DAY_OF_MONTH.sub("", s, count=1).strip(" ,.-")

    if not hh:
        mer_m = RX_ANY_MER.search(s)
        if mer_m:
            dt = mk_dt(base, part_of_day_defaults(mer_m.group(1)), 0)
            return ("ok", dt, rest)
        return ("day", base, rest)

    h = int(hh); minute = int(minu or 0)
    if mer:
        dt = mk_dt(base, apply_meridian(h, mer), minute)
        return ("ok", dt, rest)
    if hour_is_unambiguous(h):
        dt = mk_dt(base, h % 24, minute)
        return ("ok", dt, rest)
    dt1 = mk_dt(base, h % 24, minute)
    dt2 = mk_dt(base, (h + 12) % 24, minute)
    return ("amb", rest, soonest([dt1, dt2]))

# --------- COMMANDS ---------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "–ü–æ–Ω–∏–º–∞—é: ¬´24 –º–∞—è –≤ 19¬ª, ¬´1 —á–∏—Å–ª–∞ –≤ 7¬ª, ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç/—á–∞—Å¬ª, "
        "¬´–∑–∞–≤—Ç—Ä–∞ –≤ 6¬ª, ¬´–≤ 17 —á–∞—Å–æ–≤¬ª, ¬´–≤ 21¬ª, ¬´24.05 21:30¬ª, "
        "¬´–∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º¬ª, ¬´24 –º–∞—è —É—Ç—Ä–æ–º¬ª, ¬´–≤ 7 –≤–µ—á–µ—Ä–æ–º¬ª, ¬´10 —É—Ç—Ä–∞¬ª.\n"
        "–ï—Å–ª–∏ –≤—Ä–µ–º—è 13‚Äì23 –∏–ª–∏ 00 ‚Äî —Å—á–∏—Ç–∞—é –µ–≥–æ —Ç–æ—á–Ω—ã–º –∏ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é —É—Ç–æ—á–Ω–µ–Ω–∏–π.\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫, /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ."
    )

@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong ‚úÖ")

@dp.message(Command("cancel"))
async def cmd_cancel(m: Message):
    uid = m.from_user.id
    if uid in PENDING:
        PENDING.pop(uid, None)
        await m.answer("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    else:
        await m.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, —è –≥–æ—Ç–æ–≤ ü§ù")

@dp.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
        return
    items = sorted(items, key=lambda r: r["remind_dt"])
    lines = [f"‚Ä¢ {r['text']} ‚Äî {fmt_dt(r['remind_dt'])}" for r in items]
    await m.answer("\n".join(lines))

# --------- MAIN HANDLER ---------
@dp.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    text = norm(m.text)

    # —Ä–µ–∂–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
    if uid in PENDING:
        st = PENDING[uid]

        if text.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"):
            PENDING.pop(uid, None)
            await m.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            return

        if st.get("variants") and text_looks_like_new_request(text):
            PENDING.pop(uid, None)
        elif st.get("variants"):
            await m.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=kb_variants(st["variants"]))
            return
        elif st.get("base_date"):
            mt = re.search(r"(?:^|\b–≤\s*)(\d{1,2})(?::(\d{2}))?\s*(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)?\b", text, re.I)
            if not mt:
                mer_m = RX_ANY_MER.search(text)
                if mer_m:
                    h = part_of_day_defaults(mer_m.group(1)); minute = 0
                    dt = mk_dt(st["base_date"], h, minute)
                else:
                    await m.reply("–í–æ —Å–∫–æ–ª—å–∫–æ?")
                    return
            else:
                h = int(mt.group(1)); minute = int(mt.group(2) or 0); mer = mt.group(3)
                if mer:
                    h = apply_meridian(h, mer)
                dt = mk_dt(st["base_date"], h, minute)
            desc = st.get("description", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            PENDING.pop(uid, None)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
            return
        # PENDING –æ—á–∏—â–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # 1) –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ
    r = parse_relative(text)
    if r:
        dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
        plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
        return

    # 2) –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è ‚Ä¶
    r = parse_same_time(text)
    if r:
        dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
        plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
        return

    # 3) —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ‚Ä¶
    r = parse_dayword_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
            return
        _, rest, variants = r
        desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants, "repeat":"none"}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?", reply_markup=kb_variants(variants))
        return

    # 4) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
    for parser in (parse_dot_date, parse_month_date, parse_day_of_month):
        r = parser(text)
        if r:
            tag = r[0]
            if tag == "ok":
                _, dt, rest = r; desc = clean_desc(rest or text)
                REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
                plan(REMINDERS[-1])
                await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
                return
            if tag == "amb":
                _, rest, variants = r; desc = clean_desc(rest or text)
                PENDING[uid] = {"description": desc, "variants": variants, "repeat":"none"}
                await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?", reply_markup=kb_variants(variants))
                return
            _, base, rest = r; desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "base_date": base, "repeat":"none"}
            await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?")
            return

    # 5) ¬´–≤ HH —á–∞—Å–æ–≤¬ª
    r = parse_exact_hour(text)
    if r:
        dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
        plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
        return

    # 6) ¬´–≤ HH[:MM]¬ª / ¬´HH[:MM] —É—Ç—Ä–æ–º ‚Ä¶¬ª
    r = parse_only_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
            return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants, "repeat":"none"}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?", reply_markup=kb_variants(variants))
        return

    await m.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: ¬´24.05 19:00¬ª, ¬´24 –º–∞—è –≤–µ—á–µ—Ä–æ–º¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 7 —É—Ç—Ä–∞¬ª, ¬´–≤ 17 —á–∞—Å–æ–≤¬ª, ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç¬ª, ¬´10 —É—Ç—Ä–∞¬ª.")

# --------- CALLBACK ---------
@dp.callback_query(F.data.startswith("time|"))
async def choose_time(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("variants"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è")
        return
    try:
        iso = cb.data.split("|", 1)[1]
        dt = datetime.fromisoformat(iso)
        dt = tz.localize(dt) if dt.tzinfo is None else dt.astimezone(tz)
    except Exception:
        await cb.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
        return
    desc = PENDING[uid].get("description", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
    plan(REMINDERS[-1])
    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# --------- RUN ---------
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
