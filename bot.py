import os
import re
import asyncio
from datetime import datetime, timedelta, date
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ================== –û–ö–†–£–ñ–ï–ù–ò–ï ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(APP_TZ)

# ================== –ò–ù–ò–¶ ==================
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=APP_TZ)

# PENDING[user_id] = {
#   "description": str,
#   "repeat": "none",
#   "variants": [datetime],        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –¥–≤—É—Ö
#   "base_date": date              # –µ—Å–ª–∏ –∂–¥—ë–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
# }
PENDING: dict[int, dict] = {}
REMINDERS: list[dict] = []

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

async def send_reminder(uid: int, text: str):
    try:
        await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("send_reminder error:", e)

def plan(reminder: dict):
    scheduler.add_job(send_reminder, "date",
                      run_date=reminder["remind_dt"],
                      args=[reminder["user_id"], reminder["text"]])

def mk_dt(d: date, h: int, m: int) -> datetime:
    return tz.localize(datetime(d.year, d.month, d.day, h % 24, m % 60, 0, 0))

def soonest(dts: list[datetime]) -> list[datetime]:
    return sorted(dts, key=lambda x: x)

# –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏
def human_label(dt: datetime) -> str:
    now = datetime.now(tz)
    if dt.date() == now.date():
        dword = "–°–µ–≥–æ–¥–Ω—è"
    elif dt.date() == (now + timedelta(days=1)).date():
        dword = "–ó–∞–≤—Ç—Ä–∞"
    else:
        dword = dt.strftime("%d.%m")

    h = dt.hour
    m = dt.minute
    if 0 <= h <= 4:
        mer = "–Ω–æ—á–∏"
    elif 5 <= h <= 11:
        mer = "—É—Ç—Ä–∞"
    elif 12 <= h <= 16:
        mer = "–¥–Ω—è"
    else:
        mer = "–≤–µ—á–µ—Ä–∞"

    h12 = h % 12
    if h12 == 0:
        h12 = 12
    t = f"{h12}:{m:02d}" if m else f"{h12}"
    return f"{dword} –≤ {t} {mer}"

def kb_variants(dts: list[datetime]) -> InlineKeyboardMarkup:
    rows = []
    for dt in soonest(dts):
        rows.append([InlineKeyboardButton(text=human_label(dt),
                                          callback_data=f"time|{dt.isoformat()}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== –†–£–°–°–ö–ò–ï –ú–ï–°–Ø–¶–´ ==================
MONTHS = {
    # —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π
    "—è–Ω–≤–∞—Ä—è":1, "—Ñ–µ–≤—Ä–∞–ª—è":2, "–º–∞—Ä—Ç–∞":3, "–∞–ø—Ä–µ–ª—è":4, "–º–∞—è":5, "–∏—é–Ω—è":6,
    "–∏—é–ª—è":7, "–∞–≤–≥—É—Å—Ç–∞":8, "—Å–µ–Ω—Ç—è–±—Ä—è":9, "–æ–∫—Ç—è–±—Ä—è":10, "–Ω–æ—è–±—Ä—è":11, "–¥–µ–∫–∞–±—Ä—è":12,
    # —á–∞—Å—Ç–æ –ø–∏—à—É—Ç –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º
    "—è–Ω–≤–∞—Ä—å":1,"—Ñ–µ–≤—Ä–∞–ª—å":2,"–º–∞—Ä—Ç":3,"–∞–ø—Ä–µ–ª—å":4,"–º–∞–π":5,"–∏—é–Ω—å":6,"–∏—é–ª—å":7,
    "–∞–≤–≥—É—Å—Ç":8,"—Å–µ–Ω—Ç—è–±—Ä—å":9,"–æ–∫—Ç—è–±—Ä—å":10,"–Ω–æ—è–±—Ä—å":11,"–¥–µ–∫–∞–±—Ä—å":12,
}

def nearest_future_day(day: int, now: datetime) -> date:
    y, m = now.year, now.month
    try:
        cand = date(y, m, day)
        if cand > now.date():
            return cand
    except ValueError:
        pass
    if m == 12:
        y2, m2 = y + 1, 1
    else:
        y2, m2 = y, m + 1
    for dcap in (31, 30, 29, 28):
        try:
            return date(y2, m2, min(day, dcap))
        except ValueError:
            continue
    return date(y2, m2, 28)

# ================== –ü–ê–†–°–ï–†–´ ==================
# 1) —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞
RX_HALF_HOUR = re.compile(r"\b—á–µ—Ä–µ–∑\s+–ø–æ–ª\s*—á–∞—Å–∞\b", re.I)
# 2) —á–µ—Ä–µ–∑ N –µ–¥–∏–Ω–∏—Ü
RX_REL = [
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫\.?)\b", re.I), "seconds"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω\.?)\b", re.I), "minutes"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å(?:–∞|–æ–≤)?|—á\.?)\b", re.I), "hours"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I), "days"),
]
# 2a) –ï–î–ò–ù. —á–∏—Å–ª–æ: ¬´—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É/—Å–µ–∫—É–Ω–¥—É/—á–∞—Å/–¥–µ–Ω—å¬ª
RX_REL_SINGULAR = [
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+—Å–µ–∫—É–Ω–¥[—É—é]\b", re.I), "seconds", 1),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+–º–∏–Ω—É—Ç[—É—é]\b", re.I), "minutes", 1),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+—á–∞—Å\b", re.I), "hours", 1),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+–¥–µ–Ω—å\b", re.I), "days", 1),
]
# 3) –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞/—á–µ—Ä–µ–∑ N –¥–Ω–µ–π
RX_SAME_TIME = re.compile(r"\b–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è\b", re.I)
RX_TMR = re.compile(r"\b–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_ATMR = re.compile(r"\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_IN_N_DAYS = re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I)
# 4) —Å–ª–æ–≤–∞ –¥–Ω—è + –≤—Ä–µ–º—è (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 7[:30] (—É—Ç—Ä–∞/–≤–µ—á–µ—Ä–∞/‚Ä¶))
RX_DAY_WORD_TIME = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏))?\b",
    re.I | re.DOTALL
)
# 5) —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è ¬´–≤ 7[:30] [—É—Ç—Ä–∞/–≤–µ—á–µ—Ä–∞]¬ª
RX_ONLY_TIME = re.compile(r"\b–≤\s*(\d{1,2})(?::(\d{2}))?\b", re.I)
# 6) ¬´DD.MM[.YYYY]¬ª (+ –æ–ø—Ü. –≤—Ä–µ–º—è)
RX_DOT_DATE = re.compile(
    r"\b(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{2,4}))?"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏))?)?",
    re.I
)
# 7) ¬´DD –º–µ—Å—è—Ü–∞¬ª (+ –æ–ø—Ü. –≤—Ä–µ–º—è), ¬´24 –º–∞—è¬ª, ¬´24 –º–∞—è –≤ 7¬ª
RX_MONTH_DATE = re.compile(
    r"\b(\d{1,2})\s+([–ê-–Ø–∞-—è—ë–Å]+)\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏))?)?",
    re.I
)
# 8) ¬´N —á–∏—Å–ª–∞¬ª (+ –æ–ø—Ü. –≤—Ä–µ–º—è) ‚Äî –±–µ–∑ –º–µ—Å—è—Ü–∞
RX_DAY_OF_MONTH = re.compile(
    r"\b(\d{1,2})\s*—á–∏—Å–ª[–∞–æ]\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏))?)?",
    re.I
)

def parse_relative(text: str):
    s = norm(text)
    now = datetime.now(tz).replace(second=0, microsecond=0)

    if RX_HALF_HOUR.search(s):
        dt = now + timedelta(minutes=30)
        s2 = RX_HALF_HOUR.sub("", s).strip(" ,.-")
        return dt, s2

    # –µ–¥–∏–Ω–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã
    for rx, kind, val in RX_REL_SINGULAR:
        m = rx.search(s)
        if m:
            if kind == "seconds":
                dt = now + timedelta(seconds=val)
            elif kind == "minutes":
                dt = now + timedelta(minutes=val)
            elif kind == "hours":
                dt = now + timedelta(hours=val)
            else:
                dt = now + timedelta(days=val)
            s2 = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return dt, s2

    # —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    for rx, kind in RX_REL:
        m = rx.search(s)
        if m:
            n = int(m.group(1))
            if kind == "seconds":
                dt = now + timedelta(seconds=n)
            elif kind == "minutes":
                dt = now + timedelta(minutes=n)
            elif kind == "hours":
                dt = now + timedelta(hours=n)
            else:
                dt = now + timedelta(days=n)
            s2 = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return dt, s2
    return None

def parse_same_time(text: str):
    s = norm(text)
    if not RX_SAME_TIME.search(s):
        return None
    now = datetime.now(tz).replace(second=0, microsecond=0)
    days = None
    if RX_ATMR.search(s): days = 2
    elif RX_TMR.search(s): days = 1
    else:
        m = RX_IN_N_DAYS.search(s)
        if m:
            days = int(m.group(1))
    if days is None:
        return None
    dt = (now + timedelta(days=days)).replace(second=0, microsecond=0)
    s2 = RX_SAME_TIME.sub("", s)
    s2 = RX_TMR.sub("", s2)
    s2 = RX_ATMR.sub("", s2)
    s2 = RX_IN_N_DAYS.sub("", s2)
    return dt, s2.strip(" ,.-")

def apply_meridian(h: int, mer: str | None) -> int:
    if not mer:
        return h
    mer = mer.lower()
    if mer in ("–¥–Ω—è","–≤–µ—á–µ—Ä–∞") and h < 12: return h + 12
    if mer == "–Ω–æ—á–∏" and h == 12: return 0
    return h

def parse_dayword_time(text: str):
    s = norm(text)
    m = RX_DAY_WORD_TIME.search(s)
    if not m:
        return None
    word = m.group(1).lower()
    h = int(m.group(2))
    mm = int(m.group(3) or 0)
    mer = (m.group(4) or "").lower()

    now = datetime.now(tz).replace(second=0, microsecond=0)
    base = now.date()
    if word == "–∑–∞–≤—Ç—Ä–∞":
        base = (now + timedelta(days=1)).date()
    elif word == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
        base = (now + timedelta(days=2)).date()

    if mer in ("—É—Ç—Ä–∞","–¥–Ω—è","–≤–µ—á–µ—Ä–∞","–Ω–æ—á–∏"):
        hh = apply_meridian(h, mer)
        dt = mk_dt(base, hh, mm)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    # –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ: 7 -> 07:00 –∏–ª–∏ 19:00
    v1 = mk_dt(base, h % 24, mm)
    v2 = mk_dt(base, (h + 12) % 24, mm)
    if base == now.date():
        if v1 <= now: v1 = v1 + timedelta(days=1)
        if v2 <= now: v2 = v2 + timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def parse_only_time(text: str):
    s = norm(text)
    m = RX_ONLY_TIME.search(s)
    if not m:
        return None
    now = datetime.now(tz).replace(second=0, microsecond=0)
    h = int(m.group(1))
    mm = int(m.group(2) or 0)

    mer_m = re.search(r"(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏)", s, re.I)
    if mer_m:
        hh = apply_meridian(h, mer_m.group(1))
        dt = now.replace(hour=hh % 24, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    v1 = now.replace(hour=h % 24, minute=mm)
    v2 = now.replace(hour=(h + 12) % 24, minute=mm)
    if v1 <= now: v1 += timedelta(days=1)
    if v2 <= now: v2 += timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def parse_dot_date(text: str):
    s = norm(text)
    m = RX_DOT_DATE.search(s)
    if not m:
        return None
    dd = int(m.group(1)); mm = int(m.group(2))
    yy = m.group(3)
    hh = m.group(4); minu = m.group(5); mer = m.group(6)
    now = datetime.now(tz)
    yyyy = now.year if not yy else (int(yy) + 2000 if len(yy) == 2 else int(yy))
    try:
        base = date(yyyy, mm, dd)
    except ValueError:
        return None

    rest = RX_DOT_DATE.sub("", s, count=1).strip(" ,.-")

    if hh:
        h = int(hh)
        minute = int(minu or 0)
        if mer:
            # –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ
            h = apply_meridian(h, mer)
            dt = mk_dt(base, h, minute)
            return ("ok", dt, rest)
        else:
            # –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ -> –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≠–¢–£ –¥–∞—Ç—É
            dt1 = mk_dt(base, h % 24, minute)
            dt2 = mk_dt(base, (h + 12) % 24, minute)
            return ("amb", rest, soonest([dt1, dt2]))
    else:
        return ("day", base, rest)

def parse_month_date(text: str):
    s = norm(text)
    m = RX_MONTH_DATE.search(s)
    if not m:
        return None

    dd = int(m.group(1))
    mon = m.group(2).lower()
    if mon not in MONTHS:
        return None
    mm = MONTHS[mon]

    hh = m.group(3)
    minu = m.group(4)
    mer = (m.group(5) or "").lower() if m.group(5) else None

    now = datetime.now(tz)
    yyyy = now.year
    try:
        base = date(yyyy, mm, dd)
    except ValueError:
        return None
    if base < now.date():
        try:
            base = date(yyyy + 1, mm, dd)
        except ValueError:
            return None

    rest = RX_MONTH_DATE.sub("", s, count=1).strip(" ,.-")

    if hh:
        h = int(hh)
        minute = int(minu or 0)
        if mer:
            h = apply_meridian(h, mer)
            dt = mk_dt(base, h, minute)
            return ("ok", dt, rest)
        else:
            dt1 = mk_dt(base, h % 24, minute)
            dt2 = mk_dt(base, (h + 12) % 24, minute)
            return ("amb", rest, soonest([dt1, dt2]))
    else:
        return ("day", base, rest)

def parse_day_of_month(text: str):
    s = norm(text)
    m = RX_DAY_OF_MONTH.search(s)
    if not m:
        return None

    dd = int(m.group(1))
    hh = m.group(2)
    minu = m.group(3)
    mer = (m.group(4) or "").lower() if m.group(4) else None

    now = datetime.now(tz)
    base = nearest_future_day(dd, now)

    rest = RX_DAY_OF_MONTH.sub("", s, count=1).strip(" ,.-")

    if hh:
        h = int(hh)
        minute = int(minu or 0)
        if mer:
            h = apply_meridian(h, mer)
            dt = mk_dt(base, h, minute)
            return ("ok", dt, rest)
        else:
            dt1 = mk_dt(base, h % 24, minute)
            dt2 = mk_dt(base, (h + 12) % 24, minute)
            return ("amb", rest, soonest([dt1, dt2]))
    else:
        return ("day", base, rest)

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "–ü–æ–Ω–∏–º–∞—é: ¬´24 –º–∞—è –≤ 19¬ª, ¬´1 —á–∏—Å–ª–∞ –≤ 7¬ª, ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç/—á–∞—Å/–º–∏–Ω—É—Ç—É¬ª, "
        "¬´–∑–∞–≤—Ç—Ä–∞ –≤ 6¬ª, ¬´–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞¬ª.\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫, /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞."
    )

@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong ‚úÖ")

@dp.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
        return
    items = sorted(items, key=lambda r: r["remind_dt"])
    lines = [f"‚Ä¢ {r['text']} ‚Äî {r['remind_dt'].strftime('%d.%m %H:%M')} ({APP_TZ})" for r in items]
    await m.answer("\n".join(lines))

# ================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==================
@dp.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    text = norm(m.text)

    # –µ—Å–ª–∏ –∂–¥—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    if uid in PENDING:
        st = PENDING[uid]
        if st.get("variants"):
            await m.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è")
            return
        if st.get("base_date"):
            mt = re.search(r"(?:^|\b–≤\s*)(\d{1,2})(?::(\d{2}))?\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏)?\b", text, re.I)
            if not mt:
                await m.reply("–í–æ —Å–∫–æ–ª—å–∫–æ?")
                return
            h = int(mt.group(1)); minute = int(mt.group(2) or 0); mer = mt.group(3)
            hh = apply_meridian(h, mer)
            dt = mk_dt(st["base_date"], hh, minute)
            desc = st.get("description", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            PENDING.pop(uid, None)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
            return
        PENDING.pop(uid, None)

    # –í–ê–ñ–ù–û: –ø–æ—Ä—è–¥–æ–∫! —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ/–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã, –ø–æ—Ç–æ–º ¬´–ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è¬ª
    # ¬´—á–µ—Ä–µ–∑ ‚Ä¶¬ª
    r = parse_relative(text)
    if r:
        dt, rest = r
        desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
        plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
        return

    # ¬´–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è ‚Ä¶¬ª
    r = parse_same_time(text)
    if r:
        dt, rest = r
        desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
        plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
        return

    # ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ ‚Ä¶¬ª
    r = parse_dayword_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r
            desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
            return
        else:
            _, rest, variants = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "variants": variants, "repeat": "none"}
            await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?",
                          reply_markup=kb_variants(variants))
            return

    # –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ê–¢–´ (—Ä–∞–Ω—å—à–µ, —á–µ–º ¬´–ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è¬ª!)
    # –¥–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫–∏ ¬´DD.MM[.YYYY] [–≤ HH[:MM] ‚Ä¶]¬ª
    r = parse_dot_date(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r
            desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
            return
        elif tag == "amb":
            _, rest, variants = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "variants": variants, "repeat":"none"}
            await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?",
                          reply_markup=kb_variants(variants))
            return
        else:
            _, base, rest = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "base_date": base, "repeat":"none"}
            await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?")
            return

    # ¬´DD –º–µ—Å—è—Ü–∞ [–≤ HH[:MM] ‚Ä¶]¬ª
    r = parse_month_date(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r
            desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
            return
        elif tag == "amb":
            _, rest, variants = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "variants": variants, "repeat":"none"}
            await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?",
                          reply_markup=kb_variants(variants))
            return
        else:
            _, base, rest = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "base_date": base, "repeat":"none"}
            await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?")
            return

    # ¬´N —á–∏—Å–ª–∞ [–≤ HH[:MM] ‚Ä¶]¬ª
    r = parse_day_of_month(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r
            desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
            return
        elif tag == "amb":
            _, rest, variants = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "variants": variants, "repeat":"none"}
            await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?",
                          reply_markup=kb_variants(variants))
            return
        else:
            _, base, rest = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "base_date": base, "repeat":"none"}
            await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?")
            return

    # –ò –¢–û–õ–¨–ö–û –¢–ï–ü–ï–†–¨ ‚Äî ¬´–ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è¬ª
    r = parse_only_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r
            desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
            return
        else:
            _, rest, variants = r
            desc = clean_desc(rest or text)
            PENDING[uid] = {"description": desc, "variants": variants, "repeat": "none"}
            await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å ¬´{desc}¬ª?",
                          reply_markup=kb_variants(variants))
            return

    await m.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: ¬´24.05 19:00¬ª, ¬´24 –º–∞—è –≤ 19¬ª, ¬´1 —á–∏—Å–ª–∞ –≤ 7¬ª, ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 6¬ª.")
# ================== –ö–ù–û–ü–ö–ò ==================
@dp.callback_query(F.data.startswith("time|"))
async def choose_time(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("variants"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è")
        return
    try:
        iso = cb.data.split("|", 1)[1]
        dt = datetime.fromisoformat(iso)
        dt = tz.localize(dt) if dt.tzinfo is None else dt.astimezone(tz)
    except Exception as e:
        print("parse cb time error:", e)
        await cb.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
        return

    desc = PENDING[uid].get("description", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
    plan(REMINDERS[-1])

    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
