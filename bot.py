import os
import re
import asyncio
from datetime import datetime, timedelta, date
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ========= ENV / TZ =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(APP_TZ)

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=APP_TZ)

# –í —ç—Ç–æ–π –¥–µ–º–æ-–ø–∞–º—è—Ç–∏ –¥–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
REMINDERS: list[dict] = []
# PENDING[user_id] = {"description": str, "variants": [datetime], "base_date": date}
PENDING: dict[int, dict] = {}

# ========= HELPERS =========
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

def mk_dt(d: date, h: int, m: int) -> datetime:
    return tz.localize(datetime(d.year, d.month, d.day, h % 24, m % 60, 0, 0))

def fmt_dt(dt: datetime) -> str:
    return f"{dt.strftime('%d.%m')} –≤ {dt.strftime('%H:%M')} ({APP_TZ})"

def soonest(dts): return sorted(dts, key=lambda x: x)

def kb_variants(dts):
    rows = [[InlineKeyboardButton(text=human_label(dt), callback_data=f"time|{dt.isoformat()}")] for dt in soonest(dts)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def human_label(dt: datetime) -> str:
    now = datetime.now(tz)
    if dt.date() == now.date():
        dword = "–°–µ–≥–æ–¥–Ω—è"
    elif dt.date() == (now + timedelta(days=1)).date():
        dword = "–ó–∞–≤—Ç—Ä–∞"
    else:
        dword = dt.strftime("%d.%m")
    return f"{dword} –≤ {dt.strftime('%H:%M')}"

def plan(rem):
    scheduler.add_job(send_reminder, "date", run_date=rem["remind_dt"], args=[rem["user_id"], rem["text"]])

async def send_reminder(uid: int, text: str):
    try:
        await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("send_reminder error:", e)

def hour_is_unambiguous(h: int) -> bool:
    return h >= 13 or h == 0  # 13..23 –∏–ª–∏ 00

def text_looks_like_new_request(s: str) -> bool:
    s = norm(s).lower()
    if re.search(r"\b—á–µ—Ä–µ–∑\b", s): return True
    if re.search(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b", s): return True
    if re.search(r"\b\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?", s): return True
    if re.search(r"\b\d{4}\b", s): return True  # 1710
    if re.search(r"\b–≤\s*\d{1,2}(:\d{2})?\b", s): return True
    if re.search(r"\b–≤\s*\d{1,2}\s*—á–∞—Å", s): return True
    return False

# ========= LEXICON =========
MONTHS = {
    "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
    "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12,
}

WEEKDAY_INDEX = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,"–≤—Ç–æ—Ä–Ω–∏–∫":1,"—Å—Ä–µ–¥–∞":2,"—Å—Ä–µ–¥—É":2,"—á–µ—Ç–≤–µ—Ä–≥":3,"–ø—è—Ç–Ω–∏—Ü–∞":4,"–ø—è—Ç–Ω–∏—Ü—É":4,"—Å—É–±–±–æ—Ç–∞":5,"—Å—É–±–±–æ—Ç—É":5,"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6
}

# –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º ‚Äî –¥–ª—è ¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª (–∑–Ω–∞—á–∏—Ç 2:30)
ORD_GEN_TO_PREV_HOUR = {
    "–ø–µ—Ä–≤–æ–≥–æ":12, "–≤—Ç–æ—Ä–æ–≥–æ":1, "—Ç—Ä–µ—Ç—å–µ–≥–æ":2, "—á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ":3, "—á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ":3, "–ø—è—Ç–æ–≥–æ":4, "—à–µ—Å—Ç–æ–≥–æ":5,
    "—Å–µ–¥—å–º–æ–≥–æ":6, "–≤–æ—Å—å–º–æ–≥–æ":7, "–¥–µ–≤—è—Ç–æ–≥–æ":8, "–¥–µ—Å—è—Ç–æ–≥–æ":9, "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ":10, "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ":11
}
# –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Å–æ–≤ –¥–ª—è ¬´–±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —á–µ—Ç—ã—Ä–µ¬ª
HOUR_WORD_TO_NUM = {
    "—á–∞—Å":1,"–¥–≤–∞":2,"—Ç—Ä—ë—Ö":3,"—Ç—Ä–µ—Ö":3,"—Ç—Ä–∏":3,"—á–µ—Ç—ã—Ä–µ":4,"–ø—è—Ç—å":5,"—à–µ—Å—Ç—å":6,"—Å–µ–º—å":7,"–≤–æ—Å–µ–º—å":8,
    "–¥–µ–≤—è—Ç—å":9,"–¥–µ—Å—è—Ç—å":10,"–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å":11,"–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å":12,
    "–¥–≤—É—Ö":2,"—Ç—Ä—ë—Ö":3,"—Ç—Ä–µ—Ö":3,"—á–µ—Ç—ã—Ä—ë—Ö":4,"—á–µ—Ç—ã—Ä–µ—Ö":4,"–ø—è—Ç–∏":5,"—à–µ—Å—Ç–∏":6,"—Å–µ–º–∏":7,"–≤–æ—Å—å–º–∏":8,
    "–¥–µ–≤—è—Ç–∏":9,"–¥–µ—Å—è—Ç–∏":10,"–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∏":11,"–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∏":12
}
MIN_WORD_TO_NUM = {
    "–ø—è—Ç–∏":5,"–¥–µ—Å—è—Ç–∏":10,"–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏":15,"–¥–≤–∞–¥—Ü–∞—Ç–∏":20,"–¥–≤–∞–¥—Ü–∞—Ç–∏ –ø—è—Ç–∏":25
}

# ========= REGEX =========
RX_TODAY  = re.compile(r"\b—Å–µ–≥–æ–¥–Ω—è\b", re.I)
RX_TMR    = re.compile(r"\b–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_ATMR   = re.compile(r"\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_A3     = re.compile(r"\b–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b", re.I)
RX_DAY_ONLY = re.compile(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b", re.I)

RX_ANY_MER = re.compile(r"\b(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b", re.I)

RX_DAY_WORD_TIME = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b–≤\s*(\d{1,2})(?::(\d{2}))?"
    r"(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?\b",
    re.I | re.DOTALL
)
RX_DAY_WORD_ONLY = re.compile(
    r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\b.*?\b(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b",
    re.I | re.DOTALL
)

RX_ONLY_TIME = re.compile(r"\b–≤\s*(\d{1,2})(?::(\d{2}))?\b", re.I)
RX_EXACT_HOUR = re.compile(r"\b–≤\s*(\d{1,2})\s*—á–∞—Å(–æ–≤|–∞)?\b", re.I)
RX_BARE_TIME_WITH_MER = re.compile(r"\b(\d{1,2})(?::(\d{2}))?\s*(—É—Ç—Ä–æ–º|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|–Ω–æ—á–∏)\b", re.I)

RX_DOT_DATE = re.compile(
    r"\b(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{2,4}))?"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)
RX_MONTH_DATE = re.compile(
    r"\b(\d{1,2})\s+([–ê-–Ø–∞-—è—ë–Å]+)\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)
RX_DAY_OF_MONTH = re.compile(
    r"\b(\d{1,2})\s*—á–∏—Å–ª[–∞–æ]\b"
    r"(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–¥–Ω[–µ—ë]–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á—å—é|–Ω–æ—á–∏))?)?",
    re.I
)

RX_HALF_HOUR = re.compile(r"\b—á–µ—Ä–µ–∑\s+–ø–æ–ª\s*—á–∞—Å–∞\b", re.I)
RX_REL = [
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫\.?)\b", re.I), "seconds"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω\.?)\b", re.I), "minutes"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(—á–∞—Å(?:–∞|–æ–≤)?|—á\.?)\b", re.I), "hours"),
    (re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I), "days"),
]
RX_IN_WEEKS = re.compile(
    r"\b—á–µ—Ä–µ–∑\s*(\d+)?\s*–Ω–µ–¥–µ–ª[—é–∏]\b(?:\s*–≤\s*(\d{1,2})(?::(\d{2}))?)?",
    re.I
)

RX_SAME_TIME = re.compile(r"\b–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è\b", re.I)
RX_IN_N_DAYS = re.compile(r"\b—á–µ—Ä–µ–∑\s+(\d+)\s*(–¥–Ω(?:—è|–µ–π)?|–¥–µ–Ω—å|–¥–Ω\.?)\b", re.I)

# 1710 ‚Üí 17:10
RX_COMPACT_HHMM = re.compile(r"(?<![:\d])([01]?\d|2[0-3])([0-5]\d)(?!\d)", re.I)

# ¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª, ¬´–ø–æ–ª —Ç—Ä–µ—Ç—å–µ–≥–æ¬ª
RX_HALF_OF_NEXT = re.compile(r"\b–ø–æ–ª\s*([–ê-–Ø–∞-—è—ë]+|\d+)\b", re.I)

# ¬´–±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å¬ª, ¬´–±–µ–∑ 15 —á–µ—Ç—ã—Ä–µ¬ª
RX_BEZ = re.compile(
    r"\b–±–µ–∑\s+([–ê-–Ø–∞-—è—ë]+|\d+)\s+([–ê-–Ø–∞-—è—ë]+|\d+)\b",
    re.I
)

# ========= PARSE LOGIC =========
def dayword_to_base(word: str, now: datetime) -> date:
    w = word.lower()
    if w == "—Å–µ–≥–æ–¥–Ω—è": return now.date()
    if w == "–∑–∞–≤—Ç—Ä–∞": return (now + timedelta(days=1)).date()
    if w == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return (now + timedelta(days=2)).date()
    if w == "–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": return (now + timedelta(days=3)).date()
    return now.date()

def parse_day_only(text: str):
    """–¢–æ–ª—å–∫–æ ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/‚Ä¶¬ª –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è"""
    s = norm(text)
    if RX_DAY_WORD_TIME.search(s) or RX_DAY_WORD_ONLY.search(s):
        return None
    m = RX_DAY_ONLY.search(s)
    if not m:
        return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("need_time", base, rest)

def parse_dayword_part_only(text: str):
    """–¥–µ–Ω—å + —á–∞—Å—Ç—å —Å—É—Ç–æ–∫ (—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º/‚Ä¶) –±–µ–∑ —Ü–∏—Ñ—Ä ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è"""
    s = norm(text)
    m = RX_DAY_WORD_ONLY.search(s)
    if not m: return None
    now = datetime.now(tz)
    base = dayword_to_base(m.group(1), now)
    rest = RX_DAY_WORD_ONLY.sub("", s, count=1).strip(" ,.-")
    return ("need_time", base, rest)

def parse_dayword_time(text: str):
    """—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞‚Ä¶ –≤ HH[:MM] (+–º–µ—Ä–∏–¥–∏–∞–Ω)"""
    s = norm(text)
    m = RX_DAY_WORD_TIME.search(s)
    if not m: return None
    now = datetime.now(tz).replace(second=0, microsecond=0)
    base = dayword_to_base(m.group(1), now)
    h = int(m.group(2)); mm = int(m.group(3) or 0)
    mer = (m.group(4) or "").lower()

    if mer:
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = mk_dt(base, h % 24, mm)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    if hour_is_unambiguous(h):
        dt = mk_dt(base, h % 24, mm)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    # –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ (8 -> 08:00/20:00): –≤–∞—Ä–∏–∞–Ω—Ç—ã
    v1 = mk_dt(base, h % 24, mm)
    v2 = mk_dt(base, (h + 12) % 24, mm)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def parse_only_time(text: str):
    s = norm(text)
    now = datetime.now(tz).replace(second=0, microsecond=0)

    # ¬´10 —É—Ç—Ä–∞ / 7 –≤–µ—á–µ—Ä–∞¬ª
    mb = RX_BARE_TIME_WITH_MER.search(s)
    if mb:
        h = int(mb.group(1)); mm = int(mb.group(2) or 0); mer = mb.group(3).lower()
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = now.replace(hour=h % 24, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:mb.start()] + s[mb.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    # ¬´–≤ 17:10¬ª / ¬´–≤ 17¬ª
    m = RX_ONLY_TIME.search(s)
    if m:
        h = int(m.group(1)); mm = int(m.group(2) or 0)
        if hour_is_unambiguous(h):
            dt = now.replace(hour=h % 24, minute=mm)
            if dt <= now: dt += timedelta(days=1)
            rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return ("ok", dt, rest)
        # 8 -> –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ (08:00/20:00)
        v1 = now.replace(hour=h % 24, minute=mm)
        v2 = now.replace(hour=(h + 12) % 24, minute=mm)
        if v1 <= now: v1 += timedelta(days=1)
        if v2 <= now: v2 += timedelta(days=1)
        rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
        return ("amb", rest, soonest([v1, v2]))

    # ¬´1710¬ª ‚Üí 17:10
    mc = RX_COMPACT_HHMM.search(s)
    if mc:
        h = int(mc.group(1)); mm = int(mc.group(2))
        dt = now.replace(hour=h, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = (s[:mc.start()] + s[mc.end():]).strip(" ,.-")
        return ("ok", dt, rest)

    return None

def parse_exact_hour(text: str):
    s = norm(text); m = RX_EXACT_HOUR.search(s)
    if not m: return None
    h = int(m.group(1))
    now = datetime.now(tz).replace(second=0, microsecond=0)
    dt = now.replace(hour=h % 24, minute=0)
    if dt <= now: dt += timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return dt, rest

def parse_relative(text: str):
    s = norm(text); now = datetime.now(tz).replace(second=0, microsecond=0)

    if RX_HALF_HOUR.search(s):
        dt = now + timedelta(minutes=30)
        return dt, RX_HALF_HOUR.sub("", s).strip(" ,.-")

    for rx, kind in RX_REL:
        m = rx.search(s)
        if m:
            n = int(m.group(1))
            if kind == "seconds": dt = now + timedelta(seconds=n)
            elif kind == "minutes": dt = now + timedelta(minutes=n)
            elif kind == "hours": dt = now + timedelta(hours=n)
            else: dt = now + timedelta(days=n)
            rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
            return dt, rest
    return None

def parse_in_weeks(text: str):
    """—á–µ—Ä–µ–∑ (n) –Ω–µ–¥–µ–ª—é/–Ω–µ–¥–µ–ª–∏ [–≤ HH[:MM]]"""
    s = norm(text)
    m = RX_IN_WEEKS.search(s)
    if not m: return None
    n = int(m.group(1) or 1)
    hh = m.group(2); mm = m.group(3)
    now = datetime.now(tz)
    base = (now + timedelta(days=7*n)).date()
    rest = RX_IN_WEEKS.sub("", s, count=1).strip(" ,.-")
    if hh:
        dt = mk_dt(base, int(hh), int(mm or 0))
        return ("ok", dt, rest)
    else:
        return ("need_time", base, rest)

def parse_dot_date(text: str):
    s = norm(text); m = RX_DOT_DATE.search(s)
    if not m: return None
    dd, mm = int(m.group(1)), int(m.group(2))
    yy, hh, minu, mer = m.group(3), m.group(4), m.group(5), (m.group(6) or "").lower()
    now = datetime.now(tz); yyyy = now.year if not yy else (int(yy)+2000 if len(yy)==2 else int(yy))
    try: base = date(yyyy, mm, dd)
    except ValueError: return None
    rest = RX_DOT_DATE.sub("", s, count=1).strip(" ,.-")

    if not hh: return ("need_time", base, rest)
    h = int(hh); minute = int(minu or 0)
    if mer:
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        return ("ok", mk_dt(base, h%24, minute), rest)
    if hour_is_unambiguous(h): return ("ok", mk_dt(base, h%24, minute), rest)
    v1 = mk_dt(base, h%24, minute); v2 = mk_dt(base, (h+12)%24, minute)
    return ("amb", rest, soonest([v1, v2]))

def parse_month_date(text: str):
    s = norm(text); m = RX_MONTH_DATE.search(s)
    if not m: return None
    dd = int(m.group(1)); mon = m.group(2).lower()
    if mon not in MONTHS: return None
    mm = MONTHS[mon]
    hh, minu, mer = m.group(3), m.group(4), (m.group(5) or "").lower()
    now = datetime.now(tz); yyyy = now.year
    try: base = date(yyyy, mm, dd)
    except ValueError: return None
    if base < now.date():
        try: base = date(yyyy+1, mm, dd)
        except ValueError: return None
    rest = RX_MONTH_DATE.sub("", s, count=1).strip(" ,.-")
    if not hh: return ("need_time", base, rest)
    h = int(hh); minute = int(minu or 0)
    if mer:
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        return ("ok", mk_dt(base, h%24, minute), rest)
    if hour_is_unambiguous(h): return ("ok", mk_dt(base, h%24, minute), rest)
    v1 = mk_dt(base, h%24, minute); v2 = mk_dt(base, (h+12)%24, minute)
    return ("amb", rest, soonest([v1, v2]))

def nearest_future_day(day: int, now: datetime) -> date:
    y,m = now.year, now.month
    try:
        cand = date(y,m,day)
        if cand > now.date(): return cand
    except ValueError: pass
    y2,m2 = (y+1,1) if m==12 else (y,m+1)
    for dmax in (31,30,29,28):
        try: return date(y2,m2, min(day,dmax))
        except ValueError: continue
    return date(y2,m2,28)

def parse_day_of_month(text: str):
    s = norm(text); m = RX_DAY_OF_MONTH.search(s)
    if not m: return None
    dd = int(m.group(1)); hh, minu, mer = m.group(2), m.group(3), (m.group(4) or "").lower()
    now = datetime.now(tz); base = nearest_future_day(dd, now)
    rest = RX_DAY_OF_MONTH.sub("", s, count=1).strip(" ,.-")
    if not hh: return ("need_time", base, rest)
    h = int(hh); minute = int(minu or 0)
    if mer:
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        return ("ok", mk_dt(base, h%24, minute), rest)
    if hour_is_unambiguous(h): return ("ok", mk_dt(base, h%24, minute), rest)
    v1 = mk_dt(base, h%24, minute); v2 = mk_dt(base, (h+12)%24, minute)
    return ("amb", rest, soonest([v1, v2]))

def parse_weekday_part_only(text: str):
    """–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è (–±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤)"""
    s = norm(text)
    m_w = re.search(r"\b(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥[–∞—É—ã]|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü[–∞—É—ã]|—Å—É–±–±–æ—Ç[–∞—É—ã]|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å[–µ—è])\b", s, re.I)
    m_p = RX_ANY_MER.search(s)
    if m_w and m_p:
        wd = m_w.group(1).lower()
        idx = WEEKDAY_INDEX.get(wd)
        if idx is None: return None
        now = datetime.now(tz)
        days_ahead = (idx - now.weekday()) % 7
        if days_ahead == 0: days_ahead = 7
        base = (now + timedelta(days=days_ahead)).date()
        rest = (s[:m_w.start()] + s[m_w.end():]).strip(" ,.-")
        rest = RX_ANY_MER.sub("", rest, count=1).strip(" ,.-")
        return ("need_time", base, rest)
    return None

def parse_half_of_next(text: str):
    """–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ / –ø–æ–ª —Ç—Ä–µ—Ç—å–µ–≥–æ -> 2:30 (–∏–ª–∏ 14:30)"""
    s = norm(text)
    m = RX_HALF_OF_NEXT.search(s)
    if not m: return None
    word = m.group(1).lower()
    now = datetime.now(tz)
    # –µ—Å–ª–∏ —Ü–∏—Ñ—Ä–∞: ¬´–ø–æ–ª 7¬ª -> 6:30
    if word.isdigit():
        prev = max(0, int(word)-1)
        base_hour = prev if prev != 0 else 12  # 12:30 –¥–ª—è ¬´–ø–æ–ª 1¬ª
    else:
        base_hour = ORD_GEN_TO_PREV_HOUR.get(word)
        if base_hour is None:
            return None
    # —É—Ç–æ—á–Ω–µ–Ω–∏–µ ¬´—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º¬ª?
    mer_m = RX_ANY_MER.search(s)
    h = base_hour
    if mer_m:
        mer = mer_m.group(1).lower()
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = now.replace(hour=h % 24, minute=30, second=0, microsecond=0)
        if dt <= now: dt += timedelta(days=1)
        rest = RX_ANY_MER.sub("", (s[:m.start()] + s[m.end():]).strip(" ,.-"), count=1)
        return ("ok", dt, rest)
    # –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è ‚Äî –¥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã 02:30 –∏ 14:30
    v1 = now.replace(hour=h % 24, minute=30, second=0, microsecond=0)
    v2 = now.replace(hour=(h + 12) % 24, minute=30, second=0, microsecond=0)
    if v1 <= now: v1 += timedelta(days=1)
    if v2 <= now: v2 += timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

def word_or_digit_to_int(token: str) -> int | None:
    t = token.lower()
    if t.isdigit(): return int(t)
    if t in MIN_WORD_TO_NUM: return MIN_WORD_TO_NUM[t]
    if t in HOUR_WORD_TO_NUM: return HOUR_WORD_TO_NUM[t]
    return None

def parse_bez(text: str):
    """–±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å -> 4:55 ; –±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —á–µ—Ç—ã—Ä–µ -> 3:45"""
    s = norm(text)
    m = RX_BEZ.search(s)
    if not m: return None
    mins_token = m.group(1); hour_token = m.group(2)
    mins = word_or_digit_to_int(mins_token)
    hour = word_or_digit_to_int(hour_token)
    if mins is None or hour is None: return None
    if not (1 <= mins < 60 and 1 <= hour <= 12): return None
    # 4:55 = (hour-1): (60-mins)
    h = (hour - 1) % 12
    if h == 0: h = 12
    mm = 60 - mins
    now = datetime.now(tz)
    # —É—Ç–æ—á–Ω–µ–Ω–∏–µ ¬´—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º¬ª?
    mer_m = RX_ANY_MER.search(s)
    if mer_m:
        mer = mer_m.group(1).lower()
        if mer.startswith("–¥–Ω") or mer.startswith("–≤–µ—á"): h = h + 12 if h < 12 else h
        if mer.startswith("–Ω–æ—á"): h = 0 if h == 12 else h
        dt = now.replace(hour=h % 24, minute=mm)
        if dt <= now: dt += timedelta(days=1)
        rest = RX_ANY_MER.sub("", (s[:m.start()] + s[m.end():]).strip(" ,.-"), count=1)
        return ("ok", dt, rest)
    # –≤–∞—Ä–∏–∞–Ω—Ç—ã (08:xx/20:xx)
    v1 = now.replace(hour=h % 24, minute=mm)
    v2 = now.replace(hour=(h + 12) % 24, minute=mm)
    if v1 <= now: v1 += timedelta(days=1)
    if v2 <= now: v2 += timedelta(days=1)
    rest = (s[:m.start()] + s[m.end():]).strip(" ,.-")
    return ("amb", rest, soonest([v1, v2]))

# ========= COMMANDS =========
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "‚Ä¢ –ü–æ–Ω–∏–º–∞—é: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 19¬ª, ¬´24.05 21:30¬ª, ¬´—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 15¬ª, ¬´1710¬ª, "
        "¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª, ¬´–±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —á–µ—Ç—ã—Ä–µ¬ª, ¬´–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º¬ª (–ø–æ–ø—Ä–æ—à—É –≤—Ä–µ–º—è).\n"
        "‚Ä¢ –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ ¬´–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞/‚Ä¶¬ª ‚Äî —Å–ø—Ä–æ—à—É –≤—Ä–µ–º—è.\n"
        "‚Ä¢ –î–ª—è ¬´—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º/–¥–Ω—ë–º/–Ω–æ—á—å—é¬ª –±–µ–∑ —Ü–∏—Ñ—Ä ‚Äî –≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞—é —Ç–æ—á–Ω—ã–µ —á–∞—Å—ã.\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫, /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ."
    )

@dp.message(Command("ping"))
async def cmd_ping(m: Message): await m.answer("pong ‚úÖ")

@dp.message(Command("cancel"))
async def cmd_cancel(m: Message):
    uid = m.from_user.id
    if uid in PENDING:
        PENDING.pop(uid, None)
        await m.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    else:
        await m.reply("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

@dp.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
        return
    items = sorted(items, key=lambda r: r["remind_dt"])
    lines = [f"‚Ä¢ {r['text']} ‚Äî {fmt_dt(r['remind_dt'])}" for r in items]
    await m.answer("\n".join(lines))

# ========= ROUTER =========
@dp.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    text = norm(m.text)

    # 0) –µ—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    if uid in PENDING:
        st = PENDING[uid]
        if text.lower() in ("–æ—Ç–º–µ–Ω–∞","/cancel","cancel"):
            PENDING.pop(uid, None); await m.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ.")
            return
        if st.get("variants"):
            # –∂–¥—ë–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫; –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî —Å–±—Ä–æ—Å–∏–º
            if text_looks_like_new_request(text):
                PENDING.pop(uid, None)
            else:
                await m.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=kb_variants(st["variants"]))
                return
        elif st.get("base_date"):
            mt = re.search(r"(?:^|\b–≤\s*)(\d{1,2})(?::(\d{2}))?\b", text, re.I)
            if not mt:
                await m.reply("–ù—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 19 –∏–ª–∏ 19:30.")
                return
            h = int(mt.group(1)); minute = int(mt.group(2) or 0)
            dt = mk_dt(st["base_date"], h, minute)
            desc = st.get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            PENDING.pop(uid, None)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
            return

    # 1) —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å (¬´–∑–∞–≤—Ç—Ä–∞¬ª, ¬´–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞¬ª)
    r = parse_day_only(text)
    if r:
        _, base, rest = r
        desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "base_date": base}
        await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ? –ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10:30.")
        return

    # 2) –¥–µ–Ω—å + —á–∞—Å—Ç—å —Å—É—Ç–æ–∫ (–±–µ–∑ —Ü–∏—Ñ—Ä)
    r = parse_dayword_part_only(text)
    if r:
        _, base, rest = r
        desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "base_date": base}
        await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19 –∏–ª–∏ 19:30)")
        return

    # 3) —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    r = parse_in_weeks(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, base, rest = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "base_date": base}
        await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ?")
        return

    # 4) –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ ¬´—á–µ—Ä–µ–∑ ‚Ä¶¬ª
    r = parse_relative(text)
    if r:
        dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return

    # 5) ¬´–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ N –¥–Ω–µ–π¬ª
    m_same = RX_SAME_TIME.search(text)
    if m_same:
        now = datetime.now(tz).replace(second=0, microsecond=0)
        m_nd = RX_IN_N_DAYS.search(text)
        if m_nd:
            n = int(m_nd.group(1))
            dt = now + timedelta(days=n)
            desc = clean_desc(RX_IN_N_DAYS.sub("", RX_SAME_TIME.sub("", text)).strip(" ,.-"))
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return

    # 6) ¬´—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞ –≤ HH[:MM]¬ª
    r = parse_dayword_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    # 7) ¬´–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º¬ª
    r = parse_weekday_part_only(text)
    if r:
        _, base, rest = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "base_date": base}
        await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ?"); return

    # 8) –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞—Ç—ã
    for parser in (parse_dot_date, parse_month_date, parse_day_of_month):
        r = parser(text)
        if r:
            tag = r[0]
            if tag == "ok":
                _, dt, rest = r; desc = clean_desc(rest or text)
                REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
                await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
            if tag == "amb":
                _, rest, variants = r; desc = clean_desc(rest or text)
                PENDING[uid] = {"description": desc, "variants": variants}
                await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return
            if tag == "need_time":
                _, base, rest = r; desc = clean_desc(rest or text)
                PENDING[uid] = {"description": desc, "base_date": base}
                await m.reply(f"–û–∫–µ–π, {base.strftime('%d.%m')}. –í–æ —Å–∫–æ–ª—å–∫–æ?"); return

    # 9) ¬´–≤ 17 —á–∞—Å–æ–≤¬ª
    r = parse_exact_hour(text)
    if r:
        dt, rest = r; desc = clean_desc(rest or text)
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return

    # 10) ¬´1710¬ª / ¬´–≤ 17:10¬ª / ¬´10 —É—Ç—Ä–∞¬ª
    r = parse_only_time(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    # 11) ¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª
    r = parse_half_of_next(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    # 12) ¬´–±–µ–∑ –ø—è—Ç–∏ –ø—è—Ç—å¬ª
    r = parse_bez(text)
    if r:
        tag = r[0]
        if tag == "ok":
            _, dt, rest = r; desc = clean_desc(rest or text)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"}); plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}"); return
        _, rest, variants = r; desc = clean_desc(rest or text)
        PENDING[uid] = {"description": desc, "variants": variants}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(variants)); return

    await m.reply(
        "–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 19¬ª, ¬´24.05 21:30¬ª, ¬´—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 15¬ª, "
        "¬´1710¬ª, ¬´–ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ¬ª, ¬´–±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —á–µ—Ç—ã—Ä–µ¬ª, ¬´–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É—Ç—Ä–æ–º¬ª (–ø–æ—Ç–æ–º –≤—Ä–µ–º—è)."
    )

# ========= CALLBACKS =========
@dp.callback_query(F.data.startswith("time|"))
async def cb_time(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("variants"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è"); return
    iso = cb.data.split("|", 1)[1]
    dt = datetime.fromisoformat(iso)
    dt = tz.localize(dt) if dt.tzinfo is None else dt.astimezone(tz)
    desc = PENDING[uid].get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
    plan(REMINDERS[-1])
    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ========= RUN =========
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
