import os
import re
import asyncio
from datetime import datetime, timedelta
import pytz
import json

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ====== LLM client (OpenAI-style) ======
# pip install openai==1.*  (–Ω–æ–≤—ã–π SDK)
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")  # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å

# ========= ENV / TZ =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_TZ = os.getenv("APP_TZ", "Europe/Moscow")
tz = pytz.timezone(APP_TZ)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

scheduler = AsyncIOScheduler(timezone=tz)

# –í –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (MVP)
REMINDERS: list[dict] = []
PENDING: dict[int, dict] = {}  # {"description":..., "candidates":[iso,...]}

# ========= HELPERS =========
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

def fmt_dt(dt: datetime) -> str:
    return f"{dt.strftime('%d.%m')} –≤ {dt.strftime('%H:%M')} ({APP_TZ})"

def as_local(dt_iso: str) -> datetime:
    dt = datetime.fromisoformat(dt_iso.replace("Z","+00:00"))
    if dt.tzinfo is None:
        dt = tz.localize(dt)  # —Å—á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º
    else:
        dt = dt.astimezone(tz)
    return dt

def kb_variants(dt_isos: list[str]) -> InlineKeyboardMarkup:
    dts = [as_local(x) for x in dt_isos]
    dts = sorted(dts)
    def human_label(dt: datetime) -> str:
        now = datetime.now(tz)
        if dt.date() == now.date():
            d = "–°–µ–≥–æ–¥–Ω—è"
        elif dt.date() == (now + timedelta(days=1)).date():
            d = "–ó–∞–≤—Ç—Ä–∞"
        else:
            d = dt.strftime("%d.%m")
        return f"{d} –≤ {dt.strftime('%H:%M')}"
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=human_label(dt), callback_data=f"time|{dt.isoformat()}")] for dt in dts]
    )

def plan(rem):
    scheduler.add_job(send_reminder, "date", run_date=rem["remind_dt"], args=[rem["user_id"], rem["text"]])

async def send_reminder(uid: int, text: str):
    try:
        await bot.send_message(uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
    except Exception as e:
        print("send_reminder error:", e)

# ========= LLM PARSER =========
SYSTEM_PROMPT = """–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ó–∞–¥–∞—á–∞: –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ö–µ–º–æ–π:
{
  "ok": true|false,                      // —É–¥–∞–ª–æ—Å—å –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
  "description": "—Å—Ç—Ä–æ–∫–∞",               // —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å (–∫—Ä–∞—Ç–∫–æ)
  "datetimes": ["ISO8601", ...],         // —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ)
  "need_clarification": false|true,      // –Ω—É–∂–Ω–∞ –ª–∏ —É—Ç–æ—á–Ω—è–ª–∫–∞
  "clarify_type": "time|date|both|none", // —á—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å
  "reason": "–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}

–ü—Ä–∞–≤–∏–ª–∞:
- –ü–æ–Ω–∏–º–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—ã: "–∑–∞–≤—Ç—Ä–∞ –≤ –ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ", "–±–µ–∑ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏ —á–µ—Ç—ã—Ä–µ", "–≤ –ø–Ω —É—Ç—Ä–æ–º", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞", "—Å–µ–≥–æ–¥–Ω—è –≤ 1710".
- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —á–∞—Å—ã –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–≤ 6"), –≤–µ—Ä–Ω–∏ –¥–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: 06:00 –∏ 18:00 (–∏–ª–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É).
- –ï—Å–ª–∏ —Å–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –±–µ–∑ –¥–∞—Ç—ã ‚Äî —Å—Ç–∞–≤—å –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ.
- –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî ok=false, need_clarification=true, clarify_type="time", datetimes –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
- –ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ (–æ–¥–∏–Ω —Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) ‚Äî ok=true, need_clarification=false –∏ datetimes —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –¥–∞—Ç—É-–≤—Ä–µ–º—è.
- –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–¥–µ–ª—è–π –∏–∑ —Ñ—Ä–∞–∑—ã, —É–±–∏—Ä–∞—è –≤–≤–æ–¥–Ω—ã–µ "–Ω–∞–ø–æ–º–Ω–∏", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", –ø—Ä–µ–¥–ª–æ–≥–∏ –∏ —Ç.–ø.
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_tz).
"""

def build_user_prompt(text: str) -> str:
    now = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    return json.dumps({
        "user_text": text,
        "now_local": now,
        "user_tz": APP_TZ,
        "locale": "ru-RU"
    }, ensure_ascii=False)

async def ai_parse(text: str) -> dict:
    """–í—ã–∑—ã–≤–∞–µ—Ç LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∫—Ç –ø–æ —Å—Ö–µ–º–µ –≤—ã—à–µ. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫."""
    if not (OpenAI and OPENAI_API_KEY):
        # –§–æ–ª–±—ç–∫: –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∏ ‚Äî –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è
        return {"ok": False, "description": clean_desc(text), "datetimes": [], "need_clarification": True, "clarify_type": "time", "reason": "LLM disabled"}
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        rsp = await asyncio.to_thread(
            client.chat.completions.create,
            model=OPENAI_MODEL,
            temperature=0.2,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": build_user_prompt(text)}
            ],
            response_format={"type": "json_object"},
        )
        content = rsp.choices[0].message.content
        data = json.loads(content)
        # –°–∞–Ω–∏—Ç–∞–π–∑
        data.setdefault("ok", False)
        data.setdefault("description", clean_desc(text))
        data.setdefault("datetimes", [])
        data.setdefault("need_clarification", not data.get("ok"))
        data.setdefault("clarify_type", "time" if not data.get("ok") else "none")
        return data
    except Exception as e:
        print("ai_parse error:", e)
        return {"ok": False, "description": clean_desc(text), "datetimes": [], "need_clarification": True, "clarify_type": "time", "reason": "LLM error"}

# ========= COMMANDS =========
@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ü–æ–Ω–∏–º–∞—é: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ –ø–æ–ª—Ç—Ä–µ—Ç—å–µ–≥–æ –ø–∞–¥–µ–ª¬ª, ¬´–≤ –ø–Ω —É—Ç—Ä–æ–º –ø–æ–∑–≤–æ–Ω–∏—Ç—å –í–∞—Å–µ¬ª, "
        "¬´—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —á–∞–π¬ª, ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 1710 –æ—Ç—á—ë—Ç¬ª.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ ‚Äî —Å–ø—Ä–æ—à—É –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫, /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ."
    )

@router.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = [r for r in REMINDERS if r["user_id"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
        return
    items = sorted(items, key=lambda r: r["remind_dt"])
    lines = [f"‚Ä¢ {r['text']} ‚Äî {fmt_dt(r['remind_dt'])}" for r in items]
    await m.answer("\n".join(lines))

@router.message(Command("cancel"))
async def cmd_cancel(m: Message):
    uid = m.from_user.id
    if uid in PENDING:
        PENDING.pop(uid, None)
        await m.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
    else:
        await m.reply("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

# ========= MAIN HANDLER =========
@router.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    text = norm(m.text)

    # –≠—Ç–∞–ø —É—Ç–æ—á–Ω–µ–Ω–∏—è: –µ—Å–ª–∏ –∂–¥—ë–º –≤—ã–±–æ—Ä –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫–∏ –µ—â—ë —Ä–∞–∑
    if uid in PENDING:
        st = PENDING[uid]
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –ò–ò,
        # –Ω–æ —Å —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–º description (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        enriched = f"{text}. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {st.get('description','')}"
        data = await ai_parse(enriched)
        desc = st.get("description") or data.get("description") or clean_desc(text)

        if data.get("ok") and data.get("datetimes"):
            dt = as_local(data["datetimes"][0])
            PENDING.pop(uid, None)
            REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
            plan(REMINDERS[-1])
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
            return

        # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª —á–∏—Å–ª–æ/–≤—Ä–µ–º—è ‚Äî –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        cands = data.get("datetimes", []) or st.get("candidates", [])
        if len(cands) >= 2:
            PENDING[uid] = {"description": desc, "candidates": cands}
            await m.reply("–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb_variants(cands))
            return
        else:
            await m.reply("–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: 10, 10:30, 1710.")
            return

    # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
    data = await ai_parse(text)
    desc = clean_desc(data.get("description") or text)

    # 1) –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
    if data.get("ok") and data.get("datetimes"):
        dt = as_local(data["datetimes"][0])
        REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat": "none"})
        plan(REMINDERS[-1])
        await m.reply(f"–ì–æ—Ç–æ–≤–æ. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
        return

    # 2) –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–æ–ø–∫–∏
    cands = data.get("datetimes", [])
    if len(cands) >= 2:
        PENDING[uid] = {"description": desc, "candidates": cands}
        await m.reply(f"–£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ¬´{desc}¬ª", reply_markup=kb_variants(cands))
        return

    # 3) –ù—É–∂–Ω–∞ —É—Ç–æ—á–Ω—è–ª–∫–∞ (–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏/–¥–∞—Ç—ã)
    if data.get("need_clarification", True):
        PENDING[uid] = {"description": desc}
        ct = data.get("clarify_type", "time")
        if ct == "time":
            await m.reply(f"–û–∫–µ–π, ¬´{desc}¬ª. –í–æ —Å–∫–æ–ª—å–∫–æ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10, 10:30, 1710)")
        elif ct == "date":
            await m.reply(f"–û–∫–µ–π, ¬´{desc}¬ª. –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å?")
        else:
            await m.reply(f"–û–∫–µ–π, ¬´{desc}¬ª. –£—Ç–æ—á–Ω–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
        return

    # –§–æ–ª–±—ç–∫
    await m.reply("–ù–µ –ø–æ–Ω—è–ª. –°–∫–∞–∂–∏, –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 19 –æ—Ç—á—ë—Ç¬ª).")

# ========= CALLBACK =========
@router.callback_query(F.data.startswith("time|"))
async def cb_time(cb: CallbackQuery):
    uid = cb.from_user.id
    if uid not in PENDING or not PENDING[uid].get("candidates"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è"); return
    iso = cb.data.split("|", 1)[1]
    dt = as_local(iso)
    desc = PENDING[uid].get("description","–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    PENDING.pop(uid, None)
    REMINDERS.append({"user_id": uid, "text": desc, "remind_dt": dt, "repeat":"none"})
    plan(REMINDERS[-1])
    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª {fmt_dt(dt)}")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ========= RUN =========
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
