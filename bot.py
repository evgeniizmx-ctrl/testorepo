import os
import re
import asyncio
import aiosqlite
from datetime import datetime, timedelta, date
import pytz
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ================== –û–ö–†–£–ñ–ï–ù–ò–ï ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")
APP_TZ = os.getenv("APP_TZ", "Europe/Moscow")
DB_PATH = os.getenv("DB_PATH", "reminders.db")
tz = pytz.timezone(APP_TZ)

# ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==================
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=APP_TZ)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
PENDING: Dict[int, dict] = {}

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                text TEXT NOT NULL,
                remind_dt TEXT NOT NULL,
                status TEXT DEFAULT 'pending',
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS pending_states (
                user_id INTEGER PRIMARY KEY,
                data TEXT NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.commit()

async def save_reminder(user_id: int, text: str, remind_dt: datetime) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "INSERT INTO reminders (user_id, text, remind_dt) VALUES (?, ?, ?)",
            (user_id, text, remind_dt.isoformat())
        )
        await db.commit()
        return cursor.lastrowid

async def get_user_reminders(user_id: int) -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT id, text, remind_dt, status FROM reminders WHERE user_id = ? ORDER BY remind_dt",
            (user_id,)
        )
        rows = await cursor.fetchall()
        return [
            {
                "id": row[0],
                "text": row[1],
                "remind_dt": datetime.fromisoformat(row[2]),
                "status": row[3]
            }
            for row in rows
        ]

async def save_pending_state(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è"""
    import json
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR REPLACE INTO pending_states (user_id, data) VALUES (?, ?)",
            (user_id, json.dumps(data))
        )
        await db.commit()

async def get_pending_state(user_id: int) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è"""
    import json
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT data FROM pending_states WHERE user_id = ?",
            (user_id,)
        )
        row = await cursor.fetchone()
        if row:
            return json.loads(row[0])
        return None

async def delete_pending_state(user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "DELETE FROM pending_states WHERE user_id = ?",
            (user_id,)
        )
        await db.commit()

async def get_pending_reminders() -> List[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT id, user_id, text, remind_dt FROM reminders WHERE status = 'pending' AND remind_dt <= ?",
            (datetime.now(tz).isoformat(),)
        )
        rows = await cursor.fetchall()
        return [
            {
                "id": row[0],
                "user_id": row[1],
                "text": row[2],
                "remind_dt": datetime.fromisoformat(row[3])
            }
            for row in rows
        ]

async def update_reminder_status(reminder_id: int, status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE reminders SET status = ? WHERE id = ?",
            (status, reminder_id)
        )
        await db.commit()

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def norm(s: str) -> str:
    return re.sub(r"\s+", " ", s or "", flags=re.UNICODE).strip()

def clean_desc(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç–µ)?|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b[\s,:-]*", "", s, flags=re.I)
    s = re.sub(r"^(–æ|–ø—Ä–æ|–Ω–∞—Å—á[–µ—ë]—Ç)\s+", "", s, flags=re.I)
    return s.strip() or "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

async def send_reminder(user_id: int, text: str, reminder_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        await update_reminder_status(reminder_id, "sent")
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
        await update_reminder_status(reminder_id, "failed")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

async def check_reminders():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            reminders = await get_pending_reminders()
            for reminder in reminders:
                asyncio.create_task(
                    send_reminder(reminder["user_id"], reminder["text"], reminder["id"])
                )
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(30)

def plan(reminder_id: int, user_id: int, text: str, remind_dt: datetime):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ check_reminders
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    pass

def mk_dt(d: date, h: int, m: int) -> datetime:
    return tz.localize(datetime(d.year, d.month, d.day, h % 24, m % 60, 0, 0))

def soonest(dts: list[datetime]) -> list[datetime]:
    return sorted(dts, key=lambda x: x)

def human_label(dt: datetime) -> str:
    now = datetime.now(tz)
    if dt.date() == now.date():
        dword = "–°–µ–≥–æ–¥–Ω—è"
    elif dt.date() == (now + timedelta(days=1)).date():
        dword = "–ó–∞–≤—Ç—Ä–∞"
    else:
        dword = dt.strftime("%d.%m")

    h = dt.hour
    m = dt.minute
    if 0 <= h <= 4:
        mer = "–Ω–æ—á–∏"
    elif 5 <= h <= 11:
        mer = "—É—Ç—Ä–∞"
    elif 12 <= h <= 16:
        mer = "–¥–Ω—è"
    else:
        mer = "–≤–µ—á–µ—Ä–∞"

    h12 = h % 12
    if h12 == 0:
        h12 = 12
    t = f"{h12}:{m:02d}" if m else f"{h12}"
    return f"{dword} –≤ {t} {mer}"

def kb_variants(dts: list[datetime]) -> InlineKeyboardMarkup:
    rows = []
    for dt in soonest(dts):
        rows.append([InlineKeyboardButton(text=human_label(dt),
                                          callback_data=f"time|{dt.isoformat()}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ================== –†–£–°–°–ö–ò–ï –ú–ï–°–Ø–¶–´ ==================
MONTHS = {
    "—è–Ω–≤–∞—Ä—è":1, "—Ñ–µ–≤—Ä–∞–ª—è":2, "–º–∞—Ä—Ç–∞":3, "–∞–ø—Ä–µ–ª—è":4, "–º–∞—è":5, "–∏—é–Ω—è":6,
    "–∏—é–ª—è":7, "–∞–≤–≥—É—Å—Ç–∞":8, "—Å–µ–Ω—Ç—è–±—Ä—è":9, "–æ–∫—Ç—è–±—Ä—è":10, "–Ω–æ—è–±—Ä—è":11, "–¥–µ–∫–∞–±—Ä—è":12,
    "—è–Ω–≤–∞—Ä—å":1,"—Ñ–µ–≤—Ä–∞–ª—å":2,"–º–∞—Ä—Ç":3,"–∞–ø—Ä–µ–ª—å":4,"–º–∞–π":5,"–∏—é–Ω—å":6,"–∏—é–ª—å":7,
    "–∞–≤–≥—É—Å—Ç":8,"—Å–µ–Ω—Ç—è–±—Ä—å":9,"–æ–∫—Ç—è–±—Ä—å":10,"–Ω–æ—è–±—Ä—å":11,"–¥–µ–∫–∞–±—Ä—å":12,
}

def nearest_future_day(day: int, now: datetime) -> date:
    import calendar
    y, m = now.year, now.month
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–µ–Ω—å –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    try:
        candidate = date(y, m, day)
        if candidate > now.date():
            return candidate
    except ValueError:
        pass  # –î–Ω—è –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    
    # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, –∏–¥–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã
    month = m + 1
    year = y
    while True:
        if month > 12:
            month = 1
            year += 1
        
        # –£–∑–Ω–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ —Ü–µ–ª–µ–≤–æ–º –º–µ—Å—è—Ü–µ
        _, last_day = calendar.monthrange(year, month)
        target_day = min(day, last_day)
        
        try:
            return date(year, month, target_day)
        except ValueError:
            month += 1
            if month > 12:
                month = 1
                year += 1

# ================== –ü–ê–†–°–ï–†–´ ==================
# ... (–≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ) ...
# –ü–∞—Ä—Å–µ—Ä—ã: RX_HALF_HOUR, RX_REL, RX_REL_SINGULAR, RX_SAME_TIME, RX_TMR, 
# RX_ATMR, RX_IN_N_DAYS, RX_DAY_WORD_TIME, RX_ONLY_TIME, RX_DOT_DATE,
# RX_MONTH_DATE, RX_DAY_OF_MONTH, parse_relative, parse_same_time,
# apply_meridian, parse_dayword_time, parse_only_time, parse_dot_date,
# parse_month_date, parse_day_of_month

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
        "–ü–æ–Ω–∏–º–∞—é: ¬´24 –º–∞—è –≤ 19¬ª, ¬´1 —á–∏—Å–ª–∞ –≤ 7¬ª, ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç/—á–∞—Å/–º–∏–Ω—É—Ç—É¬ª, "
        "¬´–∑–∞–≤—Ç—Ä–∞ –≤ 6¬ª, ¬´–≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞¬ª.\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫, /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞."
    )

@dp.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong ‚úÖ")

@dp.message(Command("list"))
async def cmd_list(m: Message):
    uid = m.from_user.id
    items = await get_user_reminders(uid)
    if not items:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    lines = []
    for item in items:
        status = "‚úÖ" if item["status"] == "sent" else "‚è∞" if item["status"] == "pending" else "‚ùå"
        lines.append(f"{status} {item['text']} ‚Äî {item['remind_dt'].strftime('%d.%m %H:%M')}")
    
    await m.answer("\n".join(lines) if lines else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

@dp.message(Command("clear"))
async def cmd_clear(m: Message):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î
    await m.answer("–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# ================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==================
@dp.message(F.text)
async def on_text(m: Message):
    uid = m.from_user.id
    text = norm(m.text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    pending_state = await get_pending_state(uid)
    if pending_state:
        PENDING[uid] = pending_state

    # –µ—Å–ª–∏ –∂–¥—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    if uid in PENDING:
        st = PENDING[uid]
        if st.get("variants"):
            await m.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è")
            return
        if st.get("base_date"):
            mt = re.search(r"(?:^|\b–≤\s*)(\d{1,2})(?::(\d{2}))?\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–Ω–æ—á–∏)?\b", text, re.I)
            if not mt:
                await m.reply("–í–æ —Å–∫–æ–ª—å–∫–æ?")
                return
            h = int(mt.group(1)); minute = int(mt.group(2) or 0); mer = mt.group(3)
            hh = apply_meridian(h, mer)
            dt = mk_dt(st["base_date"], hh, minute)
            desc = st.get("description", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            await save_reminder(uid, desc, dt)
            await delete_pending_state(uid)
            PENDING.pop(uid, None)
            
            await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
            return
        PENDING.pop(uid, None)
        await delete_pending_state(uid)

    # –ü–∞—Ä—Å–µ—Ä—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –≤ –ë–î)
    # ... (–∫–æ–¥ –ø–∞—Ä—Å–µ—Ä–æ–≤ —Ç–∞–∫–æ–π –∂–µ, –Ω–æ —Å –∑–∞–º–µ–Ω–æ–π REMINDERS.append –Ω–∞ save_reminder) ...
    
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è parse_relative:
    r = parse_relative(text)
    if r:
        dt, rest = r
        desc = clean_desc(rest or text)
        await save_reminder(uid, desc, dt)
        await m.reply(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
        return

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤...
    # parse_same_time, parse_dayword_time, parse_only_time, parse_dot_date,
    # parse_month_date, parse_day_of_month

    await m.reply("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É/–≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä—ã: ¬´24.05 19:00¬ª, ¬´24 –º–∞—è –≤ 19¬ª, ¬´1 —á–∏—Å–ª–∞ –≤ 7¬ª, ¬´—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 6¬ª.")

# ================== –ö–ù–û–ü–ö–ò ==================
@dp.callback_query(F.data.startswith("time|"))
async def choose_time(cb: CallbackQuery):
    uid = cb.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    pending_state = await get_pending_state(uid)
    if not pending_state or not pending_state.get("variants"):
        await cb.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è")
        return
        
    PENDING[uid] = pending_state
    
    try:
        iso = cb.data.split("|", 1)[1]
        dt = datetime.fromisoformat(iso)
        dt = tz.localize(dt) if dt.tzinfo is None else dt.astimezone(tz)
    except Exception as e:
        print("parse cb time error:", e)
        await cb.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
        return

    desc = PENDING[uid].get("description", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_reminder(uid, desc, dt)
    await delete_pending_state(uid)
    PENDING.pop(uid, None)

    try:
        await cb.message.edit_text(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
    except Exception:
        await cb.message.answer(f"–ü—Ä–∏–Ω—è–ª. –ù–∞–ø–æ–º–Ω—é: ¬´{desc}¬ª –≤ {dt.strftime('%d.%m %H:%M')} ({APP_TZ})")
    await cb.answer("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ================== –ó–ê–ü–£–°–ö ==================
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(check_reminders())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
